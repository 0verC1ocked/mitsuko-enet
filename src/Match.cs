// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: match.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Superstars.Match {

  /// <summary>Holder for reflection information generated from match.proto</summary>
  public static partial class MatchReflection {

    #region Descriptor
    /// <summary>File descriptor for match.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgttYXRjaC5wcm90bxIFTUFUQ0gaDXBheWxvYWQucHJvdG8i6gIKEkNyZWF0",
            "ZU1hdGNoUmVxdWVzdBIPCgdtYXRjaElkGAEgASgJEhIKCmhvbWVVc2VySWQY",
            "AiABKAkSEgoKYXdheVVzZXJJZBgDIAEoCRIkCgtob21lX2xpbmV1cBgEIAMo",
            "CzIPLlBBWUxPQUQuUGxheWVyEiQKC2F3YXlfbGluZXVwGAUgAygLMg8uUEFZ",
            "TE9BRC5QbGF5ZXISGAoQZmlyc3RCYXR0aW5nVXNlchgGIAEoCRIRCglpc0hv",
            "bWVCb3QYByABKAgSEQoJaXNBd2F5Qm90GAggASgIEhsKE2JhdHNtYW5NYW5h",
            "UmVxdWlyZWQYCSABKAUSGgoSYm93bGVyTWFuYVJlcXVpcmVkGAogASgFEhQK",
            "DGlzUlBTRW5hYmxlZBgLIAEoCBIZChFpc1Bhc3NpdmVzRW5hYmxlZBgMIAEo",
            "CBIQCghtYXhPdmVycxgNIAEoBRITCgtpc0Z0dWVNYXRjaBgOIAEoCCKOAQoP",
            "RW5kTWF0Y2hSZXF1ZXN0Eg8KB21hdGNoSWQYASABKAkSKwoKdGVhbTFfZGF0",
            "YRgCIAEoCzIXLk1BVENILkVuZE1hdGNoVXNlckRhdGESKwoKdGVhbTJfZGF0",
            "YRgDIAEoCzIXLk1BVENILkVuZE1hdGNoVXNlckRhdGESEAoId2lubmVySWQY",
            "BCABKAkiYQoQRW5kTWF0Y2hVc2VyRGF0YRIKCgJpZBgBIAEoCRINCgV0b3Rh",
            "bBgCIAEoBRIPCgd3aWNrZXRzGAMgASgFEhMKC2JhbGxzX2ZhY2VkGAQgASgF",
            "EgwKBHF1aXQYBSABKAgiOAoJTWF0Y2hMaXN0Eg8KB01hdGNoSWQYASADKAkS",
            "DAoESG9tZRgCIAMoCRIMCgRBd2F5GAMgAygJInAKBlNBSW5mbxIXCgR0eXBl",
            "GAEgASgOMgkuTUFUQ0guU0ESFQoNZHVyYXRpb25fbGVmdBgCIAEoBRIgChhh",
            "cHBsaWVkX2Zvcl9jdXJyZW50X2JhbGwYAyABKAgSFAoMbWF4X2R1cmF0aW9u",
            "GAQgASgFIuUBCgpNX1VzZXJJbmZvEiYKCXBsYXlTdGF0ZRgBIAEoDjITLk1B",
            "VENILk1fUGxheVN0YXRlcxIvCg9jb25uZWN0aW9uU3RhdGUYAiABKA4yFi5N",
            "QVRDSC5Db25uZWN0aW9uU3RhdGUSEwoLb3Bwb25lbnRVSUQYAyABKAkSFwoD",
            "YWNrGAQgASgOMgouTUFUQ0guQUNLEhEKCWF1dG9fcGxheRgFIAEoCBIRCglt",
            "YW5hX2ZpbGwYBiABKAUSHgoHc2FfaW5mbxgHIAEoCzINLk1BVENILlNBSW5m",
            "bxIKCgJpZBgIIAEoCSLnAQoHTV9UU2hvdBIKCgJpZBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJEgsKA3J1bhgDIAEoBRIgCgdicmFja2V0GAQgASgOMg8uTUFUQ0gu",
            "QnJhY2tldHMSEwoLcHJvYmFiaWxpdHkYBSABKAISFQoNd2lja2V0X2NoYW5j",
            "ZRgGIAEoAhISCgpiYWxsX3ZhbHVlGAcgASgBEhIKCnNob3RfdmFsdWUYCCAB",
            "KAESDgoGbG9ja2VkGAkgASgIEhMKC3Nob3RfaGlkZGVuGAogASgIEhoKEnBy",
            "b2JhYmlsaXR5X2hpZGRlbhgLIAEoCCJDCgtCcmFja2V0RGF0YRIjCgpicmFj",
            "a2V0X2lkGAEgASgOMg8uTUFUQ0guQnJhY2tldHMSDwoHc2hvdF9pZBgCIAEo",
            "BSJ8CgdNX1RCYWxsEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDQoFdmFs",
            "dWUYAyABKAESHAoFc2t1bGwYBCABKA4yDS5NQVRDSC5Ta3VsbHMSKgoOc2hv",
            "dHNfcG9zc2libGUYBSADKAsyEi5NQVRDSC5CcmFja2V0RGF0YSJQCghUT3V0",
            "Y29tZRImCgdvdXRjb21lGAEgASgOMhUuUEFZTE9BRC5TaG90T3V0Y29tZXMS",
            "DAoEcnVucxgCIAEoBRIOCgZyYW5kb20YAyABKAEi9wEKDU1fQ3VycmVudEJh",
            "bGwSIAoFc3RhdGUYASABKA4yES5NQVRDSC5CYWxsU3RhdGVzEiAKB291dGNv",
            "bWUYAiABKAsyDy5NQVRDSC5UT3V0Y29tZRIdCgVzaG90cxgDIAMoCzIOLk1B",
            "VENILk1fVFNob3QSHQoFYmFsbHMYBCADKAsyDi5NQVRDSC5NX1RCYWxsEiQK",
            "DHNlbGVjdGVkQmFsbBgFIAEoCzIOLk1BVENILk1fVEJhbGwSJAoMc2VsZWN0",
            "ZWRTaG90GAYgASgLMg4uTUFUQ0guTV9UU2hvdBIYChBvdmVyX2JhbGxfbnVt",
            "YmVyGAcgASgFIrICCglNX0lubmluZ3MSIAoGaW5uaW5nGAEgASgOMhAuUEFZ",
            "TE9BRC5Jbm5pbmdzEgwKBHJ1bnMYAiABKAUSDQoFYmFsbHMYAyABKAUSDwoH",
            "d2lja2V0cxgEIAEoBRITCgtvdmVyX251bWJlchgFIAEoBRIaChJtYXhfYmFs",
            "bHNfcGVyX292ZXIYBiABKAUSEQoJbWF4X292ZXJzGAcgASgFEhgKEGJvdW5k",
            "YXJ5X2NvdW50ZXIYCCABKAUSIQoZZ3JlZW5fc2hvdF9taXNzZWRfY291bnRl",
            "chgJIAEoBRIiChp5ZWxsb3dfc2hvdF9taXNzZWRfY291bnRlchgKIAEoBRIX",
            "Cg91c2VyX29uX2JhdHRpbmcYCyABKAkSFwoPdXNlcl9vbl9ib3dsaW5nGAwg",
            "ASgJIvkBCghJT3V0Y29tZRISCgp0b3RhbF9ydW5zGAEgASgFEhMKC3RvdGFs",
            "X2JhbGxzGAIgASgFEhUKDXdpY2tldHNfdGFrZW4YAyABKAUSEwoLcnVuc19z",
            "Y29yZWQYBCABKAUSHAoUb3JpZ2luYWxfcnVuc19zY29yZWQYBSABKAUSIwoK",
            "YnJhY2tldF9pZBgGIAEoDjIPLk1BVENILkJyYWNrZXRzEhgKEG92ZXJfYmFs",
            "bF9udW1iZXIYByABKAUSEwoLb3Zlcl9udW1iZXIYCCABKAUSJgoHb3V0Y29t",
            "ZRgJIAEoDjIVLlBBWUxPQUQuU2hvdE91dGNvbWVzIvABCgtNYXRjaFBsYXll",
            "chIUCgxjaGFyYWN0ZXJfaWQYASABKAUSEAoIbmlja25hbWUYAiABKAkSFAoM",
            "aW1hZ2VfbnVtYmVyGAMgASgFEg0KBXBvd2VyGAQgASgFEhUKDWxpbmV1cF9u",
            "dW1iZXIYBSABKAUSDgoGaXNfb3V0GAYgASgIEgwKBHVzZWQYByABKAgSDAoE",
            "aGl0cxgIIAEoBRIOCgZtaXNzZXMYCSABKAUSDgoGbGhicmhiGAogASgBEhIK",
            "CmNvbmZpZGVuY2UYCyABKAESHQoGc3RyaWtlGAwgASgOMg0uTUFUQ0guU3Ry",
            "aWtlIp8FCgpNYXRjaE1vZGVsEg8KB21hdGNoSWQYASABKAkSIAoFdXNlcnMY",
            "AiADKAsyES5NQVRDSC5NX1VzZXJJbmZvEgwKBGhvbWUYAyABKAkSDAoEYXdh",
            "eRgEIAEoCRIkCglqb2luU3RhdGUYBSABKA4yES5NQVRDSC5Kb2luU3RhdGVz",
            "EigKCm1hdGNoU3RhdGUYBiABKA4yFC5QQVlMT0FELk1hdGNoU3RhdGVzEigK",
            "DmN1cnJlbnRJbm5pbmdzGAcgASgLMhAuTUFUQ0guTV9Jbm5pbmdzEikKD3By",
            "ZXZpb3VzSW5uaW5ncxgIIAEoCzIQLk1BVENILk1fSW5uaW5ncxInCgtob21l",
            "X2xpbmV1cBgJIAMoCzISLk1BVENILk1hdGNoUGxheWVyEicKC2F3YXlfbGlu",
            "ZXVwGAogAygLMhIuTUFUQ0guTWF0Y2hQbGF5ZXISKQoLY3VycmVudEJhbGwY",
            "CyABKAsyFC5NQVRDSC5NX0N1cnJlbnRCYWxsEisKDXByZXZpb3VzQmFsbHMY",
            "DCADKAsyFC5NQVRDSC5NX0N1cnJlbnRCYWxsEjAKFHNlbGVjdGVkRmlyc3RC",
            "YXRzbWFuGA0gASgLMhIuTUFUQ0guTWF0Y2hQbGF5ZXISMQoVc2VsZWN0ZWRT",
            "ZWNvbmRCYXRzbWFuGA4gASgLMhIuTUFUQ0guTWF0Y2hQbGF5ZXISKgoOc2Vs",
            "ZWN0ZWRCb3dsZXIYDyABKAsyEi5NQVRDSC5NYXRjaFBsYXllchImCg1wcmV2",
            "aW91c0V2ZW50GBAgASgOMg8uUEFZTE9BRC5FdmVudHMSFgoOc3RhdGVTdGFy",
            "dFRpbWUYESABKAMSIgoaYm90aF9kaXNjb25uZWN0X3RpbWVfcG9pbnQYEiAB",
            "KAMqSwoMTV9QbGF5U3RhdGVzEhAKDE1fTWF0Y2hNYWtlZBAAEgsKB01fUmVh",
            "ZHkQARINCglNX0Jvd2xpbmcQAhINCglNX0JhdHRpbmcQAypWCg9Db25uZWN0",
            "aW9uU3RhdGUSEAoMTm90Q29ubmVjdGVkEAASDQoJQ29ubmVjdGVkEAESEAoM",
            "RGlzY29ubmVjdGVkEAISEAoMUmVjb25uZWN0aW5nEAMq2gEKA0FDSxIICgRO",
            "b25lEAASDQoJVXNlclJlYWR5EAESDgoKTWF0Y2hSZWFkeRACEhAKDElubmlu",
            "Z3NSZWFkeRADEhIKDlBsYXllclNlbGVjdGVkEAQSFwoTTmV4dEJvd2xlclNl",
            "bGVjdGlvbhAFEhYKEk5leHRCb3dsZXJTZWxlY3RlZBAGEhEKDVN0YXJ0QmFs",
            "bFNlbnQQBxISCg5TdGFydEJhbGxBY2tlZBAIEgsKB0VuZEJhbGwQCRIOCgpF",
            "bmRJbm5pbmdzEAoSDwoLUmVjb25uZWN0ZWQQCypHCgpKb2luU3RhdGVzEgsK",
            "B05vSm9pbnMQABINCglGaXJzdEpvaW4QARIOCgpTZWNvbmRKb2luEAISDQoJ",
            "Qm90aEpvaW5zEAMqWwoKQmFsbFN0YXRlcxIPCgtOb0JhbGxTdGF0ZRAAEhEK",
            "DUJhbGxQdWJsaXNoZWQQARIRCg1TaG90UHVibGlzaGVkEAISCwoHT3V0Y29t",
            "ZRADEgkKBUVuZGVkEAQqSAoIQnJhY2tldHMSDQoJTm9CcmFja2V0EAASCAoE",
            "WmVybxABEgcKA09uZRACEgcKA1R3bxADEggKBEZvdXIQBBIHCgNTaXgQBSo1",
            "CgZTa3VsbHMSCwoHTm9Ta3VsbBAAEgkKBUdSRUVOEAESCgoGWUVMTE9XEAIS",
            "BwoDUkVEEAMqnwIKAlNBEgoKBk5vbmVTQRAAEgkKBVNtYXNoEAESCAoEVHdv",
            "WBACEg8KC0Jvd2xlclN0ZWFsEAMSCgoGWW9ya2VyEAQSEAoMQmF0c21hblN0",
            "ZWFsEAUSCAoEUmFnZRAGEg0KCUJvb21lcmFuZxAHEgwKCEhhbGZSdW5zEAgS",
            "BwoDSGV4EAkSDAoISW1tb3J0YWwQChIICgREb29tEAsSDgoKRmlmdHlGaWZ0",
            "eRAMEgkKBVNBSGl0EA0SCQoFQ2hva2UQDhINCglGbGFzaGJhbmcQDxILCgdB",
            "c3NhdWx0EBASCQoFQWxsSW4QERIOCgpQb3dlcnN0ZWFsEBISCwoHVHJpcGxl",
            "dBATEgwKCE92ZXJsb2FkEBQSCQoFUHVyZ2UQFSozCgZTdHJpa2USDAoITm9T",
            "dHJpa2UQABIMCghPblN0cmlrZRABEg0KCU9mZlN0cmlrZRACQiVaEHBiL21p",
            "dHN1a28vbWF0Y2iqAhBTdXBlcnN0YXJzLk1hdGNoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Superstars.Payload.PayloadReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Superstars.Match.M_PlayStates), typeof(global::Superstars.Match.ConnectionState), typeof(global::Superstars.Match.ACK), typeof(global::Superstars.Match.JoinStates), typeof(global::Superstars.Match.BallStates), typeof(global::Superstars.Match.Brackets), typeof(global::Superstars.Match.Skulls), typeof(global::Superstars.Match.SA), typeof(global::Superstars.Match.Strike), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.CreateMatchRequest), global::Superstars.Match.CreateMatchRequest.Parser, new[]{ "MatchId", "HomeUserId", "AwayUserId", "HomeLineup", "AwayLineup", "FirstBattingUser", "IsHomeBot", "IsAwayBot", "BatsmanManaRequired", "BowlerManaRequired", "IsRPSEnabled", "IsPassivesEnabled", "MaxOvers", "IsFtueMatch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.EndMatchRequest), global::Superstars.Match.EndMatchRequest.Parser, new[]{ "MatchId", "Team1Data", "Team2Data", "WinnerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.EndMatchUserData), global::Superstars.Match.EndMatchUserData.Parser, new[]{ "Id", "Total", "Wickets", "BallsFaced", "Quit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.MatchList), global::Superstars.Match.MatchList.Parser, new[]{ "MatchId", "Home", "Away" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.SAInfo), global::Superstars.Match.SAInfo.Parser, new[]{ "Type", "DurationLeft", "AppliedForCurrentBall", "MaxDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.M_UserInfo), global::Superstars.Match.M_UserInfo.Parser, new[]{ "PlayState", "ConnectionState", "OpponentUID", "Ack", "AutoPlay", "ManaFill", "SaInfo", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.M_TShot), global::Superstars.Match.M_TShot.Parser, new[]{ "Id", "Name", "Run", "Bracket", "Probability", "WicketChance", "BallValue", "ShotValue", "Locked", "ShotHidden", "ProbabilityHidden" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.BracketData), global::Superstars.Match.BracketData.Parser, new[]{ "BracketId", "ShotId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.M_TBall), global::Superstars.Match.M_TBall.Parser, new[]{ "Id", "Name", "Value", "Skull", "ShotsPossible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.TOutcome), global::Superstars.Match.TOutcome.Parser, new[]{ "Outcome", "Runs", "Random" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.M_CurrentBall), global::Superstars.Match.M_CurrentBall.Parser, new[]{ "State", "Outcome", "Shots", "Balls", "SelectedBall", "SelectedShot", "OverBallNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.M_Innings), global::Superstars.Match.M_Innings.Parser, new[]{ "Inning", "Runs", "Balls", "Wickets", "OverNumber", "MaxBallsPerOver", "MaxOvers", "BoundaryCounter", "GreenShotMissedCounter", "YellowShotMissedCounter", "UserOnBatting", "UserOnBowling" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.IOutcome), global::Superstars.Match.IOutcome.Parser, new[]{ "TotalRuns", "TotalBalls", "WicketsTaken", "RunsScored", "OriginalRunsScored", "BracketId", "OverBallNumber", "OverNumber", "Outcome" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.MatchPlayer), global::Superstars.Match.MatchPlayer.Parser, new[]{ "CharacterId", "Nickname", "ImageNumber", "Power", "LineupNumber", "IsOut", "Used", "Hits", "Misses", "Lhbrhb", "Confidence", "Strike" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Match.MatchModel), global::Superstars.Match.MatchModel.Parser, new[]{ "MatchId", "Users", "Home", "Away", "JoinState", "MatchState", "CurrentInnings", "PreviousInnings", "HomeLineup", "AwayLineup", "CurrentBall", "PreviousBalls", "SelectedFirstBatsman", "SelectedSecondBatsman", "SelectedBowler", "PreviousEvent", "StateStartTime", "BothDisconnectTimePoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum M_PlayStates {
    [pbr::OriginalName("M_MatchMaked")] MMatchMaked = 0,
    [pbr::OriginalName("M_Ready")] MReady = 1,
    [pbr::OriginalName("M_Bowling")] MBowling = 2,
    [pbr::OriginalName("M_Batting")] MBatting = 3,
  }

  public enum ConnectionState {
    [pbr::OriginalName("NotConnected")] NotConnected = 0,
    [pbr::OriginalName("Connected")] Connected = 1,
    [pbr::OriginalName("Disconnected")] Disconnected = 2,
    [pbr::OriginalName("Reconnecting")] Reconnecting = 3,
  }

  public enum ACK {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("UserReady")] UserReady = 1,
    [pbr::OriginalName("MatchReady")] MatchReady = 2,
    [pbr::OriginalName("InningsReady")] InningsReady = 3,
    [pbr::OriginalName("PlayerSelected")] PlayerSelected = 4,
    [pbr::OriginalName("NextBowlerSelection")] NextBowlerSelection = 5,
    [pbr::OriginalName("NextBowlerSelected")] NextBowlerSelected = 6,
    [pbr::OriginalName("StartBallSent")] StartBallSent = 7,
    [pbr::OriginalName("StartBallAcked")] StartBallAcked = 8,
    [pbr::OriginalName("EndBall")] EndBall = 9,
    [pbr::OriginalName("EndInnings")] EndInnings = 10,
    [pbr::OriginalName("Reconnected")] Reconnected = 11,
  }

  public enum JoinStates {
    [pbr::OriginalName("NoJoins")] NoJoins = 0,
    [pbr::OriginalName("FirstJoin")] FirstJoin = 1,
    [pbr::OriginalName("SecondJoin")] SecondJoin = 2,
    [pbr::OriginalName("BothJoins")] BothJoins = 3,
  }

  public enum BallStates {
    [pbr::OriginalName("NoBallState")] NoBallState = 0,
    [pbr::OriginalName("BallPublished")] BallPublished = 1,
    [pbr::OriginalName("ShotPublished")] ShotPublished = 2,
    [pbr::OriginalName("Outcome")] Outcome = 3,
    [pbr::OriginalName("Ended")] Ended = 4,
  }

  public enum Brackets {
    [pbr::OriginalName("NoBracket")] NoBracket = 0,
    [pbr::OriginalName("Zero")] Zero = 1,
    [pbr::OriginalName("One")] One = 2,
    [pbr::OriginalName("Two")] Two = 3,
    [pbr::OriginalName("Four")] Four = 4,
    [pbr::OriginalName("Six")] Six = 5,
  }

  public enum Skulls {
    [pbr::OriginalName("NoSkull")] NoSkull = 0,
    [pbr::OriginalName("GREEN")] Green = 1,
    [pbr::OriginalName("YELLOW")] Yellow = 2,
    [pbr::OriginalName("RED")] Red = 3,
  }

  public enum SA {
    [pbr::OriginalName("NoneSA")] NoneSa = 0,
    [pbr::OriginalName("Smash")] Smash = 1,
    [pbr::OriginalName("TwoX")] TwoX = 2,
    [pbr::OriginalName("BowlerSteal")] BowlerSteal = 3,
    [pbr::OriginalName("Yorker")] Yorker = 4,
    [pbr::OriginalName("BatsmanSteal")] BatsmanSteal = 5,
    [pbr::OriginalName("Rage")] Rage = 6,
    [pbr::OriginalName("Boomerang")] Boomerang = 7,
    [pbr::OriginalName("HalfRuns")] HalfRuns = 8,
    [pbr::OriginalName("Hex")] Hex = 9,
    [pbr::OriginalName("Immortal")] Immortal = 10,
    [pbr::OriginalName("Doom")] Doom = 11,
    [pbr::OriginalName("FiftyFifty")] FiftyFifty = 12,
    [pbr::OriginalName("SAHit")] Hit = 13,
    [pbr::OriginalName("Choke")] Choke = 14,
    [pbr::OriginalName("Flashbang")] Flashbang = 15,
    [pbr::OriginalName("Assault")] Assault = 16,
    [pbr::OriginalName("AllIn")] AllIn = 17,
    [pbr::OriginalName("Powersteal")] Powersteal = 18,
    [pbr::OriginalName("Triplet")] Triplet = 19,
    [pbr::OriginalName("Overload")] Overload = 20,
    [pbr::OriginalName("Purge")] Purge = 21,
  }

  public enum Strike {
    [pbr::OriginalName("NoStrike")] NoStrike = 0,
    [pbr::OriginalName("OnStrike")] OnStrike = 1,
    [pbr::OriginalName("OffStrike")] OffStrike = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CreateMatchRequest : pb::IMessage<CreateMatchRequest> {
    private static readonly pb::MessageParser<CreateMatchRequest> _parser = new pb::MessageParser<CreateMatchRequest>(() => new CreateMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMatchRequest(CreateMatchRequest other) : this() {
      matchId_ = other.matchId_;
      homeUserId_ = other.homeUserId_;
      awayUserId_ = other.awayUserId_;
      homeLineup_ = other.homeLineup_.Clone();
      awayLineup_ = other.awayLineup_.Clone();
      firstBattingUser_ = other.firstBattingUser_;
      isHomeBot_ = other.isHomeBot_;
      isAwayBot_ = other.isAwayBot_;
      batsmanManaRequired_ = other.batsmanManaRequired_;
      bowlerManaRequired_ = other.bowlerManaRequired_;
      isRPSEnabled_ = other.isRPSEnabled_;
      isPassivesEnabled_ = other.isPassivesEnabled_;
      maxOvers_ = other.maxOvers_;
      isFtueMatch_ = other.isFtueMatch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMatchRequest Clone() {
      return new CreateMatchRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "homeUserId" field.</summary>
    public const int HomeUserIdFieldNumber = 2;
    private string homeUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HomeUserId {
      get { return homeUserId_; }
      set {
        homeUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "awayUserId" field.</summary>
    public const int AwayUserIdFieldNumber = 3;
    private string awayUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AwayUserId {
      get { return awayUserId_; }
      set {
        awayUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "home_lineup" field.</summary>
    public const int HomeLineupFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Superstars.Payload.Player> _repeated_homeLineup_codec
        = pb::FieldCodec.ForMessage(34, global::Superstars.Payload.Player.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.Player> homeLineup_ = new pbc::RepeatedField<global::Superstars.Payload.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.Player> HomeLineup {
      get { return homeLineup_; }
    }

    /// <summary>Field number for the "away_lineup" field.</summary>
    public const int AwayLineupFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Superstars.Payload.Player> _repeated_awayLineup_codec
        = pb::FieldCodec.ForMessage(42, global::Superstars.Payload.Player.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.Player> awayLineup_ = new pbc::RepeatedField<global::Superstars.Payload.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.Player> AwayLineup {
      get { return awayLineup_; }
    }

    /// <summary>Field number for the "firstBattingUser" field.</summary>
    public const int FirstBattingUserFieldNumber = 6;
    private string firstBattingUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstBattingUser {
      get { return firstBattingUser_; }
      set {
        firstBattingUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isHomeBot" field.</summary>
    public const int IsHomeBotFieldNumber = 7;
    private bool isHomeBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHomeBot {
      get { return isHomeBot_; }
      set {
        isHomeBot_ = value;
      }
    }

    /// <summary>Field number for the "isAwayBot" field.</summary>
    public const int IsAwayBotFieldNumber = 8;
    private bool isAwayBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAwayBot {
      get { return isAwayBot_; }
      set {
        isAwayBot_ = value;
      }
    }

    /// <summary>Field number for the "batsmanManaRequired" field.</summary>
    public const int BatsmanManaRequiredFieldNumber = 9;
    private int batsmanManaRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatsmanManaRequired {
      get { return batsmanManaRequired_; }
      set {
        batsmanManaRequired_ = value;
      }
    }

    /// <summary>Field number for the "bowlerManaRequired" field.</summary>
    public const int BowlerManaRequiredFieldNumber = 10;
    private int bowlerManaRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlerManaRequired {
      get { return bowlerManaRequired_; }
      set {
        bowlerManaRequired_ = value;
      }
    }

    /// <summary>Field number for the "isRPSEnabled" field.</summary>
    public const int IsRPSEnabledFieldNumber = 11;
    private bool isRPSEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRPSEnabled {
      get { return isRPSEnabled_; }
      set {
        isRPSEnabled_ = value;
      }
    }

    /// <summary>Field number for the "isPassivesEnabled" field.</summary>
    public const int IsPassivesEnabledFieldNumber = 12;
    private bool isPassivesEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassivesEnabled {
      get { return isPassivesEnabled_; }
      set {
        isPassivesEnabled_ = value;
      }
    }

    /// <summary>Field number for the "maxOvers" field.</summary>
    public const int MaxOversFieldNumber = 13;
    private int maxOvers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxOvers {
      get { return maxOvers_; }
      set {
        maxOvers_ = value;
      }
    }

    /// <summary>Field number for the "isFtueMatch" field.</summary>
    public const int IsFtueMatchFieldNumber = 14;
    private bool isFtueMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFtueMatch {
      get { return isFtueMatch_; }
      set {
        isFtueMatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (HomeUserId != other.HomeUserId) return false;
      if (AwayUserId != other.AwayUserId) return false;
      if(!homeLineup_.Equals(other.homeLineup_)) return false;
      if(!awayLineup_.Equals(other.awayLineup_)) return false;
      if (FirstBattingUser != other.FirstBattingUser) return false;
      if (IsHomeBot != other.IsHomeBot) return false;
      if (IsAwayBot != other.IsAwayBot) return false;
      if (BatsmanManaRequired != other.BatsmanManaRequired) return false;
      if (BowlerManaRequired != other.BowlerManaRequired) return false;
      if (IsRPSEnabled != other.IsRPSEnabled) return false;
      if (IsPassivesEnabled != other.IsPassivesEnabled) return false;
      if (MaxOvers != other.MaxOvers) return false;
      if (IsFtueMatch != other.IsFtueMatch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (HomeUserId.Length != 0) hash ^= HomeUserId.GetHashCode();
      if (AwayUserId.Length != 0) hash ^= AwayUserId.GetHashCode();
      hash ^= homeLineup_.GetHashCode();
      hash ^= awayLineup_.GetHashCode();
      if (FirstBattingUser.Length != 0) hash ^= FirstBattingUser.GetHashCode();
      if (IsHomeBot != false) hash ^= IsHomeBot.GetHashCode();
      if (IsAwayBot != false) hash ^= IsAwayBot.GetHashCode();
      if (BatsmanManaRequired != 0) hash ^= BatsmanManaRequired.GetHashCode();
      if (BowlerManaRequired != 0) hash ^= BowlerManaRequired.GetHashCode();
      if (IsRPSEnabled != false) hash ^= IsRPSEnabled.GetHashCode();
      if (IsPassivesEnabled != false) hash ^= IsPassivesEnabled.GetHashCode();
      if (MaxOvers != 0) hash ^= MaxOvers.GetHashCode();
      if (IsFtueMatch != false) hash ^= IsFtueMatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (HomeUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HomeUserId);
      }
      if (AwayUserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AwayUserId);
      }
      homeLineup_.WriteTo(output, _repeated_homeLineup_codec);
      awayLineup_.WriteTo(output, _repeated_awayLineup_codec);
      if (FirstBattingUser.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirstBattingUser);
      }
      if (IsHomeBot != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsHomeBot);
      }
      if (IsAwayBot != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAwayBot);
      }
      if (BatsmanManaRequired != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BatsmanManaRequired);
      }
      if (BowlerManaRequired != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BowlerManaRequired);
      }
      if (IsRPSEnabled != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsRPSEnabled);
      }
      if (IsPassivesEnabled != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPassivesEnabled);
      }
      if (MaxOvers != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxOvers);
      }
      if (IsFtueMatch != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsFtueMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (HomeUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeUserId);
      }
      if (AwayUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AwayUserId);
      }
      size += homeLineup_.CalculateSize(_repeated_homeLineup_codec);
      size += awayLineup_.CalculateSize(_repeated_awayLineup_codec);
      if (FirstBattingUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstBattingUser);
      }
      if (IsHomeBot != false) {
        size += 1 + 1;
      }
      if (IsAwayBot != false) {
        size += 1 + 1;
      }
      if (BatsmanManaRequired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatsmanManaRequired);
      }
      if (BowlerManaRequired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlerManaRequired);
      }
      if (IsRPSEnabled != false) {
        size += 1 + 1;
      }
      if (IsPassivesEnabled != false) {
        size += 1 + 1;
      }
      if (MaxOvers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOvers);
      }
      if (IsFtueMatch != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.HomeUserId.Length != 0) {
        HomeUserId = other.HomeUserId;
      }
      if (other.AwayUserId.Length != 0) {
        AwayUserId = other.AwayUserId;
      }
      homeLineup_.Add(other.homeLineup_);
      awayLineup_.Add(other.awayLineup_);
      if (other.FirstBattingUser.Length != 0) {
        FirstBattingUser = other.FirstBattingUser;
      }
      if (other.IsHomeBot != false) {
        IsHomeBot = other.IsHomeBot;
      }
      if (other.IsAwayBot != false) {
        IsAwayBot = other.IsAwayBot;
      }
      if (other.BatsmanManaRequired != 0) {
        BatsmanManaRequired = other.BatsmanManaRequired;
      }
      if (other.BowlerManaRequired != 0) {
        BowlerManaRequired = other.BowlerManaRequired;
      }
      if (other.IsRPSEnabled != false) {
        IsRPSEnabled = other.IsRPSEnabled;
      }
      if (other.IsPassivesEnabled != false) {
        IsPassivesEnabled = other.IsPassivesEnabled;
      }
      if (other.MaxOvers != 0) {
        MaxOvers = other.MaxOvers;
      }
      if (other.IsFtueMatch != false) {
        IsFtueMatch = other.IsFtueMatch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            HomeUserId = input.ReadString();
            break;
          }
          case 26: {
            AwayUserId = input.ReadString();
            break;
          }
          case 34: {
            homeLineup_.AddEntriesFrom(input, _repeated_homeLineup_codec);
            break;
          }
          case 42: {
            awayLineup_.AddEntriesFrom(input, _repeated_awayLineup_codec);
            break;
          }
          case 50: {
            FirstBattingUser = input.ReadString();
            break;
          }
          case 56: {
            IsHomeBot = input.ReadBool();
            break;
          }
          case 64: {
            IsAwayBot = input.ReadBool();
            break;
          }
          case 72: {
            BatsmanManaRequired = input.ReadInt32();
            break;
          }
          case 80: {
            BowlerManaRequired = input.ReadInt32();
            break;
          }
          case 88: {
            IsRPSEnabled = input.ReadBool();
            break;
          }
          case 96: {
            IsPassivesEnabled = input.ReadBool();
            break;
          }
          case 104: {
            MaxOvers = input.ReadInt32();
            break;
          }
          case 112: {
            IsFtueMatch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndMatchRequest : pb::IMessage<EndMatchRequest> {
    private static readonly pb::MessageParser<EndMatchRequest> _parser = new pb::MessageParser<EndMatchRequest>(() => new EndMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest(EndMatchRequest other) : this() {
      matchId_ = other.matchId_;
      team1Data_ = other.team1Data_ != null ? other.team1Data_.Clone() : null;
      team2Data_ = other.team2Data_ != null ? other.team2Data_.Clone() : null;
      winnerId_ = other.winnerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest Clone() {
      return new EndMatchRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team1_data" field.</summary>
    public const int Team1DataFieldNumber = 2;
    private global::Superstars.Match.EndMatchUserData team1Data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.EndMatchUserData Team1Data {
      get { return team1Data_; }
      set {
        team1Data_ = value;
      }
    }

    /// <summary>Field number for the "team2_data" field.</summary>
    public const int Team2DataFieldNumber = 3;
    private global::Superstars.Match.EndMatchUserData team2Data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.EndMatchUserData Team2Data {
      get { return team2Data_; }
      set {
        team2Data_ = value;
      }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 4;
    private string winnerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Team1Data, other.Team1Data)) return false;
      if (!object.Equals(Team2Data, other.Team2Data)) return false;
      if (WinnerId != other.WinnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (team1Data_ != null) hash ^= Team1Data.GetHashCode();
      if (team2Data_ != null) hash ^= Team2Data.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (team1Data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Team1Data);
      }
      if (team2Data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Team2Data);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WinnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (team1Data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team1Data);
      }
      if (team2Data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team2Data);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.team1Data_ != null) {
        if (team1Data_ == null) {
          Team1Data = new global::Superstars.Match.EndMatchUserData();
        }
        Team1Data.MergeFrom(other.Team1Data);
      }
      if (other.team2Data_ != null) {
        if (team2Data_ == null) {
          Team2Data = new global::Superstars.Match.EndMatchUserData();
        }
        Team2Data.MergeFrom(other.Team2Data);
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            if (team1Data_ == null) {
              Team1Data = new global::Superstars.Match.EndMatchUserData();
            }
            input.ReadMessage(Team1Data);
            break;
          }
          case 26: {
            if (team2Data_ == null) {
              Team2Data = new global::Superstars.Match.EndMatchUserData();
            }
            input.ReadMessage(Team2Data);
            break;
          }
          case 34: {
            WinnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndMatchUserData : pb::IMessage<EndMatchUserData> {
    private static readonly pb::MessageParser<EndMatchUserData> _parser = new pb::MessageParser<EndMatchUserData>(() => new EndMatchUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndMatchUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchUserData(EndMatchUserData other) : this() {
      id_ = other.id_;
      total_ = other.total_;
      wickets_ = other.wickets_;
      ballsFaced_ = other.ballsFaced_;
      quit_ = other.quit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchUserData Clone() {
      return new EndMatchUserData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "wickets" field.</summary>
    public const int WicketsFieldNumber = 3;
    private int wickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wickets {
      get { return wickets_; }
      set {
        wickets_ = value;
      }
    }

    /// <summary>Field number for the "balls_faced" field.</summary>
    public const int BallsFacedFieldNumber = 4;
    private int ballsFaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallsFaced {
      get { return ballsFaced_; }
      set {
        ballsFaced_ = value;
      }
    }

    /// <summary>Field number for the "quit" field.</summary>
    public const int QuitFieldNumber = 5;
    private bool quit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Quit {
      get { return quit_; }
      set {
        quit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndMatchUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndMatchUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Total != other.Total) return false;
      if (Wickets != other.Wickets) return false;
      if (BallsFaced != other.BallsFaced) return false;
      if (Quit != other.Quit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Wickets != 0) hash ^= Wickets.GetHashCode();
      if (BallsFaced != 0) hash ^= BallsFaced.GetHashCode();
      if (Quit != false) hash ^= Quit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      if (Wickets != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Wickets);
      }
      if (BallsFaced != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BallsFaced);
      }
      if (Quit != false) {
        output.WriteRawTag(40);
        output.WriteBool(Quit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Wickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wickets);
      }
      if (BallsFaced != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallsFaced);
      }
      if (Quit != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndMatchUserData other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Wickets != 0) {
        Wickets = other.Wickets;
      }
      if (other.BallsFaced != 0) {
        BallsFaced = other.BallsFaced;
      }
      if (other.Quit != false) {
        Quit = other.Quit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
          case 24: {
            Wickets = input.ReadInt32();
            break;
          }
          case 32: {
            BallsFaced = input.ReadInt32();
            break;
          }
          case 40: {
            Quit = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchList : pb::IMessage<MatchList> {
    private static readonly pb::MessageParser<MatchList> _parser = new pb::MessageParser<MatchList>(() => new MatchList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList(MatchList other) : this() {
      matchId_ = other.matchId_.Clone();
      home_ = other.home_.Clone();
      away_ = other.away_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList Clone() {
      return new MatchList(this);
    }

    /// <summary>Field number for the "MatchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_matchId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> matchId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MatchId {
      get { return matchId_; }
    }

    /// <summary>Field number for the "Home" field.</summary>
    public const int HomeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_home_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> home_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Home {
      get { return home_; }
    }

    /// <summary>Field number for the "Away" field.</summary>
    public const int AwayFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_away_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> away_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Away {
      get { return away_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matchId_.Equals(other.matchId_)) return false;
      if(!home_.Equals(other.home_)) return false;
      if(!away_.Equals(other.away_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matchId_.GetHashCode();
      hash ^= home_.GetHashCode();
      hash ^= away_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matchId_.WriteTo(output, _repeated_matchId_codec);
      home_.WriteTo(output, _repeated_home_codec);
      away_.WriteTo(output, _repeated_away_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matchId_.CalculateSize(_repeated_matchId_codec);
      size += home_.CalculateSize(_repeated_home_codec);
      size += away_.CalculateSize(_repeated_away_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchList other) {
      if (other == null) {
        return;
      }
      matchId_.Add(other.matchId_);
      home_.Add(other.home_);
      away_.Add(other.away_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matchId_.AddEntriesFrom(input, _repeated_matchId_codec);
            break;
          }
          case 18: {
            home_.AddEntriesFrom(input, _repeated_home_codec);
            break;
          }
          case 26: {
            away_.AddEntriesFrom(input, _repeated_away_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SAInfo : pb::IMessage<SAInfo> {
    private static readonly pb::MessageParser<SAInfo> _parser = new pb::MessageParser<SAInfo>(() => new SAInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SAInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAInfo(SAInfo other) : this() {
      type_ = other.type_;
      durationLeft_ = other.durationLeft_;
      appliedForCurrentBall_ = other.appliedForCurrentBall_;
      maxDuration_ = other.maxDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAInfo Clone() {
      return new SAInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Superstars.Match.SA type_ = global::Superstars.Match.SA.NoneSa;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.SA Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "duration_left" field.</summary>
    public const int DurationLeftFieldNumber = 2;
    private int durationLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationLeft {
      get { return durationLeft_; }
      set {
        durationLeft_ = value;
      }
    }

    /// <summary>Field number for the "applied_for_current_ball" field.</summary>
    public const int AppliedForCurrentBallFieldNumber = 3;
    private bool appliedForCurrentBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AppliedForCurrentBall {
      get { return appliedForCurrentBall_; }
      set {
        appliedForCurrentBall_ = value;
      }
    }

    /// <summary>Field number for the "max_duration" field.</summary>
    public const int MaxDurationFieldNumber = 4;
    private int maxDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDuration {
      get { return maxDuration_; }
      set {
        maxDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SAInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SAInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (DurationLeft != other.DurationLeft) return false;
      if (AppliedForCurrentBall != other.AppliedForCurrentBall) return false;
      if (MaxDuration != other.MaxDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Superstars.Match.SA.NoneSa) hash ^= Type.GetHashCode();
      if (DurationLeft != 0) hash ^= DurationLeft.GetHashCode();
      if (AppliedForCurrentBall != false) hash ^= AppliedForCurrentBall.GetHashCode();
      if (MaxDuration != 0) hash ^= MaxDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Superstars.Match.SA.NoneSa) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (DurationLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DurationLeft);
      }
      if (AppliedForCurrentBall != false) {
        output.WriteRawTag(24);
        output.WriteBool(AppliedForCurrentBall);
      }
      if (MaxDuration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Superstars.Match.SA.NoneSa) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DurationLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationLeft);
      }
      if (AppliedForCurrentBall != false) {
        size += 1 + 1;
      }
      if (MaxDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SAInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Superstars.Match.SA.NoneSa) {
        Type = other.Type;
      }
      if (other.DurationLeft != 0) {
        DurationLeft = other.DurationLeft;
      }
      if (other.AppliedForCurrentBall != false) {
        AppliedForCurrentBall = other.AppliedForCurrentBall;
      }
      if (other.MaxDuration != 0) {
        MaxDuration = other.MaxDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Superstars.Match.SA) input.ReadEnum();
            break;
          }
          case 16: {
            DurationLeft = input.ReadInt32();
            break;
          }
          case 24: {
            AppliedForCurrentBall = input.ReadBool();
            break;
          }
          case 32: {
            MaxDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class M_UserInfo : pb::IMessage<M_UserInfo> {
    private static readonly pb::MessageParser<M_UserInfo> _parser = new pb::MessageParser<M_UserInfo>(() => new M_UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M_UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_UserInfo(M_UserInfo other) : this() {
      playState_ = other.playState_;
      connectionState_ = other.connectionState_;
      opponentUID_ = other.opponentUID_;
      ack_ = other.ack_;
      autoPlay_ = other.autoPlay_;
      manaFill_ = other.manaFill_;
      saInfo_ = other.saInfo_ != null ? other.saInfo_.Clone() : null;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_UserInfo Clone() {
      return new M_UserInfo(this);
    }

    /// <summary>Field number for the "playState" field.</summary>
    public const int PlayStateFieldNumber = 1;
    private global::Superstars.Match.M_PlayStates playState_ = global::Superstars.Match.M_PlayStates.MMatchMaked;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_PlayStates PlayState {
      get { return playState_; }
      set {
        playState_ = value;
      }
    }

    /// <summary>Field number for the "connectionState" field.</summary>
    public const int ConnectionStateFieldNumber = 2;
    private global::Superstars.Match.ConnectionState connectionState_ = global::Superstars.Match.ConnectionState.NotConnected;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.ConnectionState ConnectionState {
      get { return connectionState_; }
      set {
        connectionState_ = value;
      }
    }

    /// <summary>Field number for the "opponentUID" field.</summary>
    public const int OpponentUIDFieldNumber = 3;
    private string opponentUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentUID {
      get { return opponentUID_; }
      set {
        opponentUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 4;
    private global::Superstars.Match.ACK ack_ = global::Superstars.Match.ACK.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.ACK Ack {
      get { return ack_; }
      set {
        ack_ = value;
      }
    }

    /// <summary>Field number for the "auto_play" field.</summary>
    public const int AutoPlayFieldNumber = 5;
    private bool autoPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoPlay {
      get { return autoPlay_; }
      set {
        autoPlay_ = value;
      }
    }

    /// <summary>Field number for the "mana_fill" field.</summary>
    public const int ManaFillFieldNumber = 6;
    private int manaFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaFill {
      get { return manaFill_; }
      set {
        manaFill_ = value;
      }
    }

    /// <summary>Field number for the "sa_info" field.</summary>
    public const int SaInfoFieldNumber = 7;
    private global::Superstars.Match.SAInfo saInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.SAInfo SaInfo {
      get { return saInfo_; }
      set {
        saInfo_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M_UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M_UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayState != other.PlayState) return false;
      if (ConnectionState != other.ConnectionState) return false;
      if (OpponentUID != other.OpponentUID) return false;
      if (Ack != other.Ack) return false;
      if (AutoPlay != other.AutoPlay) return false;
      if (ManaFill != other.ManaFill) return false;
      if (!object.Equals(SaInfo, other.SaInfo)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayState != global::Superstars.Match.M_PlayStates.MMatchMaked) hash ^= PlayState.GetHashCode();
      if (ConnectionState != global::Superstars.Match.ConnectionState.NotConnected) hash ^= ConnectionState.GetHashCode();
      if (OpponentUID.Length != 0) hash ^= OpponentUID.GetHashCode();
      if (Ack != global::Superstars.Match.ACK.None) hash ^= Ack.GetHashCode();
      if (AutoPlay != false) hash ^= AutoPlay.GetHashCode();
      if (ManaFill != 0) hash ^= ManaFill.GetHashCode();
      if (saInfo_ != null) hash ^= SaInfo.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayState != global::Superstars.Match.M_PlayStates.MMatchMaked) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayState);
      }
      if (ConnectionState != global::Superstars.Match.ConnectionState.NotConnected) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ConnectionState);
      }
      if (OpponentUID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OpponentUID);
      }
      if (Ack != global::Superstars.Match.ACK.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Ack);
      }
      if (AutoPlay != false) {
        output.WriteRawTag(40);
        output.WriteBool(AutoPlay);
      }
      if (ManaFill != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ManaFill);
      }
      if (saInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SaInfo);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayState != global::Superstars.Match.M_PlayStates.MMatchMaked) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayState);
      }
      if (ConnectionState != global::Superstars.Match.ConnectionState.NotConnected) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
      }
      if (OpponentUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentUID);
      }
      if (Ack != global::Superstars.Match.ACK.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ack);
      }
      if (AutoPlay != false) {
        size += 1 + 1;
      }
      if (ManaFill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaFill);
      }
      if (saInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaInfo);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M_UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayState != global::Superstars.Match.M_PlayStates.MMatchMaked) {
        PlayState = other.PlayState;
      }
      if (other.ConnectionState != global::Superstars.Match.ConnectionState.NotConnected) {
        ConnectionState = other.ConnectionState;
      }
      if (other.OpponentUID.Length != 0) {
        OpponentUID = other.OpponentUID;
      }
      if (other.Ack != global::Superstars.Match.ACK.None) {
        Ack = other.Ack;
      }
      if (other.AutoPlay != false) {
        AutoPlay = other.AutoPlay;
      }
      if (other.ManaFill != 0) {
        ManaFill = other.ManaFill;
      }
      if (other.saInfo_ != null) {
        if (saInfo_ == null) {
          SaInfo = new global::Superstars.Match.SAInfo();
        }
        SaInfo.MergeFrom(other.SaInfo);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayState = (global::Superstars.Match.M_PlayStates) input.ReadEnum();
            break;
          }
          case 16: {
            ConnectionState = (global::Superstars.Match.ConnectionState) input.ReadEnum();
            break;
          }
          case 26: {
            OpponentUID = input.ReadString();
            break;
          }
          case 32: {
            Ack = (global::Superstars.Match.ACK) input.ReadEnum();
            break;
          }
          case 40: {
            AutoPlay = input.ReadBool();
            break;
          }
          case 48: {
            ManaFill = input.ReadInt32();
            break;
          }
          case 58: {
            if (saInfo_ == null) {
              SaInfo = new global::Superstars.Match.SAInfo();
            }
            input.ReadMessage(SaInfo);
            break;
          }
          case 66: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class M_TShot : pb::IMessage<M_TShot> {
    private static readonly pb::MessageParser<M_TShot> _parser = new pb::MessageParser<M_TShot>(() => new M_TShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M_TShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TShot(M_TShot other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      run_ = other.run_;
      bracket_ = other.bracket_;
      probability_ = other.probability_;
      wicketChance_ = other.wicketChance_;
      ballValue_ = other.ballValue_;
      shotValue_ = other.shotValue_;
      locked_ = other.locked_;
      shotHidden_ = other.shotHidden_;
      probabilityHidden_ = other.probabilityHidden_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TShot Clone() {
      return new M_TShot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run" field.</summary>
    public const int RunFieldNumber = 3;
    private int run_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Run {
      get { return run_; }
      set {
        run_ = value;
      }
    }

    /// <summary>Field number for the "bracket" field.</summary>
    public const int BracketFieldNumber = 4;
    private global::Superstars.Match.Brackets bracket_ = global::Superstars.Match.Brackets.NoBracket;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.Brackets Bracket {
      get { return bracket_; }
      set {
        bracket_ = value;
      }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 5;
    private float probability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "wicket_chance" field.</summary>
    public const int WicketChanceFieldNumber = 6;
    private float wicketChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WicketChance {
      get { return wicketChance_; }
      set {
        wicketChance_ = value;
      }
    }

    /// <summary>Field number for the "ball_value" field.</summary>
    public const int BallValueFieldNumber = 7;
    private double ballValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BallValue {
      get { return ballValue_; }
      set {
        ballValue_ = value;
      }
    }

    /// <summary>Field number for the "shot_value" field.</summary>
    public const int ShotValueFieldNumber = 8;
    private double shotValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShotValue {
      get { return shotValue_; }
      set {
        shotValue_ = value;
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 9;
    private bool locked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "shot_hidden" field.</summary>
    public const int ShotHiddenFieldNumber = 10;
    private bool shotHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShotHidden {
      get { return shotHidden_; }
      set {
        shotHidden_ = value;
      }
    }

    /// <summary>Field number for the "probability_hidden" field.</summary>
    public const int ProbabilityHiddenFieldNumber = 11;
    private bool probabilityHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProbabilityHidden {
      get { return probabilityHidden_; }
      set {
        probabilityHidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M_TShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M_TShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Run != other.Run) return false;
      if (Bracket != other.Bracket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Probability, other.Probability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WicketChance, other.WicketChance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BallValue, other.BallValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShotValue, other.ShotValue)) return false;
      if (Locked != other.Locked) return false;
      if (ShotHidden != other.ShotHidden) return false;
      if (ProbabilityHidden != other.ProbabilityHidden) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Run != 0) hash ^= Run.GetHashCode();
      if (Bracket != global::Superstars.Match.Brackets.NoBracket) hash ^= Bracket.GetHashCode();
      if (Probability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Probability);
      if (WicketChance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WicketChance);
      if (BallValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BallValue);
      if (ShotValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShotValue);
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (ShotHidden != false) hash ^= ShotHidden.GetHashCode();
      if (ProbabilityHidden != false) hash ^= ProbabilityHidden.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Run != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Run);
      }
      if (Bracket != global::Superstars.Match.Brackets.NoBracket) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Bracket);
      }
      if (Probability != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Probability);
      }
      if (WicketChance != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(WicketChance);
      }
      if (BallValue != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(BallValue);
      }
      if (ShotValue != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ShotValue);
      }
      if (Locked != false) {
        output.WriteRawTag(72);
        output.WriteBool(Locked);
      }
      if (ShotHidden != false) {
        output.WriteRawTag(80);
        output.WriteBool(ShotHidden);
      }
      if (ProbabilityHidden != false) {
        output.WriteRawTag(88);
        output.WriteBool(ProbabilityHidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Run != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Run);
      }
      if (Bracket != global::Superstars.Match.Brackets.NoBracket) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bracket);
      }
      if (Probability != 0F) {
        size += 1 + 4;
      }
      if (WicketChance != 0F) {
        size += 1 + 4;
      }
      if (BallValue != 0D) {
        size += 1 + 8;
      }
      if (ShotValue != 0D) {
        size += 1 + 8;
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (ShotHidden != false) {
        size += 1 + 1;
      }
      if (ProbabilityHidden != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M_TShot other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Run != 0) {
        Run = other.Run;
      }
      if (other.Bracket != global::Superstars.Match.Brackets.NoBracket) {
        Bracket = other.Bracket;
      }
      if (other.Probability != 0F) {
        Probability = other.Probability;
      }
      if (other.WicketChance != 0F) {
        WicketChance = other.WicketChance;
      }
      if (other.BallValue != 0D) {
        BallValue = other.BallValue;
      }
      if (other.ShotValue != 0D) {
        ShotValue = other.ShotValue;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.ShotHidden != false) {
        ShotHidden = other.ShotHidden;
      }
      if (other.ProbabilityHidden != false) {
        ProbabilityHidden = other.ProbabilityHidden;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Run = input.ReadInt32();
            break;
          }
          case 32: {
            Bracket = (global::Superstars.Match.Brackets) input.ReadEnum();
            break;
          }
          case 45: {
            Probability = input.ReadFloat();
            break;
          }
          case 53: {
            WicketChance = input.ReadFloat();
            break;
          }
          case 57: {
            BallValue = input.ReadDouble();
            break;
          }
          case 65: {
            ShotValue = input.ReadDouble();
            break;
          }
          case 72: {
            Locked = input.ReadBool();
            break;
          }
          case 80: {
            ShotHidden = input.ReadBool();
            break;
          }
          case 88: {
            ProbabilityHidden = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BracketData : pb::IMessage<BracketData> {
    private static readonly pb::MessageParser<BracketData> _parser = new pb::MessageParser<BracketData>(() => new BracketData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BracketData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketData(BracketData other) : this() {
      bracketId_ = other.bracketId_;
      shotId_ = other.shotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketData Clone() {
      return new BracketData(this);
    }

    /// <summary>Field number for the "bracket_id" field.</summary>
    public const int BracketIdFieldNumber = 1;
    private global::Superstars.Match.Brackets bracketId_ = global::Superstars.Match.Brackets.NoBracket;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.Brackets BracketId {
      get { return bracketId_; }
      set {
        bracketId_ = value;
      }
    }

    /// <summary>Field number for the "shot_id" field.</summary>
    public const int ShotIdFieldNumber = 2;
    private int shotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotId {
      get { return shotId_; }
      set {
        shotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BracketData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BracketData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BracketId != other.BracketId) return false;
      if (ShotId != other.ShotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) hash ^= BracketId.GetHashCode();
      if (ShotId != 0) hash ^= ShotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BracketId);
      }
      if (ShotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BracketId);
      }
      if (ShotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BracketData other) {
      if (other == null) {
        return;
      }
      if (other.BracketId != global::Superstars.Match.Brackets.NoBracket) {
        BracketId = other.BracketId;
      }
      if (other.ShotId != 0) {
        ShotId = other.ShotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BracketId = (global::Superstars.Match.Brackets) input.ReadEnum();
            break;
          }
          case 16: {
            ShotId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class M_TBall : pb::IMessage<M_TBall> {
    private static readonly pb::MessageParser<M_TBall> _parser = new pb::MessageParser<M_TBall>(() => new M_TBall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M_TBall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TBall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TBall(M_TBall other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      value_ = other.value_;
      skull_ = other.skull_;
      shotsPossible_ = other.shotsPossible_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_TBall Clone() {
      return new M_TBall(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "skull" field.</summary>
    public const int SkullFieldNumber = 4;
    private global::Superstars.Match.Skulls skull_ = global::Superstars.Match.Skulls.NoSkull;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.Skulls Skull {
      get { return skull_; }
      set {
        skull_ = value;
      }
    }

    /// <summary>Field number for the "shots_possible" field.</summary>
    public const int ShotsPossibleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Superstars.Match.BracketData> _repeated_shotsPossible_codec
        = pb::FieldCodec.ForMessage(42, global::Superstars.Match.BracketData.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.BracketData> shotsPossible_ = new pbc::RepeatedField<global::Superstars.Match.BracketData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.BracketData> ShotsPossible {
      get { return shotsPossible_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M_TBall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M_TBall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Skull != other.Skull) return false;
      if(!shotsPossible_.Equals(other.shotsPossible_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Skull != global::Superstars.Match.Skulls.NoSkull) hash ^= Skull.GetHashCode();
      hash ^= shotsPossible_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (Skull != global::Superstars.Match.Skulls.NoSkull) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Skull);
      }
      shotsPossible_.WriteTo(output, _repeated_shotsPossible_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Skull != global::Superstars.Match.Skulls.NoSkull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skull);
      }
      size += shotsPossible_.CalculateSize(_repeated_shotsPossible_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M_TBall other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Skull != global::Superstars.Match.Skulls.NoSkull) {
        Skull = other.Skull;
      }
      shotsPossible_.Add(other.shotsPossible_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
          case 32: {
            Skull = (global::Superstars.Match.Skulls) input.ReadEnum();
            break;
          }
          case 42: {
            shotsPossible_.AddEntriesFrom(input, _repeated_shotsPossible_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TOutcome : pb::IMessage<TOutcome> {
    private static readonly pb::MessageParser<TOutcome> _parser = new pb::MessageParser<TOutcome>(() => new TOutcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TOutcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOutcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOutcome(TOutcome other) : this() {
      outcome_ = other.outcome_;
      runs_ = other.runs_;
      random_ = other.random_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOutcome Clone() {
      return new TOutcome(this);
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 1;
    private global::Superstars.Payload.ShotOutcomes outcome_ = global::Superstars.Payload.ShotOutcomes.NoOutcome;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.ShotOutcomes Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 2;
    private int runs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Runs {
      get { return runs_; }
      set {
        runs_ = value;
      }
    }

    /// <summary>Field number for the "random" field.</summary>
    public const int RandomFieldNumber = 3;
    private double random_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Random {
      get { return random_; }
      set {
        random_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TOutcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TOutcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Outcome != other.Outcome) return false;
      if (Runs != other.Runs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Random, other.Random)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) hash ^= Outcome.GetHashCode();
      if (Runs != 0) hash ^= Runs.GetHashCode();
      if (Random != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Random);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Outcome);
      }
      if (Runs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Runs);
      }
      if (Random != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Random);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      if (Runs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Runs);
      }
      if (Random != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TOutcome other) {
      if (other == null) {
        return;
      }
      if (other.Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        Outcome = other.Outcome;
      }
      if (other.Runs != 0) {
        Runs = other.Runs;
      }
      if (other.Random != 0D) {
        Random = other.Random;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Outcome = (global::Superstars.Payload.ShotOutcomes) input.ReadEnum();
            break;
          }
          case 16: {
            Runs = input.ReadInt32();
            break;
          }
          case 25: {
            Random = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class M_CurrentBall : pb::IMessage<M_CurrentBall> {
    private static readonly pb::MessageParser<M_CurrentBall> _parser = new pb::MessageParser<M_CurrentBall>(() => new M_CurrentBall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M_CurrentBall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_CurrentBall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_CurrentBall(M_CurrentBall other) : this() {
      state_ = other.state_;
      outcome_ = other.outcome_ != null ? other.outcome_.Clone() : null;
      shots_ = other.shots_.Clone();
      balls_ = other.balls_.Clone();
      selectedBall_ = other.selectedBall_ != null ? other.selectedBall_.Clone() : null;
      selectedShot_ = other.selectedShot_ != null ? other.selectedShot_.Clone() : null;
      overBallNumber_ = other.overBallNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_CurrentBall Clone() {
      return new M_CurrentBall(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Superstars.Match.BallStates state_ = global::Superstars.Match.BallStates.NoBallState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.BallStates State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 2;
    private global::Superstars.Match.TOutcome outcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.TOutcome Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "shots" field.</summary>
    public const int ShotsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Superstars.Match.M_TShot> _repeated_shots_codec
        = pb::FieldCodec.ForMessage(26, global::Superstars.Match.M_TShot.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.M_TShot> shots_ = new pbc::RepeatedField<global::Superstars.Match.M_TShot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.M_TShot> Shots {
      get { return shots_; }
    }

    /// <summary>Field number for the "balls" field.</summary>
    public const int BallsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Superstars.Match.M_TBall> _repeated_balls_codec
        = pb::FieldCodec.ForMessage(34, global::Superstars.Match.M_TBall.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.M_TBall> balls_ = new pbc::RepeatedField<global::Superstars.Match.M_TBall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.M_TBall> Balls {
      get { return balls_; }
    }

    /// <summary>Field number for the "selectedBall" field.</summary>
    public const int SelectedBallFieldNumber = 5;
    private global::Superstars.Match.M_TBall selectedBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_TBall SelectedBall {
      get { return selectedBall_; }
      set {
        selectedBall_ = value;
      }
    }

    /// <summary>Field number for the "selectedShot" field.</summary>
    public const int SelectedShotFieldNumber = 6;
    private global::Superstars.Match.M_TShot selectedShot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_TShot SelectedShot {
      get { return selectedShot_; }
      set {
        selectedShot_ = value;
      }
    }

    /// <summary>Field number for the "over_ball_number" field.</summary>
    public const int OverBallNumberFieldNumber = 7;
    private int overBallNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBallNumber {
      get { return overBallNumber_; }
      set {
        overBallNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M_CurrentBall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M_CurrentBall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(Outcome, other.Outcome)) return false;
      if(!shots_.Equals(other.shots_)) return false;
      if(!balls_.Equals(other.balls_)) return false;
      if (!object.Equals(SelectedBall, other.SelectedBall)) return false;
      if (!object.Equals(SelectedShot, other.SelectedShot)) return false;
      if (OverBallNumber != other.OverBallNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Superstars.Match.BallStates.NoBallState) hash ^= State.GetHashCode();
      if (outcome_ != null) hash ^= Outcome.GetHashCode();
      hash ^= shots_.GetHashCode();
      hash ^= balls_.GetHashCode();
      if (selectedBall_ != null) hash ^= SelectedBall.GetHashCode();
      if (selectedShot_ != null) hash ^= SelectedShot.GetHashCode();
      if (OverBallNumber != 0) hash ^= OverBallNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::Superstars.Match.BallStates.NoBallState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (outcome_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Outcome);
      }
      shots_.WriteTo(output, _repeated_shots_codec);
      balls_.WriteTo(output, _repeated_balls_codec);
      if (selectedBall_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SelectedBall);
      }
      if (selectedShot_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SelectedShot);
      }
      if (OverBallNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OverBallNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Superstars.Match.BallStates.NoBallState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (outcome_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outcome);
      }
      size += shots_.CalculateSize(_repeated_shots_codec);
      size += balls_.CalculateSize(_repeated_balls_codec);
      if (selectedBall_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedBall);
      }
      if (selectedShot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedShot);
      }
      if (OverBallNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBallNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M_CurrentBall other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Superstars.Match.BallStates.NoBallState) {
        State = other.State;
      }
      if (other.outcome_ != null) {
        if (outcome_ == null) {
          Outcome = new global::Superstars.Match.TOutcome();
        }
        Outcome.MergeFrom(other.Outcome);
      }
      shots_.Add(other.shots_);
      balls_.Add(other.balls_);
      if (other.selectedBall_ != null) {
        if (selectedBall_ == null) {
          SelectedBall = new global::Superstars.Match.M_TBall();
        }
        SelectedBall.MergeFrom(other.SelectedBall);
      }
      if (other.selectedShot_ != null) {
        if (selectedShot_ == null) {
          SelectedShot = new global::Superstars.Match.M_TShot();
        }
        SelectedShot.MergeFrom(other.SelectedShot);
      }
      if (other.OverBallNumber != 0) {
        OverBallNumber = other.OverBallNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Superstars.Match.BallStates) input.ReadEnum();
            break;
          }
          case 18: {
            if (outcome_ == null) {
              Outcome = new global::Superstars.Match.TOutcome();
            }
            input.ReadMessage(Outcome);
            break;
          }
          case 26: {
            shots_.AddEntriesFrom(input, _repeated_shots_codec);
            break;
          }
          case 34: {
            balls_.AddEntriesFrom(input, _repeated_balls_codec);
            break;
          }
          case 42: {
            if (selectedBall_ == null) {
              SelectedBall = new global::Superstars.Match.M_TBall();
            }
            input.ReadMessage(SelectedBall);
            break;
          }
          case 50: {
            if (selectedShot_ == null) {
              SelectedShot = new global::Superstars.Match.M_TShot();
            }
            input.ReadMessage(SelectedShot);
            break;
          }
          case 56: {
            OverBallNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class M_Innings : pb::IMessage<M_Innings> {
    private static readonly pb::MessageParser<M_Innings> _parser = new pb::MessageParser<M_Innings>(() => new M_Innings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M_Innings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_Innings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_Innings(M_Innings other) : this() {
      inning_ = other.inning_;
      runs_ = other.runs_;
      balls_ = other.balls_;
      wickets_ = other.wickets_;
      overNumber_ = other.overNumber_;
      maxBallsPerOver_ = other.maxBallsPerOver_;
      maxOvers_ = other.maxOvers_;
      boundaryCounter_ = other.boundaryCounter_;
      greenShotMissedCounter_ = other.greenShotMissedCounter_;
      yellowShotMissedCounter_ = other.yellowShotMissedCounter_;
      userOnBatting_ = other.userOnBatting_;
      userOnBowling_ = other.userOnBowling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M_Innings Clone() {
      return new M_Innings(this);
    }

    /// <summary>Field number for the "inning" field.</summary>
    public const int InningFieldNumber = 1;
    private global::Superstars.Payload.Innings inning_ = global::Superstars.Payload.Innings.First;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Innings Inning {
      get { return inning_; }
      set {
        inning_ = value;
      }
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 2;
    private int runs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Runs {
      get { return runs_; }
      set {
        runs_ = value;
      }
    }

    /// <summary>Field number for the "balls" field.</summary>
    public const int BallsFieldNumber = 3;
    private int balls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Balls {
      get { return balls_; }
      set {
        balls_ = value;
      }
    }

    /// <summary>Field number for the "wickets" field.</summary>
    public const int WicketsFieldNumber = 4;
    private int wickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wickets {
      get { return wickets_; }
      set {
        wickets_ = value;
      }
    }

    /// <summary>Field number for the "over_number" field.</summary>
    public const int OverNumberFieldNumber = 5;
    private int overNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverNumber {
      get { return overNumber_; }
      set {
        overNumber_ = value;
      }
    }

    /// <summary>Field number for the "max_balls_per_over" field.</summary>
    public const int MaxBallsPerOverFieldNumber = 6;
    private int maxBallsPerOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBallsPerOver {
      get { return maxBallsPerOver_; }
      set {
        maxBallsPerOver_ = value;
      }
    }

    /// <summary>Field number for the "max_overs" field.</summary>
    public const int MaxOversFieldNumber = 7;
    private int maxOvers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxOvers {
      get { return maxOvers_; }
      set {
        maxOvers_ = value;
      }
    }

    /// <summary>Field number for the "boundary_counter" field.</summary>
    public const int BoundaryCounterFieldNumber = 8;
    private int boundaryCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundaryCounter {
      get { return boundaryCounter_; }
      set {
        boundaryCounter_ = value;
      }
    }

    /// <summary>Field number for the "green_shot_missed_counter" field.</summary>
    public const int GreenShotMissedCounterFieldNumber = 9;
    private int greenShotMissedCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GreenShotMissedCounter {
      get { return greenShotMissedCounter_; }
      set {
        greenShotMissedCounter_ = value;
      }
    }

    /// <summary>Field number for the "yellow_shot_missed_counter" field.</summary>
    public const int YellowShotMissedCounterFieldNumber = 10;
    private int yellowShotMissedCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YellowShotMissedCounter {
      get { return yellowShotMissedCounter_; }
      set {
        yellowShotMissedCounter_ = value;
      }
    }

    /// <summary>Field number for the "user_on_batting" field.</summary>
    public const int UserOnBattingFieldNumber = 11;
    private string userOnBatting_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserOnBatting {
      get { return userOnBatting_; }
      set {
        userOnBatting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_on_bowling" field.</summary>
    public const int UserOnBowlingFieldNumber = 12;
    private string userOnBowling_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserOnBowling {
      get { return userOnBowling_; }
      set {
        userOnBowling_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M_Innings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M_Innings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inning != other.Inning) return false;
      if (Runs != other.Runs) return false;
      if (Balls != other.Balls) return false;
      if (Wickets != other.Wickets) return false;
      if (OverNumber != other.OverNumber) return false;
      if (MaxBallsPerOver != other.MaxBallsPerOver) return false;
      if (MaxOvers != other.MaxOvers) return false;
      if (BoundaryCounter != other.BoundaryCounter) return false;
      if (GreenShotMissedCounter != other.GreenShotMissedCounter) return false;
      if (YellowShotMissedCounter != other.YellowShotMissedCounter) return false;
      if (UserOnBatting != other.UserOnBatting) return false;
      if (UserOnBowling != other.UserOnBowling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inning != global::Superstars.Payload.Innings.First) hash ^= Inning.GetHashCode();
      if (Runs != 0) hash ^= Runs.GetHashCode();
      if (Balls != 0) hash ^= Balls.GetHashCode();
      if (Wickets != 0) hash ^= Wickets.GetHashCode();
      if (OverNumber != 0) hash ^= OverNumber.GetHashCode();
      if (MaxBallsPerOver != 0) hash ^= MaxBallsPerOver.GetHashCode();
      if (MaxOvers != 0) hash ^= MaxOvers.GetHashCode();
      if (BoundaryCounter != 0) hash ^= BoundaryCounter.GetHashCode();
      if (GreenShotMissedCounter != 0) hash ^= GreenShotMissedCounter.GetHashCode();
      if (YellowShotMissedCounter != 0) hash ^= YellowShotMissedCounter.GetHashCode();
      if (UserOnBatting.Length != 0) hash ^= UserOnBatting.GetHashCode();
      if (UserOnBowling.Length != 0) hash ^= UserOnBowling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inning != global::Superstars.Payload.Innings.First) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Inning);
      }
      if (Runs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Runs);
      }
      if (Balls != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Balls);
      }
      if (Wickets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Wickets);
      }
      if (OverNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverNumber);
      }
      if (MaxBallsPerOver != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxBallsPerOver);
      }
      if (MaxOvers != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxOvers);
      }
      if (BoundaryCounter != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoundaryCounter);
      }
      if (GreenShotMissedCounter != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GreenShotMissedCounter);
      }
      if (YellowShotMissedCounter != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(YellowShotMissedCounter);
      }
      if (UserOnBatting.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UserOnBatting);
      }
      if (UserOnBowling.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UserOnBowling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inning != global::Superstars.Payload.Innings.First) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Inning);
      }
      if (Runs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Runs);
      }
      if (Balls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Balls);
      }
      if (Wickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wickets);
      }
      if (OverNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverNumber);
      }
      if (MaxBallsPerOver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBallsPerOver);
      }
      if (MaxOvers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOvers);
      }
      if (BoundaryCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundaryCounter);
      }
      if (GreenShotMissedCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GreenShotMissedCounter);
      }
      if (YellowShotMissedCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YellowShotMissedCounter);
      }
      if (UserOnBatting.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserOnBatting);
      }
      if (UserOnBowling.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserOnBowling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M_Innings other) {
      if (other == null) {
        return;
      }
      if (other.Inning != global::Superstars.Payload.Innings.First) {
        Inning = other.Inning;
      }
      if (other.Runs != 0) {
        Runs = other.Runs;
      }
      if (other.Balls != 0) {
        Balls = other.Balls;
      }
      if (other.Wickets != 0) {
        Wickets = other.Wickets;
      }
      if (other.OverNumber != 0) {
        OverNumber = other.OverNumber;
      }
      if (other.MaxBallsPerOver != 0) {
        MaxBallsPerOver = other.MaxBallsPerOver;
      }
      if (other.MaxOvers != 0) {
        MaxOvers = other.MaxOvers;
      }
      if (other.BoundaryCounter != 0) {
        BoundaryCounter = other.BoundaryCounter;
      }
      if (other.GreenShotMissedCounter != 0) {
        GreenShotMissedCounter = other.GreenShotMissedCounter;
      }
      if (other.YellowShotMissedCounter != 0) {
        YellowShotMissedCounter = other.YellowShotMissedCounter;
      }
      if (other.UserOnBatting.Length != 0) {
        UserOnBatting = other.UserOnBatting;
      }
      if (other.UserOnBowling.Length != 0) {
        UserOnBowling = other.UserOnBowling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Inning = (global::Superstars.Payload.Innings) input.ReadEnum();
            break;
          }
          case 16: {
            Runs = input.ReadInt32();
            break;
          }
          case 24: {
            Balls = input.ReadInt32();
            break;
          }
          case 32: {
            Wickets = input.ReadInt32();
            break;
          }
          case 40: {
            OverNumber = input.ReadInt32();
            break;
          }
          case 48: {
            MaxBallsPerOver = input.ReadInt32();
            break;
          }
          case 56: {
            MaxOvers = input.ReadInt32();
            break;
          }
          case 64: {
            BoundaryCounter = input.ReadInt32();
            break;
          }
          case 72: {
            GreenShotMissedCounter = input.ReadInt32();
            break;
          }
          case 80: {
            YellowShotMissedCounter = input.ReadInt32();
            break;
          }
          case 90: {
            UserOnBatting = input.ReadString();
            break;
          }
          case 98: {
            UserOnBowling = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IOutcome : pb::IMessage<IOutcome> {
    private static readonly pb::MessageParser<IOutcome> _parser = new pb::MessageParser<IOutcome>(() => new IOutcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IOutcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOutcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOutcome(IOutcome other) : this() {
      totalRuns_ = other.totalRuns_;
      totalBalls_ = other.totalBalls_;
      wicketsTaken_ = other.wicketsTaken_;
      runsScored_ = other.runsScored_;
      originalRunsScored_ = other.originalRunsScored_;
      bracketId_ = other.bracketId_;
      overBallNumber_ = other.overBallNumber_;
      overNumber_ = other.overNumber_;
      outcome_ = other.outcome_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOutcome Clone() {
      return new IOutcome(this);
    }

    /// <summary>Field number for the "total_runs" field.</summary>
    public const int TotalRunsFieldNumber = 1;
    private int totalRuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRuns {
      get { return totalRuns_; }
      set {
        totalRuns_ = value;
      }
    }

    /// <summary>Field number for the "total_balls" field.</summary>
    public const int TotalBallsFieldNumber = 2;
    private int totalBalls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalBalls {
      get { return totalBalls_; }
      set {
        totalBalls_ = value;
      }
    }

    /// <summary>Field number for the "wickets_taken" field.</summary>
    public const int WicketsTakenFieldNumber = 3;
    private int wicketsTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WicketsTaken {
      get { return wicketsTaken_; }
      set {
        wicketsTaken_ = value;
      }
    }

    /// <summary>Field number for the "runs_scored" field.</summary>
    public const int RunsScoredFieldNumber = 4;
    private int runsScored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunsScored {
      get { return runsScored_; }
      set {
        runsScored_ = value;
      }
    }

    /// <summary>Field number for the "original_runs_scored" field.</summary>
    public const int OriginalRunsScoredFieldNumber = 5;
    private int originalRunsScored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalRunsScored {
      get { return originalRunsScored_; }
      set {
        originalRunsScored_ = value;
      }
    }

    /// <summary>Field number for the "bracket_id" field.</summary>
    public const int BracketIdFieldNumber = 6;
    private global::Superstars.Match.Brackets bracketId_ = global::Superstars.Match.Brackets.NoBracket;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.Brackets BracketId {
      get { return bracketId_; }
      set {
        bracketId_ = value;
      }
    }

    /// <summary>Field number for the "over_ball_number" field.</summary>
    public const int OverBallNumberFieldNumber = 7;
    private int overBallNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBallNumber {
      get { return overBallNumber_; }
      set {
        overBallNumber_ = value;
      }
    }

    /// <summary>Field number for the "over_number" field.</summary>
    public const int OverNumberFieldNumber = 8;
    private int overNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverNumber {
      get { return overNumber_; }
      set {
        overNumber_ = value;
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 9;
    private global::Superstars.Payload.ShotOutcomes outcome_ = global::Superstars.Payload.ShotOutcomes.NoOutcome;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.ShotOutcomes Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IOutcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IOutcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRuns != other.TotalRuns) return false;
      if (TotalBalls != other.TotalBalls) return false;
      if (WicketsTaken != other.WicketsTaken) return false;
      if (RunsScored != other.RunsScored) return false;
      if (OriginalRunsScored != other.OriginalRunsScored) return false;
      if (BracketId != other.BracketId) return false;
      if (OverBallNumber != other.OverBallNumber) return false;
      if (OverNumber != other.OverNumber) return false;
      if (Outcome != other.Outcome) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRuns != 0) hash ^= TotalRuns.GetHashCode();
      if (TotalBalls != 0) hash ^= TotalBalls.GetHashCode();
      if (WicketsTaken != 0) hash ^= WicketsTaken.GetHashCode();
      if (RunsScored != 0) hash ^= RunsScored.GetHashCode();
      if (OriginalRunsScored != 0) hash ^= OriginalRunsScored.GetHashCode();
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) hash ^= BracketId.GetHashCode();
      if (OverBallNumber != 0) hash ^= OverBallNumber.GetHashCode();
      if (OverNumber != 0) hash ^= OverNumber.GetHashCode();
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) hash ^= Outcome.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalRuns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRuns);
      }
      if (TotalBalls != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalBalls);
      }
      if (WicketsTaken != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WicketsTaken);
      }
      if (RunsScored != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RunsScored);
      }
      if (OriginalRunsScored != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OriginalRunsScored);
      }
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BracketId);
      }
      if (OverBallNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OverBallNumber);
      }
      if (OverNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OverNumber);
      }
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Outcome);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalRuns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRuns);
      }
      if (TotalBalls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBalls);
      }
      if (WicketsTaken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WicketsTaken);
      }
      if (RunsScored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunsScored);
      }
      if (OriginalRunsScored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalRunsScored);
      }
      if (BracketId != global::Superstars.Match.Brackets.NoBracket) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BracketId);
      }
      if (OverBallNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBallNumber);
      }
      if (OverNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverNumber);
      }
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IOutcome other) {
      if (other == null) {
        return;
      }
      if (other.TotalRuns != 0) {
        TotalRuns = other.TotalRuns;
      }
      if (other.TotalBalls != 0) {
        TotalBalls = other.TotalBalls;
      }
      if (other.WicketsTaken != 0) {
        WicketsTaken = other.WicketsTaken;
      }
      if (other.RunsScored != 0) {
        RunsScored = other.RunsScored;
      }
      if (other.OriginalRunsScored != 0) {
        OriginalRunsScored = other.OriginalRunsScored;
      }
      if (other.BracketId != global::Superstars.Match.Brackets.NoBracket) {
        BracketId = other.BracketId;
      }
      if (other.OverBallNumber != 0) {
        OverBallNumber = other.OverBallNumber;
      }
      if (other.OverNumber != 0) {
        OverNumber = other.OverNumber;
      }
      if (other.Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        Outcome = other.Outcome;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalRuns = input.ReadInt32();
            break;
          }
          case 16: {
            TotalBalls = input.ReadInt32();
            break;
          }
          case 24: {
            WicketsTaken = input.ReadInt32();
            break;
          }
          case 32: {
            RunsScored = input.ReadInt32();
            break;
          }
          case 40: {
            OriginalRunsScored = input.ReadInt32();
            break;
          }
          case 48: {
            BracketId = (global::Superstars.Match.Brackets) input.ReadEnum();
            break;
          }
          case 56: {
            OverBallNumber = input.ReadInt32();
            break;
          }
          case 64: {
            OverNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Outcome = (global::Superstars.Payload.ShotOutcomes) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchPlayer : pb::IMessage<MatchPlayer> {
    private static readonly pb::MessageParser<MatchPlayer> _parser = new pb::MessageParser<MatchPlayer>(() => new MatchPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer(MatchPlayer other) : this() {
      characterId_ = other.characterId_;
      nickname_ = other.nickname_;
      imageNumber_ = other.imageNumber_;
      power_ = other.power_;
      lineupNumber_ = other.lineupNumber_;
      isOut_ = other.isOut_;
      used_ = other.used_;
      hits_ = other.hits_;
      misses_ = other.misses_;
      lhbrhb_ = other.lhbrhb_;
      confidence_ = other.confidence_;
      strike_ = other.strike_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayer Clone() {
      return new MatchPlayer(this);
    }

    /// <summary>Field number for the "character_id" field.</summary>
    public const int CharacterIdFieldNumber = 1;
    private int characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_number" field.</summary>
    public const int ImageNumberFieldNumber = 3;
    private int imageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageNumber {
      get { return imageNumber_; }
      set {
        imageNumber_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "lineup_number" field.</summary>
    public const int LineupNumberFieldNumber = 5;
    private int lineupNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineupNumber {
      get { return lineupNumber_; }
      set {
        lineupNumber_ = value;
      }
    }

    /// <summary>Field number for the "is_out" field.</summary>
    public const int IsOutFieldNumber = 6;
    private bool isOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOut {
      get { return isOut_; }
      set {
        isOut_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 7;
    private bool used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 8;
    private int hits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hits {
      get { return hits_; }
      set {
        hits_ = value;
      }
    }

    /// <summary>Field number for the "misses" field.</summary>
    public const int MissesFieldNumber = 9;
    private int misses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Misses {
      get { return misses_; }
      set {
        misses_ = value;
      }
    }

    /// <summary>Field number for the "lhbrhb" field.</summary>
    public const int LhbrhbFieldNumber = 10;
    private double lhbrhb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lhbrhb {
      get { return lhbrhb_; }
      set {
        lhbrhb_ = value;
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 11;
    private double confidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 12;
    private global::Superstars.Match.Strike strike_ = global::Superstars.Match.Strike.NoStrike;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.Strike Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterId != other.CharacterId) return false;
      if (Nickname != other.Nickname) return false;
      if (ImageNumber != other.ImageNumber) return false;
      if (Power != other.Power) return false;
      if (LineupNumber != other.LineupNumber) return false;
      if (IsOut != other.IsOut) return false;
      if (Used != other.Used) return false;
      if (Hits != other.Hits) return false;
      if (Misses != other.Misses) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lhbrhb, other.Lhbrhb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (Strike != other.Strike) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterId != 0) hash ^= CharacterId.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (ImageNumber != 0) hash ^= ImageNumber.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (LineupNumber != 0) hash ^= LineupNumber.GetHashCode();
      if (IsOut != false) hash ^= IsOut.GetHashCode();
      if (Used != false) hash ^= Used.GetHashCode();
      if (Hits != 0) hash ^= Hits.GetHashCode();
      if (Misses != 0) hash ^= Misses.GetHashCode();
      if (Lhbrhb != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lhbrhb);
      if (Confidence != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Confidence);
      if (Strike != global::Superstars.Match.Strike.NoStrike) hash ^= Strike.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (ImageNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImageNumber);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Power);
      }
      if (LineupNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LineupNumber);
      }
      if (IsOut != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsOut);
      }
      if (Used != false) {
        output.WriteRawTag(56);
        output.WriteBool(Used);
      }
      if (Hits != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Hits);
      }
      if (Misses != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Misses);
      }
      if (Lhbrhb != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Lhbrhb);
      }
      if (Confidence != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Confidence);
      }
      if (Strike != global::Superstars.Match.Strike.NoStrike) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Strike);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (ImageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageNumber);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (LineupNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineupNumber);
      }
      if (IsOut != false) {
        size += 1 + 1;
      }
      if (Used != false) {
        size += 1 + 1;
      }
      if (Hits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hits);
      }
      if (Misses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Misses);
      }
      if (Lhbrhb != 0D) {
        size += 1 + 8;
      }
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (Strike != global::Superstars.Match.Strike.NoStrike) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Strike);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayer other) {
      if (other == null) {
        return;
      }
      if (other.CharacterId != 0) {
        CharacterId = other.CharacterId;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.ImageNumber != 0) {
        ImageNumber = other.ImageNumber;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.LineupNumber != 0) {
        LineupNumber = other.LineupNumber;
      }
      if (other.IsOut != false) {
        IsOut = other.IsOut;
      }
      if (other.Used != false) {
        Used = other.Used;
      }
      if (other.Hits != 0) {
        Hits = other.Hits;
      }
      if (other.Misses != 0) {
        Misses = other.Misses;
      }
      if (other.Lhbrhb != 0D) {
        Lhbrhb = other.Lhbrhb;
      }
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.Strike != global::Superstars.Match.Strike.NoStrike) {
        Strike = other.Strike;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CharacterId = input.ReadInt32();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 24: {
            ImageNumber = input.ReadInt32();
            break;
          }
          case 32: {
            Power = input.ReadInt32();
            break;
          }
          case 40: {
            LineupNumber = input.ReadInt32();
            break;
          }
          case 48: {
            IsOut = input.ReadBool();
            break;
          }
          case 56: {
            Used = input.ReadBool();
            break;
          }
          case 64: {
            Hits = input.ReadInt32();
            break;
          }
          case 72: {
            Misses = input.ReadInt32();
            break;
          }
          case 81: {
            Lhbrhb = input.ReadDouble();
            break;
          }
          case 89: {
            Confidence = input.ReadDouble();
            break;
          }
          case 96: {
            Strike = (global::Superstars.Match.Strike) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchModel : pb::IMessage<MatchModel> {
    private static readonly pb::MessageParser<MatchModel> _parser = new pb::MessageParser<MatchModel>(() => new MatchModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Match.MatchReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchModel(MatchModel other) : this() {
      matchId_ = other.matchId_;
      users_ = other.users_.Clone();
      home_ = other.home_;
      away_ = other.away_;
      joinState_ = other.joinState_;
      matchState_ = other.matchState_;
      currentInnings_ = other.currentInnings_ != null ? other.currentInnings_.Clone() : null;
      previousInnings_ = other.previousInnings_ != null ? other.previousInnings_.Clone() : null;
      homeLineup_ = other.homeLineup_.Clone();
      awayLineup_ = other.awayLineup_.Clone();
      currentBall_ = other.currentBall_ != null ? other.currentBall_.Clone() : null;
      previousBalls_ = other.previousBalls_.Clone();
      selectedFirstBatsman_ = other.selectedFirstBatsman_ != null ? other.selectedFirstBatsman_.Clone() : null;
      selectedSecondBatsman_ = other.selectedSecondBatsman_ != null ? other.selectedSecondBatsman_.Clone() : null;
      selectedBowler_ = other.selectedBowler_ != null ? other.selectedBowler_.Clone() : null;
      previousEvent_ = other.previousEvent_;
      stateStartTime_ = other.stateStartTime_;
      bothDisconnectTimePoint_ = other.bothDisconnectTimePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchModel Clone() {
      return new MatchModel(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Superstars.Match.M_UserInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::Superstars.Match.M_UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.M_UserInfo> users_ = new pbc::RepeatedField<global::Superstars.Match.M_UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.M_UserInfo> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "home" field.</summary>
    public const int HomeFieldNumber = 3;
    private string home_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Home {
      get { return home_; }
      set {
        home_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "away" field.</summary>
    public const int AwayFieldNumber = 4;
    private string away_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Away {
      get { return away_; }
      set {
        away_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinState" field.</summary>
    public const int JoinStateFieldNumber = 5;
    private global::Superstars.Match.JoinStates joinState_ = global::Superstars.Match.JoinStates.NoJoins;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.JoinStates JoinState {
      get { return joinState_; }
      set {
        joinState_ = value;
      }
    }

    /// <summary>Field number for the "matchState" field.</summary>
    public const int MatchStateFieldNumber = 6;
    private global::Superstars.Payload.MatchStates matchState_ = global::Superstars.Payload.MatchStates.NoState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.MatchStates MatchState {
      get { return matchState_; }
      set {
        matchState_ = value;
      }
    }

    /// <summary>Field number for the "currentInnings" field.</summary>
    public const int CurrentInningsFieldNumber = 7;
    private global::Superstars.Match.M_Innings currentInnings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_Innings CurrentInnings {
      get { return currentInnings_; }
      set {
        currentInnings_ = value;
      }
    }

    /// <summary>Field number for the "previousInnings" field.</summary>
    public const int PreviousInningsFieldNumber = 8;
    private global::Superstars.Match.M_Innings previousInnings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_Innings PreviousInnings {
      get { return previousInnings_; }
      set {
        previousInnings_ = value;
      }
    }

    /// <summary>Field number for the "home_lineup" field.</summary>
    public const int HomeLineupFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Superstars.Match.MatchPlayer> _repeated_homeLineup_codec
        = pb::FieldCodec.ForMessage(74, global::Superstars.Match.MatchPlayer.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.MatchPlayer> homeLineup_ = new pbc::RepeatedField<global::Superstars.Match.MatchPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.MatchPlayer> HomeLineup {
      get { return homeLineup_; }
    }

    /// <summary>Field number for the "away_lineup" field.</summary>
    public const int AwayLineupFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Superstars.Match.MatchPlayer> _repeated_awayLineup_codec
        = pb::FieldCodec.ForMessage(82, global::Superstars.Match.MatchPlayer.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.MatchPlayer> awayLineup_ = new pbc::RepeatedField<global::Superstars.Match.MatchPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.MatchPlayer> AwayLineup {
      get { return awayLineup_; }
    }

    /// <summary>Field number for the "currentBall" field.</summary>
    public const int CurrentBallFieldNumber = 11;
    private global::Superstars.Match.M_CurrentBall currentBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.M_CurrentBall CurrentBall {
      get { return currentBall_; }
      set {
        currentBall_ = value;
      }
    }

    /// <summary>Field number for the "previousBalls" field.</summary>
    public const int PreviousBallsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Superstars.Match.M_CurrentBall> _repeated_previousBalls_codec
        = pb::FieldCodec.ForMessage(98, global::Superstars.Match.M_CurrentBall.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Match.M_CurrentBall> previousBalls_ = new pbc::RepeatedField<global::Superstars.Match.M_CurrentBall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Match.M_CurrentBall> PreviousBalls {
      get { return previousBalls_; }
    }

    /// <summary>Field number for the "selectedFirstBatsman" field.</summary>
    public const int SelectedFirstBatsmanFieldNumber = 13;
    private global::Superstars.Match.MatchPlayer selectedFirstBatsman_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.MatchPlayer SelectedFirstBatsman {
      get { return selectedFirstBatsman_; }
      set {
        selectedFirstBatsman_ = value;
      }
    }

    /// <summary>Field number for the "selectedSecondBatsman" field.</summary>
    public const int SelectedSecondBatsmanFieldNumber = 14;
    private global::Superstars.Match.MatchPlayer selectedSecondBatsman_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.MatchPlayer SelectedSecondBatsman {
      get { return selectedSecondBatsman_; }
      set {
        selectedSecondBatsman_ = value;
      }
    }

    /// <summary>Field number for the "selectedBowler" field.</summary>
    public const int SelectedBowlerFieldNumber = 15;
    private global::Superstars.Match.MatchPlayer selectedBowler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Match.MatchPlayer SelectedBowler {
      get { return selectedBowler_; }
      set {
        selectedBowler_ = value;
      }
    }

    /// <summary>Field number for the "previousEvent" field.</summary>
    public const int PreviousEventFieldNumber = 16;
    private global::Superstars.Payload.Events previousEvent_ = global::Superstars.Payload.Events.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Events PreviousEvent {
      get { return previousEvent_; }
      set {
        previousEvent_ = value;
      }
    }

    /// <summary>Field number for the "stateStartTime" field.</summary>
    public const int StateStartTimeFieldNumber = 17;
    private long stateStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StateStartTime {
      get { return stateStartTime_; }
      set {
        stateStartTime_ = value;
      }
    }

    /// <summary>Field number for the "both_disconnect_time_point" field.</summary>
    public const int BothDisconnectTimePointFieldNumber = 18;
    private long bothDisconnectTimePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BothDisconnectTimePoint {
      get { return bothDisconnectTimePoint_; }
      set {
        bothDisconnectTimePoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!users_.Equals(other.users_)) return false;
      if (Home != other.Home) return false;
      if (Away != other.Away) return false;
      if (JoinState != other.JoinState) return false;
      if (MatchState != other.MatchState) return false;
      if (!object.Equals(CurrentInnings, other.CurrentInnings)) return false;
      if (!object.Equals(PreviousInnings, other.PreviousInnings)) return false;
      if(!homeLineup_.Equals(other.homeLineup_)) return false;
      if(!awayLineup_.Equals(other.awayLineup_)) return false;
      if (!object.Equals(CurrentBall, other.CurrentBall)) return false;
      if(!previousBalls_.Equals(other.previousBalls_)) return false;
      if (!object.Equals(SelectedFirstBatsman, other.SelectedFirstBatsman)) return false;
      if (!object.Equals(SelectedSecondBatsman, other.SelectedSecondBatsman)) return false;
      if (!object.Equals(SelectedBowler, other.SelectedBowler)) return false;
      if (PreviousEvent != other.PreviousEvent) return false;
      if (StateStartTime != other.StateStartTime) return false;
      if (BothDisconnectTimePoint != other.BothDisconnectTimePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= users_.GetHashCode();
      if (Home.Length != 0) hash ^= Home.GetHashCode();
      if (Away.Length != 0) hash ^= Away.GetHashCode();
      if (JoinState != global::Superstars.Match.JoinStates.NoJoins) hash ^= JoinState.GetHashCode();
      if (MatchState != global::Superstars.Payload.MatchStates.NoState) hash ^= MatchState.GetHashCode();
      if (currentInnings_ != null) hash ^= CurrentInnings.GetHashCode();
      if (previousInnings_ != null) hash ^= PreviousInnings.GetHashCode();
      hash ^= homeLineup_.GetHashCode();
      hash ^= awayLineup_.GetHashCode();
      if (currentBall_ != null) hash ^= CurrentBall.GetHashCode();
      hash ^= previousBalls_.GetHashCode();
      if (selectedFirstBatsman_ != null) hash ^= SelectedFirstBatsman.GetHashCode();
      if (selectedSecondBatsman_ != null) hash ^= SelectedSecondBatsman.GetHashCode();
      if (selectedBowler_ != null) hash ^= SelectedBowler.GetHashCode();
      if (PreviousEvent != global::Superstars.Payload.Events.None) hash ^= PreviousEvent.GetHashCode();
      if (StateStartTime != 0L) hash ^= StateStartTime.GetHashCode();
      if (BothDisconnectTimePoint != 0L) hash ^= BothDisconnectTimePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (Home.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Home);
      }
      if (Away.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Away);
      }
      if (JoinState != global::Superstars.Match.JoinStates.NoJoins) {
        output.WriteRawTag(40);
        output.WriteEnum((int) JoinState);
      }
      if (MatchState != global::Superstars.Payload.MatchStates.NoState) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchState);
      }
      if (currentInnings_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurrentInnings);
      }
      if (previousInnings_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PreviousInnings);
      }
      homeLineup_.WriteTo(output, _repeated_homeLineup_codec);
      awayLineup_.WriteTo(output, _repeated_awayLineup_codec);
      if (currentBall_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CurrentBall);
      }
      previousBalls_.WriteTo(output, _repeated_previousBalls_codec);
      if (selectedFirstBatsman_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SelectedFirstBatsman);
      }
      if (selectedSecondBatsman_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SelectedSecondBatsman);
      }
      if (selectedBowler_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SelectedBowler);
      }
      if (PreviousEvent != global::Superstars.Payload.Events.None) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) PreviousEvent);
      }
      if (StateStartTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(StateStartTime);
      }
      if (BothDisconnectTimePoint != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(BothDisconnectTimePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (Home.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Home);
      }
      if (Away.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Away);
      }
      if (JoinState != global::Superstars.Match.JoinStates.NoJoins) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinState);
      }
      if (MatchState != global::Superstars.Payload.MatchStates.NoState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchState);
      }
      if (currentInnings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentInnings);
      }
      if (previousInnings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInnings);
      }
      size += homeLineup_.CalculateSize(_repeated_homeLineup_codec);
      size += awayLineup_.CalculateSize(_repeated_awayLineup_codec);
      if (currentBall_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentBall);
      }
      size += previousBalls_.CalculateSize(_repeated_previousBalls_codec);
      if (selectedFirstBatsman_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedFirstBatsman);
      }
      if (selectedSecondBatsman_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedSecondBatsman);
      }
      if (selectedBowler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedBowler);
      }
      if (PreviousEvent != global::Superstars.Payload.Events.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PreviousEvent);
      }
      if (StateStartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StateStartTime);
      }
      if (BothDisconnectTimePoint != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BothDisconnectTimePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchModel other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      users_.Add(other.users_);
      if (other.Home.Length != 0) {
        Home = other.Home;
      }
      if (other.Away.Length != 0) {
        Away = other.Away;
      }
      if (other.JoinState != global::Superstars.Match.JoinStates.NoJoins) {
        JoinState = other.JoinState;
      }
      if (other.MatchState != global::Superstars.Payload.MatchStates.NoState) {
        MatchState = other.MatchState;
      }
      if (other.currentInnings_ != null) {
        if (currentInnings_ == null) {
          CurrentInnings = new global::Superstars.Match.M_Innings();
        }
        CurrentInnings.MergeFrom(other.CurrentInnings);
      }
      if (other.previousInnings_ != null) {
        if (previousInnings_ == null) {
          PreviousInnings = new global::Superstars.Match.M_Innings();
        }
        PreviousInnings.MergeFrom(other.PreviousInnings);
      }
      homeLineup_.Add(other.homeLineup_);
      awayLineup_.Add(other.awayLineup_);
      if (other.currentBall_ != null) {
        if (currentBall_ == null) {
          CurrentBall = new global::Superstars.Match.M_CurrentBall();
        }
        CurrentBall.MergeFrom(other.CurrentBall);
      }
      previousBalls_.Add(other.previousBalls_);
      if (other.selectedFirstBatsman_ != null) {
        if (selectedFirstBatsman_ == null) {
          SelectedFirstBatsman = new global::Superstars.Match.MatchPlayer();
        }
        SelectedFirstBatsman.MergeFrom(other.SelectedFirstBatsman);
      }
      if (other.selectedSecondBatsman_ != null) {
        if (selectedSecondBatsman_ == null) {
          SelectedSecondBatsman = new global::Superstars.Match.MatchPlayer();
        }
        SelectedSecondBatsman.MergeFrom(other.SelectedSecondBatsman);
      }
      if (other.selectedBowler_ != null) {
        if (selectedBowler_ == null) {
          SelectedBowler = new global::Superstars.Match.MatchPlayer();
        }
        SelectedBowler.MergeFrom(other.SelectedBowler);
      }
      if (other.PreviousEvent != global::Superstars.Payload.Events.None) {
        PreviousEvent = other.PreviousEvent;
      }
      if (other.StateStartTime != 0L) {
        StateStartTime = other.StateStartTime;
      }
      if (other.BothDisconnectTimePoint != 0L) {
        BothDisconnectTimePoint = other.BothDisconnectTimePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 26: {
            Home = input.ReadString();
            break;
          }
          case 34: {
            Away = input.ReadString();
            break;
          }
          case 40: {
            JoinState = (global::Superstars.Match.JoinStates) input.ReadEnum();
            break;
          }
          case 48: {
            MatchState = (global::Superstars.Payload.MatchStates) input.ReadEnum();
            break;
          }
          case 58: {
            if (currentInnings_ == null) {
              CurrentInnings = new global::Superstars.Match.M_Innings();
            }
            input.ReadMessage(CurrentInnings);
            break;
          }
          case 66: {
            if (previousInnings_ == null) {
              PreviousInnings = new global::Superstars.Match.M_Innings();
            }
            input.ReadMessage(PreviousInnings);
            break;
          }
          case 74: {
            homeLineup_.AddEntriesFrom(input, _repeated_homeLineup_codec);
            break;
          }
          case 82: {
            awayLineup_.AddEntriesFrom(input, _repeated_awayLineup_codec);
            break;
          }
          case 90: {
            if (currentBall_ == null) {
              CurrentBall = new global::Superstars.Match.M_CurrentBall();
            }
            input.ReadMessage(CurrentBall);
            break;
          }
          case 98: {
            previousBalls_.AddEntriesFrom(input, _repeated_previousBalls_codec);
            break;
          }
          case 106: {
            if (selectedFirstBatsman_ == null) {
              SelectedFirstBatsman = new global::Superstars.Match.MatchPlayer();
            }
            input.ReadMessage(SelectedFirstBatsman);
            break;
          }
          case 114: {
            if (selectedSecondBatsman_ == null) {
              SelectedSecondBatsman = new global::Superstars.Match.MatchPlayer();
            }
            input.ReadMessage(SelectedSecondBatsman);
            break;
          }
          case 122: {
            if (selectedBowler_ == null) {
              SelectedBowler = new global::Superstars.Match.MatchPlayer();
            }
            input.ReadMessage(SelectedBowler);
            break;
          }
          case 128: {
            PreviousEvent = (global::Superstars.Payload.Events) input.ReadEnum();
            break;
          }
          case 136: {
            StateStartTime = input.ReadInt64();
            break;
          }
          case 144: {
            BothDisconnectTimePoint = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
