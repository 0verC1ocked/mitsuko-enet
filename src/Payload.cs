// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: payload.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Superstars.Payload {

  /// <summary>Holder for reflection information generated from payload.proto</summary>
  public static partial class PayloadReflection {

    #region Descriptor
    /// <summary>File descriptor for payload.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PayloadReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYXlsb2FkLnByb3RvEgdQQVlMT0FEIqECCgdQYXlsb2FkEh4KBWV2ZW50",
            "GAEgASgOMg8uUEFZTE9BRC5FdmVudHMSHwoEZGF0YRgCIAEoCzIRLlBBWUxP",
            "QUQuVXNlckRhdGESIAoEdHVybhgDIAEoDjISLlBBWUxPQUQuVHVyblN0YXRl",
            "EiMKC21hdGNoX3N0YXRlGAQgASgLMg4uUEFZTE9BRC5NYXRjaBIdCgVlbW9q",
            "aRgFIAEoDjIOLlBBWUxPQUQuRW1vamkSIwoHbWVzc2FnZRgGIAEoDjISLlBB",
            "WUxPQUQuTWVzc2FnaW5nEiEKB3ZlcnNpb24YByABKAsyEC5QQVlMT0FELlZl",
            "cnNpb24SJwoIZm9yX3RlYW0YCCABKA4yFS5QQVlMT0FELlRlYW1Qb3NpdGlv",
            "biI2CgdWZXJzaW9uEg0KBW1ham9yGAEgASgFEg0KBW1pbm9yGAIgASgFEg0K",
            "BXBhdGNoGAMgASgFIvwKCghVc2VyRGF0YRIOCgZ1c2VySWQYASABKAkSDgoG",
            "cm9vbUlkGAIgASgJEhIKCm9wcG9uZW50SWQYAyABKAkSCwoDbXNnGAQgASgJ",
            "EiQKC2hvbWVfbGluZXVwGAUgAygLMg8uUEFZTE9BRC5QbGF5ZXISJAoLYXdh",
            "eV9saW5ldXAYBiADKAsyDy5QQVlMT0FELlBsYXllchImCglwbGF5U3RhdGUY",
            "ByABKA4yEy5QQVlMT0FELlBsYXlTdGF0ZXMSGAoQYmF0c21hbl9zZWxlY3Rl",
            "ZBgIIAMoBRIXCg9ib3dsZXJfc2VsZWN0ZWQYCSABKAUSHQoFYmFsbHMYCiAD",
            "KAsyDi5QQVlMT0FELlRCYWxsEh0KBXNob3RzGAsgAygLMg4uUEFZTE9BRC5U",
            "U2hvdBIKCgJpZBgMIAEoBRIkChxzZWxlY3RlZF9vbnN0cmlrZV9iYXRzbWFu",
            "X2lkGA0gASgFEiUKHXNlbGVjdGVkX29mZnN0cmlrZV9iYXRzbWFuX2lkGA4g",
            "ASgFEhoKEnNlbGVjdGVkX2Jvd2xlcl9pZBgPIAEoBRIgCgZyZXN1bHQYECAB",
            "KAsyEC5QQVlMT0FELlRSZXN1bHQSGQoRc2VsZWN0aW9uX3RpbWVvdXQYESAB",
            "KAUSIAoYcGxheWVyX3NlbGVjdGlvbl90aW1lb3V0GBIgASgFEiQKHGJ1ZmZl",
            "cl9mb3Jfc2VsZWN0aW9uX3RpbWVvdXQYEyABKAUSGQoRcGluZ19wb25nX3Rp",
            "bWVvdXQYFCABKAUSGwoTYmF0c21hbl9tYW5hX2ZpbGxlZBgVIAEoBRIaChJi",
            "b3dsZXJfbWFuYV9maWxsZWQYFiABKAUSFAoMYWN0aXZhdGVkX3NhGBcgASgF",
            "EhMKC3NhX2R1cmF0aW9uGBggASgFEhUKDWlzX3Jwc19hY3RpdmUYGSABKAgS",
            "NAoWb25zdHJpa2VfcGFzc2l2ZXNfaW5mbxgaIAMoCzIULlBBWUxPQUQuUGFz",
            "c2l2ZUluZm8SNQoXb2Zmc3RyaWtlX3Bhc3NpdmVzX2luZm8YGyADKAsyFC5Q",
            "QVlMT0FELlBhc3NpdmVJbmZvEjIKFGJvd2xlcl9wYXNzaXZlc19pbmZvGBwg",
            "AygLMhQuUEFZTE9BRC5QYXNzaXZlSW5mbxIyChJhcHBsaWVkX2VxdWlwbWVu",
            "dHMYHSADKAsyFi5QQVlMT0FELkVxdWlwbWVudEluZm8SOQoXYm93bGVyX2F0",
            "dHJpYnV0ZV9ib29zdHMYHiABKAsyGC5QQVlMT0FELkF0dHJpYnV0ZUJvb3N0",
            "cxI7ChlvbnN0cmlrZV9hdHRyaWJ1dGVfYm9vc3RzGB8gASgLMhguUEFZTE9B",
            "RC5BdHRyaWJ1dGVCb29zdHMSPAoab2Zmc3RyaWtlX2F0dHJpYnV0ZV9ib29z",
            "dHMYICABKAsyGC5QQVlMT0FELkF0dHJpYnV0ZUJvb3N0cxIgChhzZWxlY3Rp",
            "b25fdGltZV9yZW1haW5pbmcYISABKAUSHAoUbWF4X3NlbGVjdGlvbl9taXNz",
            "ZXMYIiABKAUSGAoQc2VsZWN0aW9uX21pc3NlcxgjIAEoBRIgChhvcHBuZW50",
            "X3NlbGVjdGlvbl9taXNzZXMYJCABKAUSGAoQc2VsZWN0aW9uX21pc3NlZBgl",
            "IAEoCBIgChhvcHBuZW50X3NlbGVjdGlvbl9taXNzZWQYJiABKAgSJQodc3Rh",
            "cnRfaW5uaW5nc190aW1lb3V0X3NlY29uZHMYJyABKAUSJAocc3RhcnRfaW5u",
            "aW5nc190aW1lX3JlbWFpbmluZxgoIAEoBRIqCgxtYXRjaF9yZXN1bHQYKSAB",
            "KA4yFC5QQVlMT0FELk1hdGNoUmVzdWx0IiwKC1Bhc3NpdmVJbmZvEgoKAmlk",
            "GAEgASgFEhEKCWlzX2FjdGl2ZRgCIAEoCCJdCg1FcXVpcG1lbnRJbmZvEgoK",
            "AmlkGAEgASgFEg8KB2JyYWNrZXQYAiABKAUSLwoOY2xhc3NpZmljYXRpb24Y",
            "AyABKA4yFy5QQVlMT0FELmNsYXNzaWZpY2F0aW9uIm4KD0F0dHJpYnV0ZUJv",
            "b3N0cxIVCg1sYl9yaGJfZGVidWZmGAEgASgBEhgKEGNvbmZpZGVuY2VfYm9v",
            "c3QYAiABKAESFQoNcGFzc2l2ZV9ib29zdBgDIAEoARITCgtwcm9wc19ib29z",
            "dBgEIAEoASKVAQoFVFNob3QSCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIL",
            "CgNydW4YAyABKAUSDwoHYnJhY2tldBgEIAEoBRITCgtwcm9iYWJpbGl0eRgF",
            "IAEoARIOCgZsb2NrZWQYBiABKAgSEwoLc2hvdF9oaWRkZW4YByABKAgSGgoS",
            "cHJvYmFiaWxpdHlfaGlkZGVuGAggASgIIpMBCgdUU2FJbmZvEjEKEGRlYWRf",
            "c2hvdF9zdGF0dXMYASABKA4yFy5QQVlMT0FELkRlYWRTaG90U3RhdHVzEhkK",
            "EWJhdHNtYW5fYWN0aXZlX3NhGAIgASgFEhgKEGJvd2xlcl9hY3RpdmVfc2EY",
            "AyABKAUSIAoYaW1tb3J0YWxfd2lja2V0X2J1dF9taXNzGAQgASgIIooDCgdU",
            "UmVzdWx0EhIKCnRvdGFsX3J1bnMYASABKAUSEwoLdG90YWxfYmFsbHMYAiAB",
            "KAUSGgoSdG90YWxfd2lja2V0X3Rha2VuGAMgASgFEhMKC3J1bnNfc2NvcmVk",
            "GAQgASgFEhwKFG9yaWdpbmFsX3J1bnNfc2NvcmVkGAUgASgFEhgKEG92ZXJf",
            "YmFsbF9udW1iZXIYBiABKAUSEwoLb3Zlcl9udW1iZXIYByABKAUSEgoKYnJh",
            "Y2tldF9pZBgIIAEoBRImCgdvdXRjb21lGAkgASgOMhUuUEFZTE9BRC5TaG90",
            "T3V0Y29tZXMSIQoEdHlwZRgKIAEoDjITLlBBWUxPQUQuV2lja2V0VHlwZRI0",
            "ChFhbnRpY2lwYXRpb25fdHlwZRgLIAEoDjIZLlBBWUxPQUQuQW50aWNpcGF0",
            "aW9uVHlwZRIgCgZpbm5pbmcYDCABKA4yEC5QQVlMT0FELklubmluZ3MSIQoH",
            "c2FfaW5mbxgNIAEoCzIQLlBBWUxPQUQuVFNhSW5mbyI0Cg1TaG90c1Bvc3Np",
            "YmxlEhIKCmJyYWNrZXRfaWQYASABKAUSDwoHc2hvdF9pZBgCIAEoBSJwCgVU",
            "QmFsbBIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEg0KBXZhbHVlGAMgASgB",
            "Eg4KBnNrdWxscxgEIAEoBRIuCg5zaG90c19wb3NzaWJsZRgFIAMoCzIWLlBB",
            "WUxPQUQuU2hvdHNQb3NzaWJsZSKWAwoGUGxheWVyEhQKDGNoYXJhY3Rlcl9p",
            "ZBgBIAEoBRIQCghuaWNrbmFtZRgCIAEoCRIfCgZyYXJpdHkYAyABKA4yDy5Q",
            "QVlMT0FELnJhcml0eRIUCgxpbWFnZV9udW1iZXIYBCABKAUSLwoOY2xhc3Np",
            "ZmljYXRpb24YBSABKA4yFy5QQVlMT0FELmNsYXNzaWZpY2F0aW9uEh8KBmdl",
            "bmRlchgGIAEoDjIPLlBBWUxPQUQuZ2VuZGVyEg0KBXBvd2VyGAcgASgFEi0K",
            "DWJhdHRpbmdfc3R5bGUYCCABKA4yFi5QQVlMT0FELmJhdHRpbmdfc3R5bGUS",
            "LQoNYm93bGluZ19zdHlsZRgJIAEoDjIWLlBBWUxPQUQuYm93bGluZ19zdHls",
            "ZRINCgVsZXZlbBgKIAEoBRIVCg1saW5ldXBfbnVtYmVyGAsgASgFEg4KBmlz",
            "X291dBgMIAEoCBIXCg9lcXVpcG1lbnRfc2xvdHMYDSADKAUSDQoFcHJvcHMY",
            "DiADKAUSEAoIcGFzc2l2ZXMYDyADKAUibQoGSW5uaW5nEiAKBmlubmluZxgB",
            "IAEoDjIQLlBBWUxPQUQuSW5uaW5ncxIMCgRydW5zGAIgASgFEg0KBWJhbGxz",
            "GAMgASgFEg8KB3dpY2tldHMYBCABKAUSEwoLb3Zlcl9udW1iZXIYBSABKAUi",
            "hgUKBU1hdGNoEg8KB21hdGNoSWQYASABKAkSJAoJdXNlcnNJbmZvGAIgAygL",
            "MhEuUEFZTE9BRC5Vc2VySW5mbxImCg1jdXJyZW50SW5uaW5nGAMgASgLMg8u",
            "UEFZTE9BRC5Jbm5pbmcSJwoOcHJldmlvdXNJbm5pbmcYBCABKAsyDy5QQVlM",
            "T0FELklubmluZxIqCgxjdXJyZW50X2JhbGwYBSABKAsyFC5QQVlMT0FELkN1",
            "cnJlbnRCYWxsEhEKCW9uX3N0cmlrZRgGIAEoBRISCgpvZmZfc3RyaWtlGAcg",
            "ASgFEg4KBmJvd2xlchgIIAEoBRInCg5wcmV2aW91c19ldmVudBgJIAEoDjIP",
            "LlBBWUxPQUQuRXZlbnRzEhgKEGFjdGl2ZV9ib3dsZXJfc2EYCiABKAUSGQoR",
            "YWN0aXZlX2JhdHNtYW5fc2EYCyABKAUSKAoObWlzc2VkX3Jlc3VsdHMYDCAD",
            "KAsyEC5QQVlMT0FELlRSZXN1bHQSKwoNY3VycmVudF9zdGF0ZRgNIAEoDjIU",
            "LlBBWUxPQUQuTWF0Y2hTdGF0ZXMSJwoOZXhwZWN0ZWRfZXZlbnQYDiABKA4y",
            "Dy5QQVlMT0FELkV2ZW50cxIZChFzZWxlY3Rpb25fdGltZW91dBgPIAEoBRIg",
            "ChhwbGF5ZXJfc2VsZWN0aW9uX3RpbWVvdXQYECABKAUSJAocYnVmZmVyX2Zv",
            "cl9zZWxlY3Rpb25fdGltZW91dBgRIAEoBRITCgt3aW5uZXJfdGVhbRgSIAEo",
            "CRIgChhzZWxlY3Rpb25fdGltZV9yZW1haW5pbmcYEyABKAUSGgoScmVjb25u",
            "ZWN0aW9uX2NvdW50GBQgASgFItgBCghVc2VySW5mbxIKCgJpZBgBIAEoCRIn",
            "CgpwbGF5X3N0YXRlGAIgASgOMhMuUEFZTE9BRC5QbGF5U3RhdGVzEigKC2xp",
            "bmV1cF9pbmZvGAMgAygLMhMuUEFZTE9BRC5QbGF5ZXJJbmZvEhQKDHRvdGFs",
            "X21pc3NlcxgEIAEoBRIUCgxhY3RpdmF0ZWRfc2EYBSABKAUSEwoLc2FfZHVy",
            "YXRpb24YBiABKAUSGQoRc2FfdG90YWxfZHVyYXRpb24YByABKAUSEQoJbWFu",
            "YV9maWxsGAggASgFIq4BCgpQbGF5ZXJJbmZvEhUKDWxpbmV1cF9udW1iZXIY",
            "ASABKAUSCwoDb3V0GAIgASgIEg4KBnBsYXllZBgDIAEoCBITCgtydW5zX3Nj",
            "b3JlZBgEIAEoBRITCgtiYWxsc19mYWNlZBgFIAEoBRIVCg13aWNrZXRzX3Rh",
            "a2VuGAYgASgFEhQKDGJhbGxzX2Jvd2xlZBgHIAEoBRIVCg1ydW5zX2NvbmNl",
            "ZGVkGAggASgFIr8BCgtDdXJyZW50QmFsbBIYChBvdmVyX2JhbGxfbnVtYmVy",
            "GAEgASgFEh0KBWJhbGxzGAIgAygLMg4uUEFZTE9BRC5UQmFsbBIdCgVzaG90",
            "cxgDIAMoCzIOLlBBWUxPQUQuVFNob3QSDwoHYmFsbF9pZBgEIAEoBRIlCg1z",
            "aG90X3NlbGVjdGVkGAUgASgLMg4uUEFZTE9BRC5UU2hvdBIgCgZyZXN1bHQY",
            "BiABKAsyEC5QQVlMT0FELlRSZXN1bHQqkgIKC01hdGNoU3RhdGVzEgsKB05v",
            "U3RhdGUQABITCg9XYWl0aW5nRm9yVXNlcnMQARIYChRXYWl0aW5nRm9yTWF0",
            "Y2hSZWFkeRACEhAKDFN0YXJ0SW5uaW5ncxADEhMKD1BsYXllclNlbGVjdGlv",
            "bhAEEg0KCVN0YXJ0QmFsbBAFEhEKDUJhbGxTZWxlY3Rpb24QBhIRCg1TaG90",
            "U2VsZWN0aW9uEAcSEAoMU3RhdGVPdXRjb21lEAgSEAoMU3RhdGVFbmRCYWxs",
            "EAkSCwoHRW5kT3ZlchAKEhMKD1N0YXRlRW5kSW5uaW5ncxALEg4KCk1hdGNo",
            "RW5kZWQQDBIVChFTdGF0ZVJlY29ubmVjdGluZxANKlEKCVR1cm5TdGF0ZRIQ",
            "CgxCQVRUSU5HX1RVUk4QABIQCgxCT1dMSU5HX1RVUk4QARITCg9CT1RIX1VT",
            "RVJTX1RVUk4QAhILCgdOT19UVVJOEAMqRAoMVGVhbVBvc2l0aW9uEhYKElRF",
            "QU1fUE9TSVRJT05fTk9ORRAAEg0KCUhPTUVfVEVBTRABEg0KCUFXQVlfVEVB",
            "TRACKj4KC01hdGNoUmVzdWx0EgwKCE5vUmVzdWx0EAASCwoHVmljb3RyeRAB",
            "EgoKBkRlZmVhdBACEggKBERyYXcQAypFCg5EZWFkU2hvdFN0YXR1cxIMCghO",
            "b1N0YXR1cxAAEgwKCEluYWN0aXZlEAESCwoHU3VjY2VzcxACEgoKBkZhaWxl",
            "ZBADKjAKCldpY2tldFR5cGUSCwoHSW52YWxpZBAAEgoKBkJvd2xlZBABEgkK",
            "BUNhdGNoEAIqpwEKEEFudGljaXBhdGlvblR5cGUSCgoGTm9UeXBlEAASHQoZ",
            "SGlnaFByb2JhYmlsaXR5U2l4U3VjY2VzcxABEhoKFkhpZ2hQcm9iYWJpbGl0",
            "eVNpeE1pc3MQAhIaChZIaWdoUHJvYmFiaWxpdHlGb3VyT3V0EAMSGwoXSGln",
            "aFByb2JhYmlsaXR5Rm91ck1pc3MQBBITCg9BbnRpY2lwYXRpb25PdXQQBSo8",
            "CgxTaG90T3V0Y29tZXMSDQoJTm9PdXRjb21lEAASBwoDSGl0EAESCAoETWlz",
            "cxACEgoKBldpY2tldBADKnEKBUVtb2ppEgsKB05vRW1vdGUQABIOCgpFbW90",
            "ZUhhcHB5EAESDQoJRW1vdGVDb29sEAISDgoKRW1vdGVBbmdyeRADEg0KCUVt",
            "b3RlWWF3bhAEEgwKCEVtb3RlU2l4EAUSDwoLRW1vdGVXaWNrZXQQBip9CglN",
            "ZXNzYWdpbmcSDQoJTm9NZXNzYWdlEAASDQoJTWVzc2FnZUdHEAESDgoKTWVz",
            "c2FnZVdvdxACEg8KC01lc3NhZ2VOaWNlEAMSDwoLTWVzc2FnZUhhaGEQBBIR",
            "Cg1NZXNzYWdlVGhhbmtzEAUSDQoJTWVzc2FnZUdMEAYqPwoKUGxheVN0YXRl",
            "cxIKCgZOb1BsYXkQABILCgdCYXR0aW5nEAESCwoHQm93bGluZxACEgsKB0Zv",
            "ckZlaXQQAypPCgZyYXJpdHkSDAoITm9SYXJpdHkQABIKCgZDb21tb24QARIM",
            "CghSZWxpYWJsZRACEg0KCUJyaWxsaWFudBADEg4KCldvcmxkQ2xhc3MQBCo2",
            "Cg5jbGFzc2lmaWNhdGlvbhILCgdOb0NsYXNzEAASCwoHQmF0c21hbhABEgoK",
            "BkJvd2xlchACKi0KBmdlbmRlchINCglOb25CaW5hcnkQABIICgRNYWxlEAES",
            "CgoGRmVtYWxlEAIqLAoNYmF0dGluZ19zdHlsZRINCglSaWdodEhhbmQQABIM",
            "CghMZWZ0SGFuZBABKjcKDWJvd2xpbmdfc3R5bGUSCAoERmFzdBAAEggKBFNw",
            "aW4QARISCg5Ob0Jvd2xpbmdTdHlsZRADKiAKB0lubmluZ3MSCQoFRklSU1QQ",
            "ABIKCgZTRUNPTkQQASrIDgoGRXZlbnRzEggKBE5PTkUQABIOCgpPUFBfSk9J",
            "TkVEEAESDwoLTUFUQ0hfUkVBRFkQAhIXChNNQVRDSF9DUkVBVEVfRkFJTEVE",
            "EAMSEAoMSk9JTkVEX01BVENIEAQSEQoNTUFUQ0hfU1RBUlRFRBAFEhYKEk1B",
            "VENIX1NDRU5FX0xPQURFRBAGEg4KClRPU1NfU1RBUlQQBxIMCghUT1NTX0FD",
            "SxAIEg8KC1RPU1NfUkVTVUxUEAkSFgoSQkFUX0JBTExfU0VMRUNUSU9OEAoS",
            "GQoVTUFUQ0hfSU5OSU5HU19ERVRBSUxTEAsSEQoNSU5OSU5HU19JTlRSTxAM",
            "EhQKEElOTklOR1NfSU5UT19BQ0sQDRIYChRTRVJWRVJfSU5OSU5HU19SRUFE",
            "WRAOEhQKEE9QRU5FUlNfU0VMRUNURUQQDxIYChRDTElFTlRfSU5OSU5HU19S",
            "RUFEWRAQEhEKDUlOTklOR1NfU1RBUlQQERIVChFJTk5JTkdTX1NUQVJUX0FD",
            "SxASEhYKElNUQVJUX0NVUlJFTlRfT1ZFUhATEhQKEFNUQVJUX0JBTExfRVZF",
            "TlQQFBIcChhERUxJVkVJUkVTX0RBVEFfQ1JFQVRBRUQQFRIVChFERUxJVkVS",
            "WV9TRUxFQ1RFRBAWEg4KClNIT1RTX0RBVEEQFxIUChBCUkFDS0VUX1NFTEVD",
            "VEVEEBgSDwoLU0hPVF9SRVNVTFQQGRIYChRPVVRDT01FX1VQREFURURfREFU",
            "QRAaEhwKGFNIT1RfQU5JTUFUSU9OU19GSU5JU0hFRBAbEhoKFkVORF9DVVJS",
            "RU5UX0JBTExfRVZFTlQQHBIZChVORVhUX0JBVFNNQU5fU0VMRUNURUQQHRIe",
            "ChpFTkRfQ1VSUkVOVF9CQUxMX0VWRU5UX0FDSxAeEhQKEEVORF9DVVJSRU5U",
            "X09WRVIQHxIYChRORVhUX0JPV0xFUl9TRUxFQ1RFRBAgEhAKDEVORF9PVkVS",
            "X0FDSxAhEhEKDVBBU1NJVkVTX0RBVEEQIhIhCh1VUERBVEVfTE9DQUxfUExB",
            "WUVSX1NUUkVOR1RIUxAjEhcKE0FDVElWQVRFX0JBVFNNQU5fU0EQJBIYChRC",
            "QVRTTUFOX1NBX0FDVElWQVRFRBAlEhYKEkFDVElWQVRFX0JPV0xFUl9TQRAm",
            "EhcKE0JPV0xFUl9TQV9BQ1RJVkFURUQQJxIfChtCQVRTTUFOX0lOU1RBTlRf",
            "U0FfQUNUSVZBVEUQKBIeChpCT1dMRVJfSU5TVEFOVF9TQV9BQ1RJVkFURRAp",
            "EhkKFU1BVENIX01JU1NJT05fVVBEQVRFRBAqEhgKFE1BVENIX0FSRU5BU19V",
            "UERBVEVEECsSFQoRRU5EX0ZJUlNUX0lOTklOR1MQLBIZChVFTkRfRklSU1Rf",
            "SU5OSU5HU19BQ0sQLRINCglFTkRfTUFUQ0gQLhIPCgtBQk9SVF9NQVRDSBAv",
            "EhEKDUZPUkZJRVRfTUFUQ0gQMBIQCgxSRU1BVENIX0pPSU4QMRIRCg1SRU1B",
            "VENIX1NUQVJUEDISDgoKVFVSTl9TVEFSVBAzEgwKCFRVUk5fRU5EEDQSDQoJ",
            "VFVSTl9NSVNTEDUSGQoVRElTQ09OTkVDVF9USU1FUl9EQVRBEDYSDgoKQ0hB",
            "VF9FTU9KSRA3EggKBFBJTkcQOBIhCh1CQVRTTUFOX0lOU1RBTlRfU0FfSU5B",
            "Q1RJVkFURRA5EiAKHEJPV0xFUl9JTlNUQU5UX1NBX0lOQUNUSVZBVEUQRBIZ",
            "ChVGSUVMRElOR19NT0RFX0NIQU5HRUQQOxIPCgtEQVRBX1VQREFURRA8EhQK",
            "EFNQRUNUQVRPUl9KT0lORUQQPRIWChJTUEVDVEFUT1JfSk9JTl9BQ0sQPhIW",
            "ChJGQVNUX01PREVfU1BFRURfVVAQPxIaChZGQVNUX01PREVfU1BFRURfVVBf",
            "QUNLEEASDwoLVEhSRUFEX0VYSVQQQRILCgdNRVNTQUdFEEISEQoNSU5OSU5H",
            "U19SRUFEWRBDEhgKFFNUQVJUX0JBTExfRVZFTlRfQUNLEEUSDQoJUkVDT05O",
            "RUNUEEYSCwoHQ09OTkVDVBBHEg8KC0NPTk5FQ1RfQUNLEEgSDQoJQ09OTkVD",
            "VEVEEEkSCAoEUE9ORxBKEg8KC1JFQ09OTkVDVEVEEEsSDgoKRElTQ09OTkVD",
            "VBBMEhAKDENSRUFURV9NQVRDSBBNEhEKDUVWRU5UX0hJU1RPUlkQThIaChZN",
            "QVRDSF9TQ0VORV9MT0FERURfQUNLEE8SEwoPTUFUQ0hfTk9UX0ZPVU5EEFAS",
            "FwoTVU5TVVBQT1JURURfVkVSU0lPThBREg8KC1JFUExBWV9TWU5DEFISEwoP",
            "UkVQTEFZX1NZTkNfQUNLEFMSEgoOUkVQTEFZX0NPTk5FQ1QQVBIWChJSRVBM",
            "QVlfQ09OTkVDVF9BQ0sQVRIRCg1SRVBMQVlfUkVTWU5DEFZCKVoScGIvbWl0",
            "c3Vrby9wYXlsb2FkqgISU3VwZXJzdGFycy5QYXlsb2FkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Superstars.Payload.MatchStates), typeof(global::Superstars.Payload.TurnState), typeof(global::Superstars.Payload.TeamPosition), typeof(global::Superstars.Payload.MatchResult), typeof(global::Superstars.Payload.DeadShotStatus), typeof(global::Superstars.Payload.WicketType), typeof(global::Superstars.Payload.AnticipationType), typeof(global::Superstars.Payload.ShotOutcomes), typeof(global::Superstars.Payload.Emoji), typeof(global::Superstars.Payload.Messaging), typeof(global::Superstars.Payload.PlayStates), typeof(global::Superstars.Payload.rarity), typeof(global::Superstars.Payload.classification), typeof(global::Superstars.Payload.gender), typeof(global::Superstars.Payload.batting_style), typeof(global::Superstars.Payload.bowling_style), typeof(global::Superstars.Payload.Innings), typeof(global::Superstars.Payload.Events), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.Payload), global::Superstars.Payload.Payload.Parser, new[]{ "Event", "Data", "Turn", "MatchState", "Emoji", "Message", "Version", "ForTeam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.Version), global::Superstars.Payload.Version.Parser, new[]{ "Major", "Minor", "Patch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.UserData), global::Superstars.Payload.UserData.Parser, new[]{ "UserId", "RoomId", "OpponentId", "Msg", "HomeLineup", "AwayLineup", "PlayState", "BatsmanSelected", "BowlerSelected", "Balls", "Shots", "Id", "SelectedOnstrikeBatsmanId", "SelectedOffstrikeBatsmanId", "SelectedBowlerId", "Result", "SelectionTimeout", "PlayerSelectionTimeout", "BufferForSelectionTimeout", "PingPongTimeout", "BatsmanManaFilled", "BowlerManaFilled", "ActivatedSa", "SaDuration", "IsRpsActive", "OnstrikePassivesInfo", "OffstrikePassivesInfo", "BowlerPassivesInfo", "AppliedEquipments", "BowlerAttributeBoosts", "OnstrikeAttributeBoosts", "OffstrikeAttributeBoosts", "SelectionTimeRemaining", "MaxSelectionMisses", "SelectionMisses", "OppnentSelectionMisses", "SelectionMissed", "OppnentSelectionMissed", "StartInningsTimeoutSeconds", "StartInningsTimeRemaining", "MatchResult" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.PassiveInfo), global::Superstars.Payload.PassiveInfo.Parser, new[]{ "Id", "IsActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.EquipmentInfo), global::Superstars.Payload.EquipmentInfo.Parser, new[]{ "Id", "Bracket", "Classification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.AttributeBoosts), global::Superstars.Payload.AttributeBoosts.Parser, new[]{ "LbRhbDebuff", "ConfidenceBoost", "PassiveBoost", "PropsBoost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.TShot), global::Superstars.Payload.TShot.Parser, new[]{ "Id", "Name", "Run", "Bracket", "Probability", "Locked", "ShotHidden", "ProbabilityHidden" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.TSaInfo), global::Superstars.Payload.TSaInfo.Parser, new[]{ "DeadShotStatus", "BatsmanActiveSa", "BowlerActiveSa", "ImmortalWicketButMiss" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.TResult), global::Superstars.Payload.TResult.Parser, new[]{ "TotalRuns", "TotalBalls", "TotalWicketTaken", "RunsScored", "OriginalRunsScored", "OverBallNumber", "OverNumber", "BracketId", "Outcome", "Type", "AnticipationType", "Inning", "SaInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.ShotsPossible), global::Superstars.Payload.ShotsPossible.Parser, new[]{ "BracketId", "ShotId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.TBall), global::Superstars.Payload.TBall.Parser, new[]{ "Id", "Name", "Value", "Skulls", "ShotsPossible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.Player), global::Superstars.Payload.Player.Parser, new[]{ "CharacterId", "Nickname", "Rarity", "ImageNumber", "Classification", "Gender", "Power", "BattingStyle", "BowlingStyle", "Level", "LineupNumber", "IsOut", "EquipmentSlots", "Props", "Passives" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.Inning), global::Superstars.Payload.Inning.Parser, new[]{ "Inning_", "Runs", "Balls", "Wickets", "OverNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.Match), global::Superstars.Payload.Match.Parser, new[]{ "MatchId", "UsersInfo", "CurrentInning", "PreviousInning", "CurrentBall", "OnStrike", "OffStrike", "Bowler", "PreviousEvent", "ActiveBowlerSa", "ActiveBatsmanSa", "MissedResults", "CurrentState", "ExpectedEvent", "SelectionTimeout", "PlayerSelectionTimeout", "BufferForSelectionTimeout", "WinnerTeam", "SelectionTimeRemaining", "ReconnectionCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.UserInfo), global::Superstars.Payload.UserInfo.Parser, new[]{ "Id", "PlayState", "LineupInfo", "TotalMisses", "ActivatedSa", "SaDuration", "SaTotalDuration", "ManaFill" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.PlayerInfo), global::Superstars.Payload.PlayerInfo.Parser, new[]{ "LineupNumber", "Out", "Played", "RunsScored", "BallsFaced", "WicketsTaken", "BallsBowled", "RunsConceded" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Superstars.Payload.CurrentBall), global::Superstars.Payload.CurrentBall.Parser, new[]{ "OverBallNumber", "Balls", "Shots", "BallId", "ShotSelected", "Result" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MatchStates {
    [pbr::OriginalName("NoState")] NoState = 0,
    [pbr::OriginalName("WaitingForUsers")] WaitingForUsers = 1,
    [pbr::OriginalName("WaitingForMatchReady")] WaitingForMatchReady = 2,
    [pbr::OriginalName("StartInnings")] StartInnings = 3,
    [pbr::OriginalName("PlayerSelection")] PlayerSelection = 4,
    [pbr::OriginalName("StartBall")] StartBall = 5,
    [pbr::OriginalName("BallSelection")] BallSelection = 6,
    [pbr::OriginalName("ShotSelection")] ShotSelection = 7,
    [pbr::OriginalName("StateOutcome")] StateOutcome = 8,
    [pbr::OriginalName("StateEndBall")] StateEndBall = 9,
    [pbr::OriginalName("EndOver")] EndOver = 10,
    [pbr::OriginalName("StateEndInnings")] StateEndInnings = 11,
    [pbr::OriginalName("MatchEnded")] MatchEnded = 12,
    [pbr::OriginalName("StateReconnecting")] StateReconnecting = 13,
  }

  public enum TurnState {
    [pbr::OriginalName("BATTING_TURN")] BattingTurn = 0,
    [pbr::OriginalName("BOWLING_TURN")] BowlingTurn = 1,
    [pbr::OriginalName("BOTH_USERS_TURN")] BothUsersTurn = 2,
    [pbr::OriginalName("NO_TURN")] NoTurn = 3,
  }

  public enum TeamPosition {
    [pbr::OriginalName("TEAM_POSITION_NONE")] None = 0,
    [pbr::OriginalName("HOME_TEAM")] HomeTeam = 1,
    [pbr::OriginalName("AWAY_TEAM")] AwayTeam = 2,
  }

  public enum MatchResult {
    [pbr::OriginalName("NoResult")] NoResult = 0,
    [pbr::OriginalName("Vicotry")] Vicotry = 1,
    [pbr::OriginalName("Defeat")] Defeat = 2,
    [pbr::OriginalName("Draw")] Draw = 3,
  }

  public enum DeadShotStatus {
    [pbr::OriginalName("NoStatus")] NoStatus = 0,
    [pbr::OriginalName("Inactive")] Inactive = 1,
    [pbr::OriginalName("Success")] Success = 2,
    [pbr::OriginalName("Failed")] Failed = 3,
  }

  public enum WicketType {
    [pbr::OriginalName("Invalid")] Invalid = 0,
    [pbr::OriginalName("Bowled")] Bowled = 1,
    [pbr::OriginalName("Catch")] Catch = 2,
  }

  public enum AnticipationType {
    [pbr::OriginalName("NoType")] NoType = 0,
    [pbr::OriginalName("HighProbabilitySixSuccess")] HighProbabilitySixSuccess = 1,
    [pbr::OriginalName("HighProbabilitySixMiss")] HighProbabilitySixMiss = 2,
    [pbr::OriginalName("HighProbabilityFourOut")] HighProbabilityFourOut = 3,
    [pbr::OriginalName("HighProbabilityFourMiss")] HighProbabilityFourMiss = 4,
    [pbr::OriginalName("AnticipationOut")] AnticipationOut = 5,
  }

  public enum ShotOutcomes {
    [pbr::OriginalName("NoOutcome")] NoOutcome = 0,
    [pbr::OriginalName("Hit")] Hit = 1,
    [pbr::OriginalName("Miss")] Miss = 2,
    [pbr::OriginalName("Wicket")] Wicket = 3,
  }

  public enum Emoji {
    [pbr::OriginalName("NoEmote")] NoEmote = 0,
    [pbr::OriginalName("EmoteHappy")] EmoteHappy = 1,
    [pbr::OriginalName("EmoteCool")] EmoteCool = 2,
    [pbr::OriginalName("EmoteAngry")] EmoteAngry = 3,
    [pbr::OriginalName("EmoteYawn")] EmoteYawn = 4,
    [pbr::OriginalName("EmoteSix")] EmoteSix = 5,
    [pbr::OriginalName("EmoteWicket")] EmoteWicket = 6,
  }

  public enum Messaging {
    [pbr::OriginalName("NoMessage")] NoMessage = 0,
    [pbr::OriginalName("MessageGG")] MessageGg = 1,
    [pbr::OriginalName("MessageWow")] MessageWow = 2,
    [pbr::OriginalName("MessageNice")] MessageNice = 3,
    [pbr::OriginalName("MessageHaha")] MessageHaha = 4,
    [pbr::OriginalName("MessageThanks")] MessageThanks = 5,
    [pbr::OriginalName("MessageGL")] MessageGl = 6,
  }

  public enum PlayStates {
    [pbr::OriginalName("NoPlay")] NoPlay = 0,
    [pbr::OriginalName("Batting")] Batting = 1,
    [pbr::OriginalName("Bowling")] Bowling = 2,
    [pbr::OriginalName("ForFeit")] ForFeit = 3,
  }

  public enum rarity {
    [pbr::OriginalName("NoRarity")] NoRarity = 0,
    [pbr::OriginalName("Common")] Common = 1,
    [pbr::OriginalName("Reliable")] Reliable = 2,
    [pbr::OriginalName("Brilliant")] Brilliant = 3,
    [pbr::OriginalName("WorldClass")] WorldClass = 4,
  }

  public enum classification {
    [pbr::OriginalName("NoClass")] NoClass = 0,
    [pbr::OriginalName("Batsman")] Batsman = 1,
    [pbr::OriginalName("Bowler")] Bowler = 2,
  }

  public enum gender {
    [pbr::OriginalName("NonBinary")] NonBinary = 0,
    [pbr::OriginalName("Male")] Male = 1,
    [pbr::OriginalName("Female")] Female = 2,
  }

  public enum batting_style {
    [pbr::OriginalName("RightHand")] RightHand = 0,
    [pbr::OriginalName("LeftHand")] LeftHand = 1,
  }

  public enum bowling_style {
    [pbr::OriginalName("Fast")] Fast = 0,
    [pbr::OriginalName("Spin")] Spin = 1,
    [pbr::OriginalName("NoBowlingStyle")] NoBowlingStyle = 3,
  }

  public enum Innings {
    [pbr::OriginalName("FIRST")] First = 0,
    [pbr::OriginalName("SECOND")] Second = 1,
  }

  public enum Events {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("OPP_JOINED")] OppJoined = 1,
    [pbr::OriginalName("MATCH_READY")] MatchReady = 2,
    [pbr::OriginalName("MATCH_CREATE_FAILED")] MatchCreateFailed = 3,
    [pbr::OriginalName("JOINED_MATCH")] JoinedMatch = 4,
    [pbr::OriginalName("MATCH_STARTED")] MatchStarted = 5,
    [pbr::OriginalName("MATCH_SCENE_LOADED")] MatchSceneLoaded = 6,
    [pbr::OriginalName("TOSS_START")] TossStart = 7,
    [pbr::OriginalName("TOSS_ACK")] TossAck = 8,
    [pbr::OriginalName("TOSS_RESULT")] TossResult = 9,
    [pbr::OriginalName("BAT_BALL_SELECTION")] BatBallSelection = 10,
    [pbr::OriginalName("MATCH_INNINGS_DETAILS")] MatchInningsDetails = 11,
    [pbr::OriginalName("INNINGS_INTRO")] InningsIntro = 12,
    [pbr::OriginalName("INNINGS_INTO_ACK")] InningsIntoAck = 13,
    [pbr::OriginalName("SERVER_INNINGS_READY")] ServerInningsReady = 14,
    [pbr::OriginalName("OPENERS_SELECTED")] OpenersSelected = 15,
    [pbr::OriginalName("CLIENT_INNINGS_READY")] ClientInningsReady = 16,
    [pbr::OriginalName("INNINGS_START")] InningsStart = 17,
    [pbr::OriginalName("INNINGS_START_ACK")] InningsStartAck = 18,
    [pbr::OriginalName("START_CURRENT_OVER")] StartCurrentOver = 19,
    [pbr::OriginalName("START_BALL_EVENT")] StartBallEvent = 20,
    [pbr::OriginalName("DELIVEIRES_DATA_CREATAED")] DeliveiresDataCreataed = 21,
    [pbr::OriginalName("DELIVERY_SELECTED")] DeliverySelected = 22,
    [pbr::OriginalName("SHOTS_DATA")] ShotsData = 23,
    [pbr::OriginalName("BRACKET_SELECTED")] BracketSelected = 24,
    [pbr::OriginalName("SHOT_RESULT")] ShotResult = 25,
    [pbr::OriginalName("OUTCOME_UPDATED_DATA")] OutcomeUpdatedData = 26,
    [pbr::OriginalName("SHOT_ANIMATIONS_FINISHED")] ShotAnimationsFinished = 27,
    [pbr::OriginalName("END_CURRENT_BALL_EVENT")] EndCurrentBallEvent = 28,
    [pbr::OriginalName("NEXT_BATSMAN_SELECTED")] NextBatsmanSelected = 29,
    [pbr::OriginalName("END_CURRENT_BALL_EVENT_ACK")] EndCurrentBallEventAck = 30,
    [pbr::OriginalName("END_CURRENT_OVER")] EndCurrentOver = 31,
    [pbr::OriginalName("NEXT_BOWLER_SELECTED")] NextBowlerSelected = 32,
    [pbr::OriginalName("END_OVER_ACK")] EndOverAck = 33,
    [pbr::OriginalName("PASSIVES_DATA")] PassivesData = 34,
    [pbr::OriginalName("UPDATE_LOCAL_PLAYER_STRENGTHS")] UpdateLocalPlayerStrengths = 35,
    [pbr::OriginalName("ACTIVATE_BATSMAN_SA")] ActivateBatsmanSa = 36,
    [pbr::OriginalName("BATSMAN_SA_ACTIVATED")] BatsmanSaActivated = 37,
    [pbr::OriginalName("ACTIVATE_BOWLER_SA")] ActivateBowlerSa = 38,
    [pbr::OriginalName("BOWLER_SA_ACTIVATED")] BowlerSaActivated = 39,
    [pbr::OriginalName("BATSMAN_INSTANT_SA_ACTIVATE")] BatsmanInstantSaActivate = 40,
    [pbr::OriginalName("BOWLER_INSTANT_SA_ACTIVATE")] BowlerInstantSaActivate = 41,
    [pbr::OriginalName("MATCH_MISSION_UPDATED")] MatchMissionUpdated = 42,
    [pbr::OriginalName("MATCH_ARENAS_UPDATED")] MatchArenasUpdated = 43,
    [pbr::OriginalName("END_FIRST_INNINGS")] EndFirstInnings = 44,
    [pbr::OriginalName("END_FIRST_INNINGS_ACK")] EndFirstInningsAck = 45,
    [pbr::OriginalName("END_MATCH")] EndMatch = 46,
    [pbr::OriginalName("ABORT_MATCH")] AbortMatch = 47,
    [pbr::OriginalName("FORFIET_MATCH")] ForfietMatch = 48,
    [pbr::OriginalName("REMATCH_JOIN")] RematchJoin = 49,
    [pbr::OriginalName("REMATCH_START")] RematchStart = 50,
    [pbr::OriginalName("TURN_START")] TurnStart = 51,
    [pbr::OriginalName("TURN_END")] TurnEnd = 52,
    [pbr::OriginalName("TURN_MISS")] TurnMiss = 53,
    [pbr::OriginalName("DISCONNECT_TIMER_DATA")] DisconnectTimerData = 54,
    [pbr::OriginalName("CHAT_EMOJI")] ChatEmoji = 55,
    [pbr::OriginalName("PING")] Ping = 56,
    [pbr::OriginalName("BATSMAN_INSTANT_SA_INACTIVATE")] BatsmanInstantSaInactivate = 57,
    [pbr::OriginalName("BOWLER_INSTANT_SA_INACTIVATE")] BowlerInstantSaInactivate = 68,
    [pbr::OriginalName("FIELDING_MODE_CHANGED")] FieldingModeChanged = 59,
    [pbr::OriginalName("DATA_UPDATE")] DataUpdate = 60,
    [pbr::OriginalName("SPECTATOR_JOINED")] SpectatorJoined = 61,
    [pbr::OriginalName("SPECTATOR_JOIN_ACK")] SpectatorJoinAck = 62,
    [pbr::OriginalName("FAST_MODE_SPEED_UP")] FastModeSpeedUp = 63,
    [pbr::OriginalName("FAST_MODE_SPEED_UP_ACK")] FastModeSpeedUpAck = 64,
    [pbr::OriginalName("THREAD_EXIT")] ThreadExit = 65,
    [pbr::OriginalName("MESSAGE")] Message = 66,
    [pbr::OriginalName("INNINGS_READY")] InningsReady = 67,
    [pbr::OriginalName("START_BALL_EVENT_ACK")] StartBallEventAck = 69,
    [pbr::OriginalName("RECONNECT")] Reconnect = 70,
    [pbr::OriginalName("CONNECT")] Connect = 71,
    [pbr::OriginalName("CONNECT_ACK")] ConnectAck = 72,
    [pbr::OriginalName("CONNECTED")] Connected = 73,
    [pbr::OriginalName("PONG")] Pong = 74,
    [pbr::OriginalName("RECONNECTED")] Reconnected = 75,
    [pbr::OriginalName("DISCONNECT")] Disconnect = 76,
    [pbr::OriginalName("CREATE_MATCH")] CreateMatch = 77,
    [pbr::OriginalName("EVENT_HISTORY")] EventHistory = 78,
    [pbr::OriginalName("MATCH_SCENE_LOADED_ACK")] MatchSceneLoadedAck = 79,
    [pbr::OriginalName("MATCH_NOT_FOUND")] MatchNotFound = 80,
    [pbr::OriginalName("UNSUPPORTED_VERSION")] UnsupportedVersion = 81,
    [pbr::OriginalName("REPLAY_SYNC")] ReplaySync = 82,
    [pbr::OriginalName("REPLAY_SYNC_ACK")] ReplaySyncAck = 83,
    [pbr::OriginalName("REPLAY_CONNECT")] ReplayConnect = 84,
    [pbr::OriginalName("REPLAY_CONNECT_ACK")] ReplayConnectAck = 85,
    [pbr::OriginalName("REPLAY_RESYNC")] ReplayResync = 86,
  }

  #endregion

  #region Messages
  public sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      event_ = other.event_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      turn_ = other.turn_;
      matchState_ = other.matchState_ != null ? other.matchState_.Clone() : null;
      emoji_ = other.emoji_;
      message_ = other.message_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      forTeam_ = other.forTeam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::Superstars.Payload.Events event_ = global::Superstars.Payload.Events.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Events Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Superstars.Payload.UserData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.UserData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "turn" field.</summary>
    public const int TurnFieldNumber = 3;
    private global::Superstars.Payload.TurnState turn_ = global::Superstars.Payload.TurnState.BattingTurn;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TurnState Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    /// <summary>Field number for the "match_state" field.</summary>
    public const int MatchStateFieldNumber = 4;
    private global::Superstars.Payload.Match matchState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Match MatchState {
      get { return matchState_; }
      set {
        matchState_ = value;
      }
    }

    /// <summary>Field number for the "emoji" field.</summary>
    public const int EmojiFieldNumber = 5;
    private global::Superstars.Payload.Emoji emoji_ = global::Superstars.Payload.Emoji.NoEmote;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Emoji Emoji {
      get { return emoji_; }
      set {
        emoji_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private global::Superstars.Payload.Messaging message_ = global::Superstars.Payload.Messaging.NoMessage;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Messaging Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private global::Superstars.Payload.Version version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "for_team" field.</summary>
    public const int ForTeamFieldNumber = 8;
    private global::Superstars.Payload.TeamPosition forTeam_ = global::Superstars.Payload.TeamPosition.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TeamPosition ForTeam {
      get { return forTeam_; }
      set {
        forTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Turn != other.Turn) return false;
      if (!object.Equals(MatchState, other.MatchState)) return false;
      if (Emoji != other.Emoji) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (ForTeam != other.ForTeam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event != global::Superstars.Payload.Events.None) hash ^= Event.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Turn != global::Superstars.Payload.TurnState.BattingTurn) hash ^= Turn.GetHashCode();
      if (matchState_ != null) hash ^= MatchState.GetHashCode();
      if (Emoji != global::Superstars.Payload.Emoji.NoEmote) hash ^= Emoji.GetHashCode();
      if (Message != global::Superstars.Payload.Messaging.NoMessage) hash ^= Message.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (ForTeam != global::Superstars.Payload.TeamPosition.None) hash ^= ForTeam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event != global::Superstars.Payload.Events.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Event);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (Turn != global::Superstars.Payload.TurnState.BattingTurn) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Turn);
      }
      if (matchState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MatchState);
      }
      if (Emoji != global::Superstars.Payload.Emoji.NoEmote) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Emoji);
      }
      if (Message != global::Superstars.Payload.Messaging.NoMessage) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Message);
      }
      if (version_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Version);
      }
      if (ForTeam != global::Superstars.Payload.TeamPosition.None) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ForTeam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event != global::Superstars.Payload.Events.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Turn != global::Superstars.Payload.TurnState.BattingTurn) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Turn);
      }
      if (matchState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchState);
      }
      if (Emoji != global::Superstars.Payload.Emoji.NoEmote) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Emoji);
      }
      if (Message != global::Superstars.Payload.Messaging.NoMessage) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Message);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (ForTeam != global::Superstars.Payload.TeamPosition.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ForTeam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.Event != global::Superstars.Payload.Events.None) {
        Event = other.Event;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Superstars.Payload.UserData();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Turn != global::Superstars.Payload.TurnState.BattingTurn) {
        Turn = other.Turn;
      }
      if (other.matchState_ != null) {
        if (matchState_ == null) {
          MatchState = new global::Superstars.Payload.Match();
        }
        MatchState.MergeFrom(other.MatchState);
      }
      if (other.Emoji != global::Superstars.Payload.Emoji.NoEmote) {
        Emoji = other.Emoji;
      }
      if (other.Message != global::Superstars.Payload.Messaging.NoMessage) {
        Message = other.Message;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Superstars.Payload.Version();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.ForTeam != global::Superstars.Payload.TeamPosition.None) {
        ForTeam = other.ForTeam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Event = (global::Superstars.Payload.Events) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Superstars.Payload.UserData();
            }
            input.ReadMessage(Data);
            break;
          }
          case 24: {
            Turn = (global::Superstars.Payload.TurnState) input.ReadEnum();
            break;
          }
          case 34: {
            if (matchState_ == null) {
              MatchState = new global::Superstars.Payload.Match();
            }
            input.ReadMessage(MatchState);
            break;
          }
          case 40: {
            Emoji = (global::Superstars.Payload.Emoji) input.ReadEnum();
            break;
          }
          case 48: {
            Message = (global::Superstars.Payload.Messaging) input.ReadEnum();
            break;
          }
          case 58: {
            if (version_ == null) {
              Version = new global::Superstars.Payload.Version();
            }
            input.ReadMessage(Version);
            break;
          }
          case 64: {
            ForTeam = (global::Superstars.Payload.TeamPosition) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      major_ = other.major_;
      minor_ = other.minor_;
      patch_ = other.patch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 1;
    private int major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Major {
      get { return major_; }
      set {
        major_ = value;
      }
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 2;
    private int minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minor {
      get { return minor_; }
      set {
        minor_ = value;
      }
    }

    /// <summary>Field number for the "patch" field.</summary>
    public const int PatchFieldNumber = 3;
    private int patch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Patch {
      get { return patch_; }
      set {
        patch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      if (Patch != other.Patch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Major != 0) hash ^= Major.GetHashCode();
      if (Minor != 0) hash ^= Minor.GetHashCode();
      if (Patch != 0) hash ^= Patch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Major != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (Minor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
      if (Patch != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Patch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Major != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
      }
      if (Minor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
      }
      if (Patch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Patch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Major != 0) {
        Major = other.Major;
      }
      if (other.Minor != 0) {
        Minor = other.Minor;
      }
      if (other.Patch != 0) {
        Patch = other.Patch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
          case 24: {
            Patch = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      userId_ = other.userId_;
      roomId_ = other.roomId_;
      opponentId_ = other.opponentId_;
      msg_ = other.msg_;
      homeLineup_ = other.homeLineup_.Clone();
      awayLineup_ = other.awayLineup_.Clone();
      playState_ = other.playState_;
      batsmanSelected_ = other.batsmanSelected_.Clone();
      bowlerSelected_ = other.bowlerSelected_;
      balls_ = other.balls_.Clone();
      shots_ = other.shots_.Clone();
      id_ = other.id_;
      selectedOnstrikeBatsmanId_ = other.selectedOnstrikeBatsmanId_;
      selectedOffstrikeBatsmanId_ = other.selectedOffstrikeBatsmanId_;
      selectedBowlerId_ = other.selectedBowlerId_;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      selectionTimeout_ = other.selectionTimeout_;
      playerSelectionTimeout_ = other.playerSelectionTimeout_;
      bufferForSelectionTimeout_ = other.bufferForSelectionTimeout_;
      pingPongTimeout_ = other.pingPongTimeout_;
      batsmanManaFilled_ = other.batsmanManaFilled_;
      bowlerManaFilled_ = other.bowlerManaFilled_;
      activatedSa_ = other.activatedSa_;
      saDuration_ = other.saDuration_;
      isRpsActive_ = other.isRpsActive_;
      onstrikePassivesInfo_ = other.onstrikePassivesInfo_.Clone();
      offstrikePassivesInfo_ = other.offstrikePassivesInfo_.Clone();
      bowlerPassivesInfo_ = other.bowlerPassivesInfo_.Clone();
      appliedEquipments_ = other.appliedEquipments_.Clone();
      bowlerAttributeBoosts_ = other.bowlerAttributeBoosts_ != null ? other.bowlerAttributeBoosts_.Clone() : null;
      onstrikeAttributeBoosts_ = other.onstrikeAttributeBoosts_ != null ? other.onstrikeAttributeBoosts_.Clone() : null;
      offstrikeAttributeBoosts_ = other.offstrikeAttributeBoosts_ != null ? other.offstrikeAttributeBoosts_.Clone() : null;
      selectionTimeRemaining_ = other.selectionTimeRemaining_;
      maxSelectionMisses_ = other.maxSelectionMisses_;
      selectionMisses_ = other.selectionMisses_;
      oppnentSelectionMisses_ = other.oppnentSelectionMisses_;
      selectionMissed_ = other.selectionMissed_;
      oppnentSelectionMissed_ = other.oppnentSelectionMissed_;
      startInningsTimeoutSeconds_ = other.startInningsTimeoutSeconds_;
      startInningsTimeRemaining_ = other.startInningsTimeRemaining_;
      matchResult_ = other.matchResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opponentId" field.</summary>
    public const int OpponentIdFieldNumber = 3;
    private string opponentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentId {
      get { return opponentId_; }
      set {
        opponentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 4;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "home_lineup" field.</summary>
    public const int HomeLineupFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Superstars.Payload.Player> _repeated_homeLineup_codec
        = pb::FieldCodec.ForMessage(42, global::Superstars.Payload.Player.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.Player> homeLineup_ = new pbc::RepeatedField<global::Superstars.Payload.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.Player> HomeLineup {
      get { return homeLineup_; }
    }

    /// <summary>Field number for the "away_lineup" field.</summary>
    public const int AwayLineupFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Superstars.Payload.Player> _repeated_awayLineup_codec
        = pb::FieldCodec.ForMessage(50, global::Superstars.Payload.Player.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.Player> awayLineup_ = new pbc::RepeatedField<global::Superstars.Payload.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.Player> AwayLineup {
      get { return awayLineup_; }
    }

    /// <summary>Field number for the "playState" field.</summary>
    public const int PlayStateFieldNumber = 7;
    private global::Superstars.Payload.PlayStates playState_ = global::Superstars.Payload.PlayStates.NoPlay;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.PlayStates PlayState {
      get { return playState_; }
      set {
        playState_ = value;
      }
    }

    /// <summary>Field number for the "batsman_selected" field.</summary>
    public const int BatsmanSelectedFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_batsmanSelected_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> batsmanSelected_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BatsmanSelected {
      get { return batsmanSelected_; }
    }

    /// <summary>Field number for the "bowler_selected" field.</summary>
    public const int BowlerSelectedFieldNumber = 9;
    private int bowlerSelected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlerSelected {
      get { return bowlerSelected_; }
      set {
        bowlerSelected_ = value;
      }
    }

    /// <summary>Field number for the "balls" field.</summary>
    public const int BallsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Superstars.Payload.TBall> _repeated_balls_codec
        = pb::FieldCodec.ForMessage(82, global::Superstars.Payload.TBall.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.TBall> balls_ = new pbc::RepeatedField<global::Superstars.Payload.TBall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.TBall> Balls {
      get { return balls_; }
    }

    /// <summary>Field number for the "shots" field.</summary>
    public const int ShotsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Superstars.Payload.TShot> _repeated_shots_codec
        = pb::FieldCodec.ForMessage(90, global::Superstars.Payload.TShot.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.TShot> shots_ = new pbc::RepeatedField<global::Superstars.Payload.TShot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.TShot> Shots {
      get { return shots_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 12;
    private int id_;
    /// <summary>
    ///Could be shot_id, ball_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "selected_onstrike_batsman_id" field.</summary>
    public const int SelectedOnstrikeBatsmanIdFieldNumber = 13;
    private int selectedOnstrikeBatsmanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedOnstrikeBatsmanId {
      get { return selectedOnstrikeBatsmanId_; }
      set {
        selectedOnstrikeBatsmanId_ = value;
      }
    }

    /// <summary>Field number for the "selected_offstrike_batsman_id" field.</summary>
    public const int SelectedOffstrikeBatsmanIdFieldNumber = 14;
    private int selectedOffstrikeBatsmanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedOffstrikeBatsmanId {
      get { return selectedOffstrikeBatsmanId_; }
      set {
        selectedOffstrikeBatsmanId_ = value;
      }
    }

    /// <summary>Field number for the "selected_bowler_id" field.</summary>
    public const int SelectedBowlerIdFieldNumber = 15;
    private int selectedBowlerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedBowlerId {
      get { return selectedBowlerId_; }
      set {
        selectedBowlerId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 16;
    private global::Superstars.Payload.TResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "selection_timeout" field.</summary>
    public const int SelectionTimeoutFieldNumber = 17;
    private int selectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectionTimeout {
      get { return selectionTimeout_; }
      set {
        selectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "player_selection_timeout" field.</summary>
    public const int PlayerSelectionTimeoutFieldNumber = 18;
    private int playerSelectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSelectionTimeout {
      get { return playerSelectionTimeout_; }
      set {
        playerSelectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "buffer_for_selection_timeout" field.</summary>
    public const int BufferForSelectionTimeoutFieldNumber = 19;
    private int bufferForSelectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferForSelectionTimeout {
      get { return bufferForSelectionTimeout_; }
      set {
        bufferForSelectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "ping_pong_timeout" field.</summary>
    public const int PingPongTimeoutFieldNumber = 20;
    private int pingPongTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PingPongTimeout {
      get { return pingPongTimeout_; }
      set {
        pingPongTimeout_ = value;
      }
    }

    /// <summary>Field number for the "batsman_mana_filled" field.</summary>
    public const int BatsmanManaFilledFieldNumber = 21;
    private int batsmanManaFilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatsmanManaFilled {
      get { return batsmanManaFilled_; }
      set {
        batsmanManaFilled_ = value;
      }
    }

    /// <summary>Field number for the "bowler_mana_filled" field.</summary>
    public const int BowlerManaFilledFieldNumber = 22;
    private int bowlerManaFilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlerManaFilled {
      get { return bowlerManaFilled_; }
      set {
        bowlerManaFilled_ = value;
      }
    }

    /// <summary>Field number for the "activated_sa" field.</summary>
    public const int ActivatedSaFieldNumber = 23;
    private int activatedSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivatedSa {
      get { return activatedSa_; }
      set {
        activatedSa_ = value;
      }
    }

    /// <summary>Field number for the "sa_duration" field.</summary>
    public const int SaDurationFieldNumber = 24;
    private int saDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaDuration {
      get { return saDuration_; }
      set {
        saDuration_ = value;
      }
    }

    /// <summary>Field number for the "is_rps_active" field.</summary>
    public const int IsRpsActiveFieldNumber = 25;
    private bool isRpsActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRpsActive {
      get { return isRpsActive_; }
      set {
        isRpsActive_ = value;
      }
    }

    /// <summary>Field number for the "onstrike_passives_info" field.</summary>
    public const int OnstrikePassivesInfoFieldNumber = 26;
    private static readonly pb::FieldCodec<global::Superstars.Payload.PassiveInfo> _repeated_onstrikePassivesInfo_codec
        = pb::FieldCodec.ForMessage(210, global::Superstars.Payload.PassiveInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> onstrikePassivesInfo_ = new pbc::RepeatedField<global::Superstars.Payload.PassiveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> OnstrikePassivesInfo {
      get { return onstrikePassivesInfo_; }
    }

    /// <summary>Field number for the "offstrike_passives_info" field.</summary>
    public const int OffstrikePassivesInfoFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Superstars.Payload.PassiveInfo> _repeated_offstrikePassivesInfo_codec
        = pb::FieldCodec.ForMessage(218, global::Superstars.Payload.PassiveInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> offstrikePassivesInfo_ = new pbc::RepeatedField<global::Superstars.Payload.PassiveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> OffstrikePassivesInfo {
      get { return offstrikePassivesInfo_; }
    }

    /// <summary>Field number for the "bowler_passives_info" field.</summary>
    public const int BowlerPassivesInfoFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Superstars.Payload.PassiveInfo> _repeated_bowlerPassivesInfo_codec
        = pb::FieldCodec.ForMessage(226, global::Superstars.Payload.PassiveInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> bowlerPassivesInfo_ = new pbc::RepeatedField<global::Superstars.Payload.PassiveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.PassiveInfo> BowlerPassivesInfo {
      get { return bowlerPassivesInfo_; }
    }

    /// <summary>Field number for the "applied_equipments" field.</summary>
    public const int AppliedEquipmentsFieldNumber = 29;
    private static readonly pb::FieldCodec<global::Superstars.Payload.EquipmentInfo> _repeated_appliedEquipments_codec
        = pb::FieldCodec.ForMessage(234, global::Superstars.Payload.EquipmentInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.EquipmentInfo> appliedEquipments_ = new pbc::RepeatedField<global::Superstars.Payload.EquipmentInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.EquipmentInfo> AppliedEquipments {
      get { return appliedEquipments_; }
    }

    /// <summary>Field number for the "bowler_attribute_boosts" field.</summary>
    public const int BowlerAttributeBoostsFieldNumber = 30;
    private global::Superstars.Payload.AttributeBoosts bowlerAttributeBoosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.AttributeBoosts BowlerAttributeBoosts {
      get { return bowlerAttributeBoosts_; }
      set {
        bowlerAttributeBoosts_ = value;
      }
    }

    /// <summary>Field number for the "onstrike_attribute_boosts" field.</summary>
    public const int OnstrikeAttributeBoostsFieldNumber = 31;
    private global::Superstars.Payload.AttributeBoosts onstrikeAttributeBoosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.AttributeBoosts OnstrikeAttributeBoosts {
      get { return onstrikeAttributeBoosts_; }
      set {
        onstrikeAttributeBoosts_ = value;
      }
    }

    /// <summary>Field number for the "offstrike_attribute_boosts" field.</summary>
    public const int OffstrikeAttributeBoostsFieldNumber = 32;
    private global::Superstars.Payload.AttributeBoosts offstrikeAttributeBoosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.AttributeBoosts OffstrikeAttributeBoosts {
      get { return offstrikeAttributeBoosts_; }
      set {
        offstrikeAttributeBoosts_ = value;
      }
    }

    /// <summary>Field number for the "selection_time_remaining" field.</summary>
    public const int SelectionTimeRemainingFieldNumber = 33;
    private int selectionTimeRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectionTimeRemaining {
      get { return selectionTimeRemaining_; }
      set {
        selectionTimeRemaining_ = value;
      }
    }

    /// <summary>Field number for the "max_selection_misses" field.</summary>
    public const int MaxSelectionMissesFieldNumber = 34;
    private int maxSelectionMisses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSelectionMisses {
      get { return maxSelectionMisses_; }
      set {
        maxSelectionMisses_ = value;
      }
    }

    /// <summary>Field number for the "selection_misses" field.</summary>
    public const int SelectionMissesFieldNumber = 35;
    private int selectionMisses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectionMisses {
      get { return selectionMisses_; }
      set {
        selectionMisses_ = value;
      }
    }

    /// <summary>Field number for the "oppnent_selection_misses" field.</summary>
    public const int OppnentSelectionMissesFieldNumber = 36;
    private int oppnentSelectionMisses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OppnentSelectionMisses {
      get { return oppnentSelectionMisses_; }
      set {
        oppnentSelectionMisses_ = value;
      }
    }

    /// <summary>Field number for the "selection_missed" field.</summary>
    public const int SelectionMissedFieldNumber = 37;
    private bool selectionMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelectionMissed {
      get { return selectionMissed_; }
      set {
        selectionMissed_ = value;
      }
    }

    /// <summary>Field number for the "oppnent_selection_missed" field.</summary>
    public const int OppnentSelectionMissedFieldNumber = 38;
    private bool oppnentSelectionMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OppnentSelectionMissed {
      get { return oppnentSelectionMissed_; }
      set {
        oppnentSelectionMissed_ = value;
      }
    }

    /// <summary>Field number for the "start_innings_timeout_seconds" field.</summary>
    public const int StartInningsTimeoutSecondsFieldNumber = 39;
    private int startInningsTimeoutSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartInningsTimeoutSeconds {
      get { return startInningsTimeoutSeconds_; }
      set {
        startInningsTimeoutSeconds_ = value;
      }
    }

    /// <summary>Field number for the "start_innings_time_remaining" field.</summary>
    public const int StartInningsTimeRemainingFieldNumber = 40;
    private int startInningsTimeRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartInningsTimeRemaining {
      get { return startInningsTimeRemaining_; }
      set {
        startInningsTimeRemaining_ = value;
      }
    }

    /// <summary>Field number for the "match_result" field.</summary>
    public const int MatchResultFieldNumber = 41;
    private global::Superstars.Payload.MatchResult matchResult_ = global::Superstars.Payload.MatchResult.NoResult;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.MatchResult MatchResult {
      get { return matchResult_; }
      set {
        matchResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoomId != other.RoomId) return false;
      if (OpponentId != other.OpponentId) return false;
      if (Msg != other.Msg) return false;
      if(!homeLineup_.Equals(other.homeLineup_)) return false;
      if(!awayLineup_.Equals(other.awayLineup_)) return false;
      if (PlayState != other.PlayState) return false;
      if(!batsmanSelected_.Equals(other.batsmanSelected_)) return false;
      if (BowlerSelected != other.BowlerSelected) return false;
      if(!balls_.Equals(other.balls_)) return false;
      if(!shots_.Equals(other.shots_)) return false;
      if (Id != other.Id) return false;
      if (SelectedOnstrikeBatsmanId != other.SelectedOnstrikeBatsmanId) return false;
      if (SelectedOffstrikeBatsmanId != other.SelectedOffstrikeBatsmanId) return false;
      if (SelectedBowlerId != other.SelectedBowlerId) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (SelectionTimeout != other.SelectionTimeout) return false;
      if (PlayerSelectionTimeout != other.PlayerSelectionTimeout) return false;
      if (BufferForSelectionTimeout != other.BufferForSelectionTimeout) return false;
      if (PingPongTimeout != other.PingPongTimeout) return false;
      if (BatsmanManaFilled != other.BatsmanManaFilled) return false;
      if (BowlerManaFilled != other.BowlerManaFilled) return false;
      if (ActivatedSa != other.ActivatedSa) return false;
      if (SaDuration != other.SaDuration) return false;
      if (IsRpsActive != other.IsRpsActive) return false;
      if(!onstrikePassivesInfo_.Equals(other.onstrikePassivesInfo_)) return false;
      if(!offstrikePassivesInfo_.Equals(other.offstrikePassivesInfo_)) return false;
      if(!bowlerPassivesInfo_.Equals(other.bowlerPassivesInfo_)) return false;
      if(!appliedEquipments_.Equals(other.appliedEquipments_)) return false;
      if (!object.Equals(BowlerAttributeBoosts, other.BowlerAttributeBoosts)) return false;
      if (!object.Equals(OnstrikeAttributeBoosts, other.OnstrikeAttributeBoosts)) return false;
      if (!object.Equals(OffstrikeAttributeBoosts, other.OffstrikeAttributeBoosts)) return false;
      if (SelectionTimeRemaining != other.SelectionTimeRemaining) return false;
      if (MaxSelectionMisses != other.MaxSelectionMisses) return false;
      if (SelectionMisses != other.SelectionMisses) return false;
      if (OppnentSelectionMisses != other.OppnentSelectionMisses) return false;
      if (SelectionMissed != other.SelectionMissed) return false;
      if (OppnentSelectionMissed != other.OppnentSelectionMissed) return false;
      if (StartInningsTimeoutSeconds != other.StartInningsTimeoutSeconds) return false;
      if (StartInningsTimeRemaining != other.StartInningsTimeRemaining) return false;
      if (MatchResult != other.MatchResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (OpponentId.Length != 0) hash ^= OpponentId.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      hash ^= homeLineup_.GetHashCode();
      hash ^= awayLineup_.GetHashCode();
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) hash ^= PlayState.GetHashCode();
      hash ^= batsmanSelected_.GetHashCode();
      if (BowlerSelected != 0) hash ^= BowlerSelected.GetHashCode();
      hash ^= balls_.GetHashCode();
      hash ^= shots_.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SelectedOnstrikeBatsmanId != 0) hash ^= SelectedOnstrikeBatsmanId.GetHashCode();
      if (SelectedOffstrikeBatsmanId != 0) hash ^= SelectedOffstrikeBatsmanId.GetHashCode();
      if (SelectedBowlerId != 0) hash ^= SelectedBowlerId.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (SelectionTimeout != 0) hash ^= SelectionTimeout.GetHashCode();
      if (PlayerSelectionTimeout != 0) hash ^= PlayerSelectionTimeout.GetHashCode();
      if (BufferForSelectionTimeout != 0) hash ^= BufferForSelectionTimeout.GetHashCode();
      if (PingPongTimeout != 0) hash ^= PingPongTimeout.GetHashCode();
      if (BatsmanManaFilled != 0) hash ^= BatsmanManaFilled.GetHashCode();
      if (BowlerManaFilled != 0) hash ^= BowlerManaFilled.GetHashCode();
      if (ActivatedSa != 0) hash ^= ActivatedSa.GetHashCode();
      if (SaDuration != 0) hash ^= SaDuration.GetHashCode();
      if (IsRpsActive != false) hash ^= IsRpsActive.GetHashCode();
      hash ^= onstrikePassivesInfo_.GetHashCode();
      hash ^= offstrikePassivesInfo_.GetHashCode();
      hash ^= bowlerPassivesInfo_.GetHashCode();
      hash ^= appliedEquipments_.GetHashCode();
      if (bowlerAttributeBoosts_ != null) hash ^= BowlerAttributeBoosts.GetHashCode();
      if (onstrikeAttributeBoosts_ != null) hash ^= OnstrikeAttributeBoosts.GetHashCode();
      if (offstrikeAttributeBoosts_ != null) hash ^= OffstrikeAttributeBoosts.GetHashCode();
      if (SelectionTimeRemaining != 0) hash ^= SelectionTimeRemaining.GetHashCode();
      if (MaxSelectionMisses != 0) hash ^= MaxSelectionMisses.GetHashCode();
      if (SelectionMisses != 0) hash ^= SelectionMisses.GetHashCode();
      if (OppnentSelectionMisses != 0) hash ^= OppnentSelectionMisses.GetHashCode();
      if (SelectionMissed != false) hash ^= SelectionMissed.GetHashCode();
      if (OppnentSelectionMissed != false) hash ^= OppnentSelectionMissed.GetHashCode();
      if (StartInningsTimeoutSeconds != 0) hash ^= StartInningsTimeoutSeconds.GetHashCode();
      if (StartInningsTimeRemaining != 0) hash ^= StartInningsTimeRemaining.GetHashCode();
      if (MatchResult != global::Superstars.Payload.MatchResult.NoResult) hash ^= MatchResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (OpponentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OpponentId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Msg);
      }
      homeLineup_.WriteTo(output, _repeated_homeLineup_codec);
      awayLineup_.WriteTo(output, _repeated_awayLineup_codec);
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PlayState);
      }
      batsmanSelected_.WriteTo(output, _repeated_batsmanSelected_codec);
      if (BowlerSelected != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BowlerSelected);
      }
      balls_.WriteTo(output, _repeated_balls_codec);
      shots_.WriteTo(output, _repeated_shots_codec);
      if (Id != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Id);
      }
      if (SelectedOnstrikeBatsmanId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SelectedOnstrikeBatsmanId);
      }
      if (SelectedOffstrikeBatsmanId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SelectedOffstrikeBatsmanId);
      }
      if (SelectedBowlerId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SelectedBowlerId);
      }
      if (result_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Result);
      }
      if (SelectionTimeout != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SelectionTimeout);
      }
      if (PlayerSelectionTimeout != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PlayerSelectionTimeout);
      }
      if (BufferForSelectionTimeout != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BufferForSelectionTimeout);
      }
      if (PingPongTimeout != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(PingPongTimeout);
      }
      if (BatsmanManaFilled != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BatsmanManaFilled);
      }
      if (BowlerManaFilled != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(BowlerManaFilled);
      }
      if (ActivatedSa != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ActivatedSa);
      }
      if (SaDuration != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SaDuration);
      }
      if (IsRpsActive != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsRpsActive);
      }
      onstrikePassivesInfo_.WriteTo(output, _repeated_onstrikePassivesInfo_codec);
      offstrikePassivesInfo_.WriteTo(output, _repeated_offstrikePassivesInfo_codec);
      bowlerPassivesInfo_.WriteTo(output, _repeated_bowlerPassivesInfo_codec);
      appliedEquipments_.WriteTo(output, _repeated_appliedEquipments_codec);
      if (bowlerAttributeBoosts_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(BowlerAttributeBoosts);
      }
      if (onstrikeAttributeBoosts_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(OnstrikeAttributeBoosts);
      }
      if (offstrikeAttributeBoosts_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(OffstrikeAttributeBoosts);
      }
      if (SelectionTimeRemaining != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SelectionTimeRemaining);
      }
      if (MaxSelectionMisses != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(MaxSelectionMisses);
      }
      if (SelectionMisses != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(SelectionMisses);
      }
      if (OppnentSelectionMisses != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(OppnentSelectionMisses);
      }
      if (SelectionMissed != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(SelectionMissed);
      }
      if (OppnentSelectionMissed != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(OppnentSelectionMissed);
      }
      if (StartInningsTimeoutSeconds != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(StartInningsTimeoutSeconds);
      }
      if (StartInningsTimeRemaining != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(StartInningsTimeRemaining);
      }
      if (MatchResult != global::Superstars.Payload.MatchResult.NoResult) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) MatchResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (OpponentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      size += homeLineup_.CalculateSize(_repeated_homeLineup_codec);
      size += awayLineup_.CalculateSize(_repeated_awayLineup_codec);
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayState);
      }
      size += batsmanSelected_.CalculateSize(_repeated_batsmanSelected_codec);
      if (BowlerSelected != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlerSelected);
      }
      size += balls_.CalculateSize(_repeated_balls_codec);
      size += shots_.CalculateSize(_repeated_shots_codec);
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SelectedOnstrikeBatsmanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedOnstrikeBatsmanId);
      }
      if (SelectedOffstrikeBatsmanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedOffstrikeBatsmanId);
      }
      if (SelectedBowlerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedBowlerId);
      }
      if (result_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (SelectionTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelectionTimeout);
      }
      if (PlayerSelectionTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerSelectionTimeout);
      }
      if (BufferForSelectionTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BufferForSelectionTimeout);
      }
      if (PingPongTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PingPongTimeout);
      }
      if (BatsmanManaFilled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BatsmanManaFilled);
      }
      if (BowlerManaFilled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BowlerManaFilled);
      }
      if (ActivatedSa != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActivatedSa);
      }
      if (SaDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SaDuration);
      }
      if (IsRpsActive != false) {
        size += 2 + 1;
      }
      size += onstrikePassivesInfo_.CalculateSize(_repeated_onstrikePassivesInfo_codec);
      size += offstrikePassivesInfo_.CalculateSize(_repeated_offstrikePassivesInfo_codec);
      size += bowlerPassivesInfo_.CalculateSize(_repeated_bowlerPassivesInfo_codec);
      size += appliedEquipments_.CalculateSize(_repeated_appliedEquipments_codec);
      if (bowlerAttributeBoosts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BowlerAttributeBoosts);
      }
      if (onstrikeAttributeBoosts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OnstrikeAttributeBoosts);
      }
      if (offstrikeAttributeBoosts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffstrikeAttributeBoosts);
      }
      if (SelectionTimeRemaining != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelectionTimeRemaining);
      }
      if (MaxSelectionMisses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxSelectionMisses);
      }
      if (SelectionMisses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelectionMisses);
      }
      if (OppnentSelectionMisses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OppnentSelectionMisses);
      }
      if (SelectionMissed != false) {
        size += 2 + 1;
      }
      if (OppnentSelectionMissed != false) {
        size += 2 + 1;
      }
      if (StartInningsTimeoutSeconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartInningsTimeoutSeconds);
      }
      if (StartInningsTimeRemaining != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartInningsTimeRemaining);
      }
      if (MatchResult != global::Superstars.Payload.MatchResult.NoResult) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MatchResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.OpponentId.Length != 0) {
        OpponentId = other.OpponentId;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      homeLineup_.Add(other.homeLineup_);
      awayLineup_.Add(other.awayLineup_);
      if (other.PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        PlayState = other.PlayState;
      }
      batsmanSelected_.Add(other.batsmanSelected_);
      if (other.BowlerSelected != 0) {
        BowlerSelected = other.BowlerSelected;
      }
      balls_.Add(other.balls_);
      shots_.Add(other.shots_);
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SelectedOnstrikeBatsmanId != 0) {
        SelectedOnstrikeBatsmanId = other.SelectedOnstrikeBatsmanId;
      }
      if (other.SelectedOffstrikeBatsmanId != 0) {
        SelectedOffstrikeBatsmanId = other.SelectedOffstrikeBatsmanId;
      }
      if (other.SelectedBowlerId != 0) {
        SelectedBowlerId = other.SelectedBowlerId;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Superstars.Payload.TResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.SelectionTimeout != 0) {
        SelectionTimeout = other.SelectionTimeout;
      }
      if (other.PlayerSelectionTimeout != 0) {
        PlayerSelectionTimeout = other.PlayerSelectionTimeout;
      }
      if (other.BufferForSelectionTimeout != 0) {
        BufferForSelectionTimeout = other.BufferForSelectionTimeout;
      }
      if (other.PingPongTimeout != 0) {
        PingPongTimeout = other.PingPongTimeout;
      }
      if (other.BatsmanManaFilled != 0) {
        BatsmanManaFilled = other.BatsmanManaFilled;
      }
      if (other.BowlerManaFilled != 0) {
        BowlerManaFilled = other.BowlerManaFilled;
      }
      if (other.ActivatedSa != 0) {
        ActivatedSa = other.ActivatedSa;
      }
      if (other.SaDuration != 0) {
        SaDuration = other.SaDuration;
      }
      if (other.IsRpsActive != false) {
        IsRpsActive = other.IsRpsActive;
      }
      onstrikePassivesInfo_.Add(other.onstrikePassivesInfo_);
      offstrikePassivesInfo_.Add(other.offstrikePassivesInfo_);
      bowlerPassivesInfo_.Add(other.bowlerPassivesInfo_);
      appliedEquipments_.Add(other.appliedEquipments_);
      if (other.bowlerAttributeBoosts_ != null) {
        if (bowlerAttributeBoosts_ == null) {
          BowlerAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
        }
        BowlerAttributeBoosts.MergeFrom(other.BowlerAttributeBoosts);
      }
      if (other.onstrikeAttributeBoosts_ != null) {
        if (onstrikeAttributeBoosts_ == null) {
          OnstrikeAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
        }
        OnstrikeAttributeBoosts.MergeFrom(other.OnstrikeAttributeBoosts);
      }
      if (other.offstrikeAttributeBoosts_ != null) {
        if (offstrikeAttributeBoosts_ == null) {
          OffstrikeAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
        }
        OffstrikeAttributeBoosts.MergeFrom(other.OffstrikeAttributeBoosts);
      }
      if (other.SelectionTimeRemaining != 0) {
        SelectionTimeRemaining = other.SelectionTimeRemaining;
      }
      if (other.MaxSelectionMisses != 0) {
        MaxSelectionMisses = other.MaxSelectionMisses;
      }
      if (other.SelectionMisses != 0) {
        SelectionMisses = other.SelectionMisses;
      }
      if (other.OppnentSelectionMisses != 0) {
        OppnentSelectionMisses = other.OppnentSelectionMisses;
      }
      if (other.SelectionMissed != false) {
        SelectionMissed = other.SelectionMissed;
      }
      if (other.OppnentSelectionMissed != false) {
        OppnentSelectionMissed = other.OppnentSelectionMissed;
      }
      if (other.StartInningsTimeoutSeconds != 0) {
        StartInningsTimeoutSeconds = other.StartInningsTimeoutSeconds;
      }
      if (other.StartInningsTimeRemaining != 0) {
        StartInningsTimeRemaining = other.StartInningsTimeRemaining;
      }
      if (other.MatchResult != global::Superstars.Payload.MatchResult.NoResult) {
        MatchResult = other.MatchResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            OpponentId = input.ReadString();
            break;
          }
          case 34: {
            Msg = input.ReadString();
            break;
          }
          case 42: {
            homeLineup_.AddEntriesFrom(input, _repeated_homeLineup_codec);
            break;
          }
          case 50: {
            awayLineup_.AddEntriesFrom(input, _repeated_awayLineup_codec);
            break;
          }
          case 56: {
            PlayState = (global::Superstars.Payload.PlayStates) input.ReadEnum();
            break;
          }
          case 66:
          case 64: {
            batsmanSelected_.AddEntriesFrom(input, _repeated_batsmanSelected_codec);
            break;
          }
          case 72: {
            BowlerSelected = input.ReadInt32();
            break;
          }
          case 82: {
            balls_.AddEntriesFrom(input, _repeated_balls_codec);
            break;
          }
          case 90: {
            shots_.AddEntriesFrom(input, _repeated_shots_codec);
            break;
          }
          case 96: {
            Id = input.ReadInt32();
            break;
          }
          case 104: {
            SelectedOnstrikeBatsmanId = input.ReadInt32();
            break;
          }
          case 112: {
            SelectedOffstrikeBatsmanId = input.ReadInt32();
            break;
          }
          case 120: {
            SelectedBowlerId = input.ReadInt32();
            break;
          }
          case 130: {
            if (result_ == null) {
              Result = new global::Superstars.Payload.TResult();
            }
            input.ReadMessage(Result);
            break;
          }
          case 136: {
            SelectionTimeout = input.ReadInt32();
            break;
          }
          case 144: {
            PlayerSelectionTimeout = input.ReadInt32();
            break;
          }
          case 152: {
            BufferForSelectionTimeout = input.ReadInt32();
            break;
          }
          case 160: {
            PingPongTimeout = input.ReadInt32();
            break;
          }
          case 168: {
            BatsmanManaFilled = input.ReadInt32();
            break;
          }
          case 176: {
            BowlerManaFilled = input.ReadInt32();
            break;
          }
          case 184: {
            ActivatedSa = input.ReadInt32();
            break;
          }
          case 192: {
            SaDuration = input.ReadInt32();
            break;
          }
          case 200: {
            IsRpsActive = input.ReadBool();
            break;
          }
          case 210: {
            onstrikePassivesInfo_.AddEntriesFrom(input, _repeated_onstrikePassivesInfo_codec);
            break;
          }
          case 218: {
            offstrikePassivesInfo_.AddEntriesFrom(input, _repeated_offstrikePassivesInfo_codec);
            break;
          }
          case 226: {
            bowlerPassivesInfo_.AddEntriesFrom(input, _repeated_bowlerPassivesInfo_codec);
            break;
          }
          case 234: {
            appliedEquipments_.AddEntriesFrom(input, _repeated_appliedEquipments_codec);
            break;
          }
          case 242: {
            if (bowlerAttributeBoosts_ == null) {
              BowlerAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
            }
            input.ReadMessage(BowlerAttributeBoosts);
            break;
          }
          case 250: {
            if (onstrikeAttributeBoosts_ == null) {
              OnstrikeAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
            }
            input.ReadMessage(OnstrikeAttributeBoosts);
            break;
          }
          case 258: {
            if (offstrikeAttributeBoosts_ == null) {
              OffstrikeAttributeBoosts = new global::Superstars.Payload.AttributeBoosts();
            }
            input.ReadMessage(OffstrikeAttributeBoosts);
            break;
          }
          case 264: {
            SelectionTimeRemaining = input.ReadInt32();
            break;
          }
          case 272: {
            MaxSelectionMisses = input.ReadInt32();
            break;
          }
          case 280: {
            SelectionMisses = input.ReadInt32();
            break;
          }
          case 288: {
            OppnentSelectionMisses = input.ReadInt32();
            break;
          }
          case 296: {
            SelectionMissed = input.ReadBool();
            break;
          }
          case 304: {
            OppnentSelectionMissed = input.ReadBool();
            break;
          }
          case 312: {
            StartInningsTimeoutSeconds = input.ReadInt32();
            break;
          }
          case 320: {
            StartInningsTimeRemaining = input.ReadInt32();
            break;
          }
          case 328: {
            MatchResult = (global::Superstars.Payload.MatchResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveInfo : pb::IMessage<PassiveInfo> {
    private static readonly pb::MessageParser<PassiveInfo> _parser = new pb::MessageParser<PassiveInfo>(() => new PassiveInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveInfo(PassiveInfo other) : this() {
      id_ = other.id_;
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveInfo Clone() {
      return new PassiveInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 2;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentInfo : pb::IMessage<EquipmentInfo> {
    private static readonly pb::MessageParser<EquipmentInfo> _parser = new pb::MessageParser<EquipmentInfo>(() => new EquipmentInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo(EquipmentInfo other) : this() {
      id_ = other.id_;
      bracket_ = other.bracket_;
      classification_ = other.classification_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentInfo Clone() {
      return new EquipmentInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "bracket" field.</summary>
    public const int BracketFieldNumber = 2;
    private int bracket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bracket {
      get { return bracket_; }
      set {
        bracket_ = value;
      }
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 3;
    private global::Superstars.Payload.classification classification_ = global::Superstars.Payload.classification.NoClass;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.classification Classification {
      get { return classification_; }
      set {
        classification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Bracket != other.Bracket) return false;
      if (Classification != other.Classification) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Bracket != 0) hash ^= Bracket.GetHashCode();
      if (Classification != global::Superstars.Payload.classification.NoClass) hash ^= Classification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Bracket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bracket);
      }
      if (Classification != global::Superstars.Payload.classification.NoClass) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Classification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Bracket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bracket);
      }
      if (Classification != global::Superstars.Payload.classification.NoClass) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Classification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Bracket != 0) {
        Bracket = other.Bracket;
      }
      if (other.Classification != global::Superstars.Payload.classification.NoClass) {
        Classification = other.Classification;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Bracket = input.ReadInt32();
            break;
          }
          case 24: {
            Classification = (global::Superstars.Payload.classification) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeBoosts : pb::IMessage<AttributeBoosts> {
    private static readonly pb::MessageParser<AttributeBoosts> _parser = new pb::MessageParser<AttributeBoosts>(() => new AttributeBoosts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeBoosts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBoosts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBoosts(AttributeBoosts other) : this() {
      lbRhbDebuff_ = other.lbRhbDebuff_;
      confidenceBoost_ = other.confidenceBoost_;
      passiveBoost_ = other.passiveBoost_;
      propsBoost_ = other.propsBoost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBoosts Clone() {
      return new AttributeBoosts(this);
    }

    /// <summary>Field number for the "lb_rhb_debuff" field.</summary>
    public const int LbRhbDebuffFieldNumber = 1;
    private double lbRhbDebuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LbRhbDebuff {
      get { return lbRhbDebuff_; }
      set {
        lbRhbDebuff_ = value;
      }
    }

    /// <summary>Field number for the "confidence_boost" field.</summary>
    public const int ConfidenceBoostFieldNumber = 2;
    private double confidenceBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConfidenceBoost {
      get { return confidenceBoost_; }
      set {
        confidenceBoost_ = value;
      }
    }

    /// <summary>Field number for the "passive_boost" field.</summary>
    public const int PassiveBoostFieldNumber = 3;
    private double passiveBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PassiveBoost {
      get { return passiveBoost_; }
      set {
        passiveBoost_ = value;
      }
    }

    /// <summary>Field number for the "props_boost" field.</summary>
    public const int PropsBoostFieldNumber = 4;
    private double propsBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PropsBoost {
      get { return propsBoost_; }
      set {
        propsBoost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeBoosts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeBoosts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LbRhbDebuff, other.LbRhbDebuff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConfidenceBoost, other.ConfidenceBoost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PassiveBoost, other.PassiveBoost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PropsBoost, other.PropsBoost)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LbRhbDebuff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LbRhbDebuff);
      if (ConfidenceBoost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConfidenceBoost);
      if (PassiveBoost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PassiveBoost);
      if (PropsBoost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PropsBoost);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LbRhbDebuff != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LbRhbDebuff);
      }
      if (ConfidenceBoost != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ConfidenceBoost);
      }
      if (PassiveBoost != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PassiveBoost);
      }
      if (PropsBoost != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PropsBoost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LbRhbDebuff != 0D) {
        size += 1 + 8;
      }
      if (ConfidenceBoost != 0D) {
        size += 1 + 8;
      }
      if (PassiveBoost != 0D) {
        size += 1 + 8;
      }
      if (PropsBoost != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeBoosts other) {
      if (other == null) {
        return;
      }
      if (other.LbRhbDebuff != 0D) {
        LbRhbDebuff = other.LbRhbDebuff;
      }
      if (other.ConfidenceBoost != 0D) {
        ConfidenceBoost = other.ConfidenceBoost;
      }
      if (other.PassiveBoost != 0D) {
        PassiveBoost = other.PassiveBoost;
      }
      if (other.PropsBoost != 0D) {
        PropsBoost = other.PropsBoost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            LbRhbDebuff = input.ReadDouble();
            break;
          }
          case 17: {
            ConfidenceBoost = input.ReadDouble();
            break;
          }
          case 25: {
            PassiveBoost = input.ReadDouble();
            break;
          }
          case 33: {
            PropsBoost = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TShot : pb::IMessage<TShot> {
    private static readonly pb::MessageParser<TShot> _parser = new pb::MessageParser<TShot>(() => new TShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TShot(TShot other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      run_ = other.run_;
      bracket_ = other.bracket_;
      probability_ = other.probability_;
      locked_ = other.locked_;
      shotHidden_ = other.shotHidden_;
      probabilityHidden_ = other.probabilityHidden_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TShot Clone() {
      return new TShot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run" field.</summary>
    public const int RunFieldNumber = 3;
    private int run_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Run {
      get { return run_; }
      set {
        run_ = value;
      }
    }

    /// <summary>Field number for the "bracket" field.</summary>
    public const int BracketFieldNumber = 4;
    private int bracket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bracket {
      get { return bracket_; }
      set {
        bracket_ = value;
      }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 5;
    private double probability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 6;
    private bool locked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "shot_hidden" field.</summary>
    public const int ShotHiddenFieldNumber = 7;
    private bool shotHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShotHidden {
      get { return shotHidden_; }
      set {
        shotHidden_ = value;
      }
    }

    /// <summary>Field number for the "probability_hidden" field.</summary>
    public const int ProbabilityHiddenFieldNumber = 8;
    private bool probabilityHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProbabilityHidden {
      get { return probabilityHidden_; }
      set {
        probabilityHidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Run != other.Run) return false;
      if (Bracket != other.Bracket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Probability, other.Probability)) return false;
      if (Locked != other.Locked) return false;
      if (ShotHidden != other.ShotHidden) return false;
      if (ProbabilityHidden != other.ProbabilityHidden) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Run != 0) hash ^= Run.GetHashCode();
      if (Bracket != 0) hash ^= Bracket.GetHashCode();
      if (Probability != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Probability);
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (ShotHidden != false) hash ^= ShotHidden.GetHashCode();
      if (ProbabilityHidden != false) hash ^= ProbabilityHidden.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Run != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Run);
      }
      if (Bracket != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bracket);
      }
      if (Probability != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Probability);
      }
      if (Locked != false) {
        output.WriteRawTag(48);
        output.WriteBool(Locked);
      }
      if (ShotHidden != false) {
        output.WriteRawTag(56);
        output.WriteBool(ShotHidden);
      }
      if (ProbabilityHidden != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProbabilityHidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Run != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Run);
      }
      if (Bracket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bracket);
      }
      if (Probability != 0D) {
        size += 1 + 8;
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (ShotHidden != false) {
        size += 1 + 1;
      }
      if (ProbabilityHidden != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TShot other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Run != 0) {
        Run = other.Run;
      }
      if (other.Bracket != 0) {
        Bracket = other.Bracket;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.ShotHidden != false) {
        ShotHidden = other.ShotHidden;
      }
      if (other.ProbabilityHidden != false) {
        ProbabilityHidden = other.ProbabilityHidden;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Run = input.ReadInt32();
            break;
          }
          case 32: {
            Bracket = input.ReadInt32();
            break;
          }
          case 41: {
            Probability = input.ReadDouble();
            break;
          }
          case 48: {
            Locked = input.ReadBool();
            break;
          }
          case 56: {
            ShotHidden = input.ReadBool();
            break;
          }
          case 64: {
            ProbabilityHidden = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TSaInfo : pb::IMessage<TSaInfo> {
    private static readonly pb::MessageParser<TSaInfo> _parser = new pb::MessageParser<TSaInfo>(() => new TSaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSaInfo(TSaInfo other) : this() {
      deadShotStatus_ = other.deadShotStatus_;
      batsmanActiveSa_ = other.batsmanActiveSa_;
      bowlerActiveSa_ = other.bowlerActiveSa_;
      immortalWicketButMiss_ = other.immortalWicketButMiss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSaInfo Clone() {
      return new TSaInfo(this);
    }

    /// <summary>Field number for the "dead_shot_status" field.</summary>
    public const int DeadShotStatusFieldNumber = 1;
    private global::Superstars.Payload.DeadShotStatus deadShotStatus_ = global::Superstars.Payload.DeadShotStatus.NoStatus;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.DeadShotStatus DeadShotStatus {
      get { return deadShotStatus_; }
      set {
        deadShotStatus_ = value;
      }
    }

    /// <summary>Field number for the "batsman_active_sa" field.</summary>
    public const int BatsmanActiveSaFieldNumber = 2;
    private int batsmanActiveSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatsmanActiveSa {
      get { return batsmanActiveSa_; }
      set {
        batsmanActiveSa_ = value;
      }
    }

    /// <summary>Field number for the "bowler_active_sa" field.</summary>
    public const int BowlerActiveSaFieldNumber = 3;
    private int bowlerActiveSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlerActiveSa {
      get { return bowlerActiveSa_; }
      set {
        bowlerActiveSa_ = value;
      }
    }

    /// <summary>Field number for the "immortal_wicket_but_miss" field.</summary>
    public const int ImmortalWicketButMissFieldNumber = 4;
    private bool immortalWicketButMiss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ImmortalWicketButMiss {
      get { return immortalWicketButMiss_; }
      set {
        immortalWicketButMiss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeadShotStatus != other.DeadShotStatus) return false;
      if (BatsmanActiveSa != other.BatsmanActiveSa) return false;
      if (BowlerActiveSa != other.BowlerActiveSa) return false;
      if (ImmortalWicketButMiss != other.ImmortalWicketButMiss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeadShotStatus != global::Superstars.Payload.DeadShotStatus.NoStatus) hash ^= DeadShotStatus.GetHashCode();
      if (BatsmanActiveSa != 0) hash ^= BatsmanActiveSa.GetHashCode();
      if (BowlerActiveSa != 0) hash ^= BowlerActiveSa.GetHashCode();
      if (ImmortalWicketButMiss != false) hash ^= ImmortalWicketButMiss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeadShotStatus != global::Superstars.Payload.DeadShotStatus.NoStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DeadShotStatus);
      }
      if (BatsmanActiveSa != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BatsmanActiveSa);
      }
      if (BowlerActiveSa != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BowlerActiveSa);
      }
      if (ImmortalWicketButMiss != false) {
        output.WriteRawTag(32);
        output.WriteBool(ImmortalWicketButMiss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeadShotStatus != global::Superstars.Payload.DeadShotStatus.NoStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeadShotStatus);
      }
      if (BatsmanActiveSa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatsmanActiveSa);
      }
      if (BowlerActiveSa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlerActiveSa);
      }
      if (ImmortalWicketButMiss != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSaInfo other) {
      if (other == null) {
        return;
      }
      if (other.DeadShotStatus != global::Superstars.Payload.DeadShotStatus.NoStatus) {
        DeadShotStatus = other.DeadShotStatus;
      }
      if (other.BatsmanActiveSa != 0) {
        BatsmanActiveSa = other.BatsmanActiveSa;
      }
      if (other.BowlerActiveSa != 0) {
        BowlerActiveSa = other.BowlerActiveSa;
      }
      if (other.ImmortalWicketButMiss != false) {
        ImmortalWicketButMiss = other.ImmortalWicketButMiss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeadShotStatus = (global::Superstars.Payload.DeadShotStatus) input.ReadEnum();
            break;
          }
          case 16: {
            BatsmanActiveSa = input.ReadInt32();
            break;
          }
          case 24: {
            BowlerActiveSa = input.ReadInt32();
            break;
          }
          case 32: {
            ImmortalWicketButMiss = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TResult : pb::IMessage<TResult> {
    private static readonly pb::MessageParser<TResult> _parser = new pb::MessageParser<TResult>(() => new TResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TResult(TResult other) : this() {
      totalRuns_ = other.totalRuns_;
      totalBalls_ = other.totalBalls_;
      totalWicketTaken_ = other.totalWicketTaken_;
      runsScored_ = other.runsScored_;
      originalRunsScored_ = other.originalRunsScored_;
      overBallNumber_ = other.overBallNumber_;
      overNumber_ = other.overNumber_;
      bracketId_ = other.bracketId_;
      outcome_ = other.outcome_;
      type_ = other.type_;
      anticipationType_ = other.anticipationType_;
      inning_ = other.inning_;
      saInfo_ = other.saInfo_ != null ? other.saInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TResult Clone() {
      return new TResult(this);
    }

    /// <summary>Field number for the "total_runs" field.</summary>
    public const int TotalRunsFieldNumber = 1;
    private int totalRuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRuns {
      get { return totalRuns_; }
      set {
        totalRuns_ = value;
      }
    }

    /// <summary>Field number for the "total_balls" field.</summary>
    public const int TotalBallsFieldNumber = 2;
    private int totalBalls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalBalls {
      get { return totalBalls_; }
      set {
        totalBalls_ = value;
      }
    }

    /// <summary>Field number for the "total_wicket_taken" field.</summary>
    public const int TotalWicketTakenFieldNumber = 3;
    private int totalWicketTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWicketTaken {
      get { return totalWicketTaken_; }
      set {
        totalWicketTaken_ = value;
      }
    }

    /// <summary>Field number for the "runs_scored" field.</summary>
    public const int RunsScoredFieldNumber = 4;
    private int runsScored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunsScored {
      get { return runsScored_; }
      set {
        runsScored_ = value;
      }
    }

    /// <summary>Field number for the "original_runs_scored" field.</summary>
    public const int OriginalRunsScoredFieldNumber = 5;
    private int originalRunsScored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalRunsScored {
      get { return originalRunsScored_; }
      set {
        originalRunsScored_ = value;
      }
    }

    /// <summary>Field number for the "over_ball_number" field.</summary>
    public const int OverBallNumberFieldNumber = 6;
    private int overBallNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBallNumber {
      get { return overBallNumber_; }
      set {
        overBallNumber_ = value;
      }
    }

    /// <summary>Field number for the "over_number" field.</summary>
    public const int OverNumberFieldNumber = 7;
    private int overNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverNumber {
      get { return overNumber_; }
      set {
        overNumber_ = value;
      }
    }

    /// <summary>Field number for the "bracket_id" field.</summary>
    public const int BracketIdFieldNumber = 8;
    private int bracketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BracketId {
      get { return bracketId_; }
      set {
        bracketId_ = value;
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 9;
    private global::Superstars.Payload.ShotOutcomes outcome_ = global::Superstars.Payload.ShotOutcomes.NoOutcome;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.ShotOutcomes Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private global::Superstars.Payload.WicketType type_ = global::Superstars.Payload.WicketType.Invalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.WicketType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "anticipation_type" field.</summary>
    public const int AnticipationTypeFieldNumber = 11;
    private global::Superstars.Payload.AnticipationType anticipationType_ = global::Superstars.Payload.AnticipationType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.AnticipationType AnticipationType {
      get { return anticipationType_; }
      set {
        anticipationType_ = value;
      }
    }

    /// <summary>Field number for the "inning" field.</summary>
    public const int InningFieldNumber = 12;
    private global::Superstars.Payload.Innings inning_ = global::Superstars.Payload.Innings.First;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Innings Inning {
      get { return inning_; }
      set {
        inning_ = value;
      }
    }

    /// <summary>Field number for the "sa_info" field.</summary>
    public const int SaInfoFieldNumber = 13;
    private global::Superstars.Payload.TSaInfo saInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TSaInfo SaInfo {
      get { return saInfo_; }
      set {
        saInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRuns != other.TotalRuns) return false;
      if (TotalBalls != other.TotalBalls) return false;
      if (TotalWicketTaken != other.TotalWicketTaken) return false;
      if (RunsScored != other.RunsScored) return false;
      if (OriginalRunsScored != other.OriginalRunsScored) return false;
      if (OverBallNumber != other.OverBallNumber) return false;
      if (OverNumber != other.OverNumber) return false;
      if (BracketId != other.BracketId) return false;
      if (Outcome != other.Outcome) return false;
      if (Type != other.Type) return false;
      if (AnticipationType != other.AnticipationType) return false;
      if (Inning != other.Inning) return false;
      if (!object.Equals(SaInfo, other.SaInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRuns != 0) hash ^= TotalRuns.GetHashCode();
      if (TotalBalls != 0) hash ^= TotalBalls.GetHashCode();
      if (TotalWicketTaken != 0) hash ^= TotalWicketTaken.GetHashCode();
      if (RunsScored != 0) hash ^= RunsScored.GetHashCode();
      if (OriginalRunsScored != 0) hash ^= OriginalRunsScored.GetHashCode();
      if (OverBallNumber != 0) hash ^= OverBallNumber.GetHashCode();
      if (OverNumber != 0) hash ^= OverNumber.GetHashCode();
      if (BracketId != 0) hash ^= BracketId.GetHashCode();
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) hash ^= Outcome.GetHashCode();
      if (Type != global::Superstars.Payload.WicketType.Invalid) hash ^= Type.GetHashCode();
      if (AnticipationType != global::Superstars.Payload.AnticipationType.NoType) hash ^= AnticipationType.GetHashCode();
      if (Inning != global::Superstars.Payload.Innings.First) hash ^= Inning.GetHashCode();
      if (saInfo_ != null) hash ^= SaInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalRuns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRuns);
      }
      if (TotalBalls != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalBalls);
      }
      if (TotalWicketTaken != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalWicketTaken);
      }
      if (RunsScored != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RunsScored);
      }
      if (OriginalRunsScored != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OriginalRunsScored);
      }
      if (OverBallNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OverBallNumber);
      }
      if (OverNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OverNumber);
      }
      if (BracketId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BracketId);
      }
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Outcome);
      }
      if (Type != global::Superstars.Payload.WicketType.Invalid) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (AnticipationType != global::Superstars.Payload.AnticipationType.NoType) {
        output.WriteRawTag(88);
        output.WriteEnum((int) AnticipationType);
      }
      if (Inning != global::Superstars.Payload.Innings.First) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Inning);
      }
      if (saInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SaInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalRuns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRuns);
      }
      if (TotalBalls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBalls);
      }
      if (TotalWicketTaken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWicketTaken);
      }
      if (RunsScored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunsScored);
      }
      if (OriginalRunsScored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalRunsScored);
      }
      if (OverBallNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBallNumber);
      }
      if (OverNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverNumber);
      }
      if (BracketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BracketId);
      }
      if (Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      if (Type != global::Superstars.Payload.WicketType.Invalid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (AnticipationType != global::Superstars.Payload.AnticipationType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnticipationType);
      }
      if (Inning != global::Superstars.Payload.Innings.First) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Inning);
      }
      if (saInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TResult other) {
      if (other == null) {
        return;
      }
      if (other.TotalRuns != 0) {
        TotalRuns = other.TotalRuns;
      }
      if (other.TotalBalls != 0) {
        TotalBalls = other.TotalBalls;
      }
      if (other.TotalWicketTaken != 0) {
        TotalWicketTaken = other.TotalWicketTaken;
      }
      if (other.RunsScored != 0) {
        RunsScored = other.RunsScored;
      }
      if (other.OriginalRunsScored != 0) {
        OriginalRunsScored = other.OriginalRunsScored;
      }
      if (other.OverBallNumber != 0) {
        OverBallNumber = other.OverBallNumber;
      }
      if (other.OverNumber != 0) {
        OverNumber = other.OverNumber;
      }
      if (other.BracketId != 0) {
        BracketId = other.BracketId;
      }
      if (other.Outcome != global::Superstars.Payload.ShotOutcomes.NoOutcome) {
        Outcome = other.Outcome;
      }
      if (other.Type != global::Superstars.Payload.WicketType.Invalid) {
        Type = other.Type;
      }
      if (other.AnticipationType != global::Superstars.Payload.AnticipationType.NoType) {
        AnticipationType = other.AnticipationType;
      }
      if (other.Inning != global::Superstars.Payload.Innings.First) {
        Inning = other.Inning;
      }
      if (other.saInfo_ != null) {
        if (saInfo_ == null) {
          SaInfo = new global::Superstars.Payload.TSaInfo();
        }
        SaInfo.MergeFrom(other.SaInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalRuns = input.ReadInt32();
            break;
          }
          case 16: {
            TotalBalls = input.ReadInt32();
            break;
          }
          case 24: {
            TotalWicketTaken = input.ReadInt32();
            break;
          }
          case 32: {
            RunsScored = input.ReadInt32();
            break;
          }
          case 40: {
            OriginalRunsScored = input.ReadInt32();
            break;
          }
          case 48: {
            OverBallNumber = input.ReadInt32();
            break;
          }
          case 56: {
            OverNumber = input.ReadInt32();
            break;
          }
          case 64: {
            BracketId = input.ReadInt32();
            break;
          }
          case 72: {
            Outcome = (global::Superstars.Payload.ShotOutcomes) input.ReadEnum();
            break;
          }
          case 80: {
            Type = (global::Superstars.Payload.WicketType) input.ReadEnum();
            break;
          }
          case 88: {
            AnticipationType = (global::Superstars.Payload.AnticipationType) input.ReadEnum();
            break;
          }
          case 96: {
            Inning = (global::Superstars.Payload.Innings) input.ReadEnum();
            break;
          }
          case 106: {
            if (saInfo_ == null) {
              SaInfo = new global::Superstars.Payload.TSaInfo();
            }
            input.ReadMessage(SaInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShotsPossible : pb::IMessage<ShotsPossible> {
    private static readonly pb::MessageParser<ShotsPossible> _parser = new pb::MessageParser<ShotsPossible>(() => new ShotsPossible());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShotsPossible> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotsPossible() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotsPossible(ShotsPossible other) : this() {
      bracketId_ = other.bracketId_;
      shotId_ = other.shotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotsPossible Clone() {
      return new ShotsPossible(this);
    }

    /// <summary>Field number for the "bracket_id" field.</summary>
    public const int BracketIdFieldNumber = 1;
    private int bracketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BracketId {
      get { return bracketId_; }
      set {
        bracketId_ = value;
      }
    }

    /// <summary>Field number for the "shot_id" field.</summary>
    public const int ShotIdFieldNumber = 2;
    private int shotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotId {
      get { return shotId_; }
      set {
        shotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShotsPossible);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShotsPossible other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BracketId != other.BracketId) return false;
      if (ShotId != other.ShotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BracketId != 0) hash ^= BracketId.GetHashCode();
      if (ShotId != 0) hash ^= ShotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BracketId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BracketId);
      }
      if (ShotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BracketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BracketId);
      }
      if (ShotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShotsPossible other) {
      if (other == null) {
        return;
      }
      if (other.BracketId != 0) {
        BracketId = other.BracketId;
      }
      if (other.ShotId != 0) {
        ShotId = other.ShotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BracketId = input.ReadInt32();
            break;
          }
          case 16: {
            ShotId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TBall : pb::IMessage<TBall> {
    private static readonly pb::MessageParser<TBall> _parser = new pb::MessageParser<TBall>(() => new TBall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TBall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TBall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TBall(TBall other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      value_ = other.value_;
      skulls_ = other.skulls_;
      shotsPossible_ = other.shotsPossible_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TBall Clone() {
      return new TBall(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "skulls" field.</summary>
    public const int SkullsFieldNumber = 4;
    private int skulls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skulls {
      get { return skulls_; }
      set {
        skulls_ = value;
      }
    }

    /// <summary>Field number for the "shots_possible" field.</summary>
    public const int ShotsPossibleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Superstars.Payload.ShotsPossible> _repeated_shotsPossible_codec
        = pb::FieldCodec.ForMessage(42, global::Superstars.Payload.ShotsPossible.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.ShotsPossible> shotsPossible_ = new pbc::RepeatedField<global::Superstars.Payload.ShotsPossible>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.ShotsPossible> ShotsPossible {
      get { return shotsPossible_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TBall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TBall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Skulls != other.Skulls) return false;
      if(!shotsPossible_.Equals(other.shotsPossible_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Skulls != 0) hash ^= Skulls.GetHashCode();
      hash ^= shotsPossible_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (Skulls != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Skulls);
      }
      shotsPossible_.WriteTo(output, _repeated_shotsPossible_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Skulls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skulls);
      }
      size += shotsPossible_.CalculateSize(_repeated_shotsPossible_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TBall other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Skulls != 0) {
        Skulls = other.Skulls;
      }
      shotsPossible_.Add(other.shotsPossible_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
          case 32: {
            Skulls = input.ReadInt32();
            break;
          }
          case 42: {
            shotsPossible_.AddEntriesFrom(input, _repeated_shotsPossible_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      characterId_ = other.characterId_;
      nickname_ = other.nickname_;
      rarity_ = other.rarity_;
      imageNumber_ = other.imageNumber_;
      classification_ = other.classification_;
      gender_ = other.gender_;
      power_ = other.power_;
      battingStyle_ = other.battingStyle_;
      bowlingStyle_ = other.bowlingStyle_;
      level_ = other.level_;
      lineupNumber_ = other.lineupNumber_;
      isOut_ = other.isOut_;
      equipmentSlots_ = other.equipmentSlots_.Clone();
      props_ = other.props_.Clone();
      passives_ = other.passives_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "character_id" field.</summary>
    public const int CharacterIdFieldNumber = 1;
    private int characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 3;
    private global::Superstars.Payload.rarity rarity_ = global::Superstars.Payload.rarity.NoRarity;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.rarity Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "image_number" field.</summary>
    public const int ImageNumberFieldNumber = 4;
    private int imageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageNumber {
      get { return imageNumber_; }
      set {
        imageNumber_ = value;
      }
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 5;
    private global::Superstars.Payload.classification classification_ = global::Superstars.Payload.classification.NoClass;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.classification Classification {
      get { return classification_; }
      set {
        classification_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private global::Superstars.Payload.gender gender_ = global::Superstars.Payload.gender.NonBinary;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 7;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "batting_style" field.</summary>
    public const int BattingStyleFieldNumber = 8;
    private global::Superstars.Payload.batting_style battingStyle_ = global::Superstars.Payload.batting_style.RightHand;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.batting_style BattingStyle {
      get { return battingStyle_; }
      set {
        battingStyle_ = value;
      }
    }

    /// <summary>Field number for the "bowling_style" field.</summary>
    public const int BowlingStyleFieldNumber = 9;
    private global::Superstars.Payload.bowling_style bowlingStyle_ = global::Superstars.Payload.bowling_style.Fast;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.bowling_style BowlingStyle {
      get { return bowlingStyle_; }
      set {
        bowlingStyle_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "lineup_number" field.</summary>
    public const int LineupNumberFieldNumber = 11;
    private int lineupNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineupNumber {
      get { return lineupNumber_; }
      set {
        lineupNumber_ = value;
      }
    }

    /// <summary>Field number for the "is_out" field.</summary>
    public const int IsOutFieldNumber = 12;
    private bool isOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOut {
      get { return isOut_; }
      set {
        isOut_ = value;
      }
    }

    /// <summary>Field number for the "equipment_slots" field.</summary>
    public const int EquipmentSlotsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_equipmentSlots_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> equipmentSlots_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipmentSlots {
      get { return equipmentSlots_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_props_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> props_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "passives" field.</summary>
    public const int PassivesFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_passives_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> passives_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Passives {
      get { return passives_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterId != other.CharacterId) return false;
      if (Nickname != other.Nickname) return false;
      if (Rarity != other.Rarity) return false;
      if (ImageNumber != other.ImageNumber) return false;
      if (Classification != other.Classification) return false;
      if (Gender != other.Gender) return false;
      if (Power != other.Power) return false;
      if (BattingStyle != other.BattingStyle) return false;
      if (BowlingStyle != other.BowlingStyle) return false;
      if (Level != other.Level) return false;
      if (LineupNumber != other.LineupNumber) return false;
      if (IsOut != other.IsOut) return false;
      if(!equipmentSlots_.Equals(other.equipmentSlots_)) return false;
      if(!props_.Equals(other.props_)) return false;
      if(!passives_.Equals(other.passives_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterId != 0) hash ^= CharacterId.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Rarity != global::Superstars.Payload.rarity.NoRarity) hash ^= Rarity.GetHashCode();
      if (ImageNumber != 0) hash ^= ImageNumber.GetHashCode();
      if (Classification != global::Superstars.Payload.classification.NoClass) hash ^= Classification.GetHashCode();
      if (Gender != global::Superstars.Payload.gender.NonBinary) hash ^= Gender.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (BattingStyle != global::Superstars.Payload.batting_style.RightHand) hash ^= BattingStyle.GetHashCode();
      if (BowlingStyle != global::Superstars.Payload.bowling_style.Fast) hash ^= BowlingStyle.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (LineupNumber != 0) hash ^= LineupNumber.GetHashCode();
      if (IsOut != false) hash ^= IsOut.GetHashCode();
      hash ^= equipmentSlots_.GetHashCode();
      hash ^= props_.GetHashCode();
      hash ^= passives_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (Rarity != global::Superstars.Payload.rarity.NoRarity) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Rarity);
      }
      if (ImageNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImageNumber);
      }
      if (Classification != global::Superstars.Payload.classification.NoClass) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Classification);
      }
      if (Gender != global::Superstars.Payload.gender.NonBinary) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Gender);
      }
      if (Power != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Power);
      }
      if (BattingStyle != global::Superstars.Payload.batting_style.RightHand) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BattingStyle);
      }
      if (BowlingStyle != global::Superstars.Payload.bowling_style.Fast) {
        output.WriteRawTag(72);
        output.WriteEnum((int) BowlingStyle);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Level);
      }
      if (LineupNumber != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LineupNumber);
      }
      if (IsOut != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsOut);
      }
      equipmentSlots_.WriteTo(output, _repeated_equipmentSlots_codec);
      props_.WriteTo(output, _repeated_props_codec);
      passives_.WriteTo(output, _repeated_passives_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Rarity != global::Superstars.Payload.rarity.NoRarity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rarity);
      }
      if (ImageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageNumber);
      }
      if (Classification != global::Superstars.Payload.classification.NoClass) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Classification);
      }
      if (Gender != global::Superstars.Payload.gender.NonBinary) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (BattingStyle != global::Superstars.Payload.batting_style.RightHand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattingStyle);
      }
      if (BowlingStyle != global::Superstars.Payload.bowling_style.Fast) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BowlingStyle);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (LineupNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineupNumber);
      }
      if (IsOut != false) {
        size += 1 + 1;
      }
      size += equipmentSlots_.CalculateSize(_repeated_equipmentSlots_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      size += passives_.CalculateSize(_repeated_passives_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.CharacterId != 0) {
        CharacterId = other.CharacterId;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Rarity != global::Superstars.Payload.rarity.NoRarity) {
        Rarity = other.Rarity;
      }
      if (other.ImageNumber != 0) {
        ImageNumber = other.ImageNumber;
      }
      if (other.Classification != global::Superstars.Payload.classification.NoClass) {
        Classification = other.Classification;
      }
      if (other.Gender != global::Superstars.Payload.gender.NonBinary) {
        Gender = other.Gender;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.BattingStyle != global::Superstars.Payload.batting_style.RightHand) {
        BattingStyle = other.BattingStyle;
      }
      if (other.BowlingStyle != global::Superstars.Payload.bowling_style.Fast) {
        BowlingStyle = other.BowlingStyle;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.LineupNumber != 0) {
        LineupNumber = other.LineupNumber;
      }
      if (other.IsOut != false) {
        IsOut = other.IsOut;
      }
      equipmentSlots_.Add(other.equipmentSlots_);
      props_.Add(other.props_);
      passives_.Add(other.passives_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CharacterId = input.ReadInt32();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 24: {
            Rarity = (global::Superstars.Payload.rarity) input.ReadEnum();
            break;
          }
          case 32: {
            ImageNumber = input.ReadInt32();
            break;
          }
          case 40: {
            Classification = (global::Superstars.Payload.classification) input.ReadEnum();
            break;
          }
          case 48: {
            Gender = (global::Superstars.Payload.gender) input.ReadEnum();
            break;
          }
          case 56: {
            Power = input.ReadInt32();
            break;
          }
          case 64: {
            BattingStyle = (global::Superstars.Payload.batting_style) input.ReadEnum();
            break;
          }
          case 72: {
            BowlingStyle = (global::Superstars.Payload.bowling_style) input.ReadEnum();
            break;
          }
          case 80: {
            Level = input.ReadInt32();
            break;
          }
          case 88: {
            LineupNumber = input.ReadInt32();
            break;
          }
          case 96: {
            IsOut = input.ReadBool();
            break;
          }
          case 106:
          case 104: {
            equipmentSlots_.AddEntriesFrom(input, _repeated_equipmentSlots_codec);
            break;
          }
          case 114:
          case 112: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 122:
          case 120: {
            passives_.AddEntriesFrom(input, _repeated_passives_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Inning : pb::IMessage<Inning> {
    private static readonly pb::MessageParser<Inning> _parser = new pb::MessageParser<Inning>(() => new Inning());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inning(Inning other) : this() {
      inning_ = other.inning_;
      runs_ = other.runs_;
      balls_ = other.balls_;
      wickets_ = other.wickets_;
      overNumber_ = other.overNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inning Clone() {
      return new Inning(this);
    }

    /// <summary>Field number for the "inning" field.</summary>
    public const int Inning_FieldNumber = 1;
    private global::Superstars.Payload.Innings inning_ = global::Superstars.Payload.Innings.First;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Innings Inning_ {
      get { return inning_; }
      set {
        inning_ = value;
      }
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 2;
    private int runs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Runs {
      get { return runs_; }
      set {
        runs_ = value;
      }
    }

    /// <summary>Field number for the "balls" field.</summary>
    public const int BallsFieldNumber = 3;
    private int balls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Balls {
      get { return balls_; }
      set {
        balls_ = value;
      }
    }

    /// <summary>Field number for the "wickets" field.</summary>
    public const int WicketsFieldNumber = 4;
    private int wickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wickets {
      get { return wickets_; }
      set {
        wickets_ = value;
      }
    }

    /// <summary>Field number for the "over_number" field.</summary>
    public const int OverNumberFieldNumber = 5;
    private int overNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverNumber {
      get { return overNumber_; }
      set {
        overNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inning_ != other.Inning_) return false;
      if (Runs != other.Runs) return false;
      if (Balls != other.Balls) return false;
      if (Wickets != other.Wickets) return false;
      if (OverNumber != other.OverNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inning_ != global::Superstars.Payload.Innings.First) hash ^= Inning_.GetHashCode();
      if (Runs != 0) hash ^= Runs.GetHashCode();
      if (Balls != 0) hash ^= Balls.GetHashCode();
      if (Wickets != 0) hash ^= Wickets.GetHashCode();
      if (OverNumber != 0) hash ^= OverNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inning_ != global::Superstars.Payload.Innings.First) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Inning_);
      }
      if (Runs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Runs);
      }
      if (Balls != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Balls);
      }
      if (Wickets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Wickets);
      }
      if (OverNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inning_ != global::Superstars.Payload.Innings.First) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Inning_);
      }
      if (Runs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Runs);
      }
      if (Balls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Balls);
      }
      if (Wickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wickets);
      }
      if (OverNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inning other) {
      if (other == null) {
        return;
      }
      if (other.Inning_ != global::Superstars.Payload.Innings.First) {
        Inning_ = other.Inning_;
      }
      if (other.Runs != 0) {
        Runs = other.Runs;
      }
      if (other.Balls != 0) {
        Balls = other.Balls;
      }
      if (other.Wickets != 0) {
        Wickets = other.Wickets;
      }
      if (other.OverNumber != 0) {
        OverNumber = other.OverNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Inning_ = (global::Superstars.Payload.Innings) input.ReadEnum();
            break;
          }
          case 16: {
            Runs = input.ReadInt32();
            break;
          }
          case 24: {
            Balls = input.ReadInt32();
            break;
          }
          case 32: {
            Wickets = input.ReadInt32();
            break;
          }
          case 40: {
            OverNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      usersInfo_ = other.usersInfo_.Clone();
      currentInning_ = other.currentInning_ != null ? other.currentInning_.Clone() : null;
      previousInning_ = other.previousInning_ != null ? other.previousInning_.Clone() : null;
      currentBall_ = other.currentBall_ != null ? other.currentBall_.Clone() : null;
      onStrike_ = other.onStrike_;
      offStrike_ = other.offStrike_;
      bowler_ = other.bowler_;
      previousEvent_ = other.previousEvent_;
      activeBowlerSa_ = other.activeBowlerSa_;
      activeBatsmanSa_ = other.activeBatsmanSa_;
      missedResults_ = other.missedResults_.Clone();
      currentState_ = other.currentState_;
      expectedEvent_ = other.expectedEvent_;
      selectionTimeout_ = other.selectionTimeout_;
      playerSelectionTimeout_ = other.playerSelectionTimeout_;
      bufferForSelectionTimeout_ = other.bufferForSelectionTimeout_;
      winnerTeam_ = other.winnerTeam_;
      selectionTimeRemaining_ = other.selectionTimeRemaining_;
      reconnectionCount_ = other.reconnectionCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usersInfo" field.</summary>
    public const int UsersInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Superstars.Payload.UserInfo> _repeated_usersInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Superstars.Payload.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.UserInfo> usersInfo_ = new pbc::RepeatedField<global::Superstars.Payload.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.UserInfo> UsersInfo {
      get { return usersInfo_; }
    }

    /// <summary>Field number for the "currentInning" field.</summary>
    public const int CurrentInningFieldNumber = 3;
    private global::Superstars.Payload.Inning currentInning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Inning CurrentInning {
      get { return currentInning_; }
      set {
        currentInning_ = value;
      }
    }

    /// <summary>Field number for the "previousInning" field.</summary>
    public const int PreviousInningFieldNumber = 4;
    private global::Superstars.Payload.Inning previousInning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Inning PreviousInning {
      get { return previousInning_; }
      set {
        previousInning_ = value;
      }
    }

    /// <summary>Field number for the "current_ball" field.</summary>
    public const int CurrentBallFieldNumber = 5;
    private global::Superstars.Payload.CurrentBall currentBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.CurrentBall CurrentBall {
      get { return currentBall_; }
      set {
        currentBall_ = value;
      }
    }

    /// <summary>Field number for the "on_strike" field.</summary>
    public const int OnStrikeFieldNumber = 6;
    private int onStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnStrike {
      get { return onStrike_; }
      set {
        onStrike_ = value;
      }
    }

    /// <summary>Field number for the "off_strike" field.</summary>
    public const int OffStrikeFieldNumber = 7;
    private int offStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffStrike {
      get { return offStrike_; }
      set {
        offStrike_ = value;
      }
    }

    /// <summary>Field number for the "bowler" field.</summary>
    public const int BowlerFieldNumber = 8;
    private int bowler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bowler {
      get { return bowler_; }
      set {
        bowler_ = value;
      }
    }

    /// <summary>Field number for the "previous_event" field.</summary>
    public const int PreviousEventFieldNumber = 9;
    private global::Superstars.Payload.Events previousEvent_ = global::Superstars.Payload.Events.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Events PreviousEvent {
      get { return previousEvent_; }
      set {
        previousEvent_ = value;
      }
    }

    /// <summary>Field number for the "active_bowler_sa" field.</summary>
    public const int ActiveBowlerSaFieldNumber = 10;
    private int activeBowlerSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveBowlerSa {
      get { return activeBowlerSa_; }
      set {
        activeBowlerSa_ = value;
      }
    }

    /// <summary>Field number for the "active_batsman_sa" field.</summary>
    public const int ActiveBatsmanSaFieldNumber = 11;
    private int activeBatsmanSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveBatsmanSa {
      get { return activeBatsmanSa_; }
      set {
        activeBatsmanSa_ = value;
      }
    }

    /// <summary>Field number for the "missed_results" field.</summary>
    public const int MissedResultsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Superstars.Payload.TResult> _repeated_missedResults_codec
        = pb::FieldCodec.ForMessage(98, global::Superstars.Payload.TResult.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.TResult> missedResults_ = new pbc::RepeatedField<global::Superstars.Payload.TResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.TResult> MissedResults {
      get { return missedResults_; }
    }

    /// <summary>Field number for the "current_state" field.</summary>
    public const int CurrentStateFieldNumber = 13;
    private global::Superstars.Payload.MatchStates currentState_ = global::Superstars.Payload.MatchStates.NoState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.MatchStates CurrentState {
      get { return currentState_; }
      set {
        currentState_ = value;
      }
    }

    /// <summary>Field number for the "expected_event" field.</summary>
    public const int ExpectedEventFieldNumber = 14;
    private global::Superstars.Payload.Events expectedEvent_ = global::Superstars.Payload.Events.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.Events ExpectedEvent {
      get { return expectedEvent_; }
      set {
        expectedEvent_ = value;
      }
    }

    /// <summary>Field number for the "selection_timeout" field.</summary>
    public const int SelectionTimeoutFieldNumber = 15;
    private int selectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectionTimeout {
      get { return selectionTimeout_; }
      set {
        selectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "player_selection_timeout" field.</summary>
    public const int PlayerSelectionTimeoutFieldNumber = 16;
    private int playerSelectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSelectionTimeout {
      get { return playerSelectionTimeout_; }
      set {
        playerSelectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "buffer_for_selection_timeout" field.</summary>
    public const int BufferForSelectionTimeoutFieldNumber = 17;
    private int bufferForSelectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferForSelectionTimeout {
      get { return bufferForSelectionTimeout_; }
      set {
        bufferForSelectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "winner_team" field.</summary>
    public const int WinnerTeamFieldNumber = 18;
    private string winnerTeam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerTeam {
      get { return winnerTeam_; }
      set {
        winnerTeam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selection_time_remaining" field.</summary>
    public const int SelectionTimeRemainingFieldNumber = 19;
    private int selectionTimeRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectionTimeRemaining {
      get { return selectionTimeRemaining_; }
      set {
        selectionTimeRemaining_ = value;
      }
    }

    /// <summary>Field number for the "reconnection_count" field.</summary>
    public const int ReconnectionCountFieldNumber = 20;
    private int reconnectionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReconnectionCount {
      get { return reconnectionCount_; }
      set {
        reconnectionCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!usersInfo_.Equals(other.usersInfo_)) return false;
      if (!object.Equals(CurrentInning, other.CurrentInning)) return false;
      if (!object.Equals(PreviousInning, other.PreviousInning)) return false;
      if (!object.Equals(CurrentBall, other.CurrentBall)) return false;
      if (OnStrike != other.OnStrike) return false;
      if (OffStrike != other.OffStrike) return false;
      if (Bowler != other.Bowler) return false;
      if (PreviousEvent != other.PreviousEvent) return false;
      if (ActiveBowlerSa != other.ActiveBowlerSa) return false;
      if (ActiveBatsmanSa != other.ActiveBatsmanSa) return false;
      if(!missedResults_.Equals(other.missedResults_)) return false;
      if (CurrentState != other.CurrentState) return false;
      if (ExpectedEvent != other.ExpectedEvent) return false;
      if (SelectionTimeout != other.SelectionTimeout) return false;
      if (PlayerSelectionTimeout != other.PlayerSelectionTimeout) return false;
      if (BufferForSelectionTimeout != other.BufferForSelectionTimeout) return false;
      if (WinnerTeam != other.WinnerTeam) return false;
      if (SelectionTimeRemaining != other.SelectionTimeRemaining) return false;
      if (ReconnectionCount != other.ReconnectionCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= usersInfo_.GetHashCode();
      if (currentInning_ != null) hash ^= CurrentInning.GetHashCode();
      if (previousInning_ != null) hash ^= PreviousInning.GetHashCode();
      if (currentBall_ != null) hash ^= CurrentBall.GetHashCode();
      if (OnStrike != 0) hash ^= OnStrike.GetHashCode();
      if (OffStrike != 0) hash ^= OffStrike.GetHashCode();
      if (Bowler != 0) hash ^= Bowler.GetHashCode();
      if (PreviousEvent != global::Superstars.Payload.Events.None) hash ^= PreviousEvent.GetHashCode();
      if (ActiveBowlerSa != 0) hash ^= ActiveBowlerSa.GetHashCode();
      if (ActiveBatsmanSa != 0) hash ^= ActiveBatsmanSa.GetHashCode();
      hash ^= missedResults_.GetHashCode();
      if (CurrentState != global::Superstars.Payload.MatchStates.NoState) hash ^= CurrentState.GetHashCode();
      if (ExpectedEvent != global::Superstars.Payload.Events.None) hash ^= ExpectedEvent.GetHashCode();
      if (SelectionTimeout != 0) hash ^= SelectionTimeout.GetHashCode();
      if (PlayerSelectionTimeout != 0) hash ^= PlayerSelectionTimeout.GetHashCode();
      if (BufferForSelectionTimeout != 0) hash ^= BufferForSelectionTimeout.GetHashCode();
      if (WinnerTeam.Length != 0) hash ^= WinnerTeam.GetHashCode();
      if (SelectionTimeRemaining != 0) hash ^= SelectionTimeRemaining.GetHashCode();
      if (ReconnectionCount != 0) hash ^= ReconnectionCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      usersInfo_.WriteTo(output, _repeated_usersInfo_codec);
      if (currentInning_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrentInning);
      }
      if (previousInning_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PreviousInning);
      }
      if (currentBall_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentBall);
      }
      if (OnStrike != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OnStrike);
      }
      if (OffStrike != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OffStrike);
      }
      if (Bowler != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bowler);
      }
      if (PreviousEvent != global::Superstars.Payload.Events.None) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PreviousEvent);
      }
      if (ActiveBowlerSa != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ActiveBowlerSa);
      }
      if (ActiveBatsmanSa != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActiveBatsmanSa);
      }
      missedResults_.WriteTo(output, _repeated_missedResults_codec);
      if (CurrentState != global::Superstars.Payload.MatchStates.NoState) {
        output.WriteRawTag(104);
        output.WriteEnum((int) CurrentState);
      }
      if (ExpectedEvent != global::Superstars.Payload.Events.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ExpectedEvent);
      }
      if (SelectionTimeout != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SelectionTimeout);
      }
      if (PlayerSelectionTimeout != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PlayerSelectionTimeout);
      }
      if (BufferForSelectionTimeout != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(BufferForSelectionTimeout);
      }
      if (WinnerTeam.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WinnerTeam);
      }
      if (SelectionTimeRemaining != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SelectionTimeRemaining);
      }
      if (ReconnectionCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ReconnectionCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += usersInfo_.CalculateSize(_repeated_usersInfo_codec);
      if (currentInning_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentInning);
      }
      if (previousInning_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInning);
      }
      if (currentBall_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentBall);
      }
      if (OnStrike != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnStrike);
      }
      if (OffStrike != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffStrike);
      }
      if (Bowler != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bowler);
      }
      if (PreviousEvent != global::Superstars.Payload.Events.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PreviousEvent);
      }
      if (ActiveBowlerSa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveBowlerSa);
      }
      if (ActiveBatsmanSa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveBatsmanSa);
      }
      size += missedResults_.CalculateSize(_repeated_missedResults_codec);
      if (CurrentState != global::Superstars.Payload.MatchStates.NoState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentState);
      }
      if (ExpectedEvent != global::Superstars.Payload.Events.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExpectedEvent);
      }
      if (SelectionTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectionTimeout);
      }
      if (PlayerSelectionTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerSelectionTimeout);
      }
      if (BufferForSelectionTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BufferForSelectionTimeout);
      }
      if (WinnerTeam.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WinnerTeam);
      }
      if (SelectionTimeRemaining != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelectionTimeRemaining);
      }
      if (ReconnectionCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReconnectionCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      usersInfo_.Add(other.usersInfo_);
      if (other.currentInning_ != null) {
        if (currentInning_ == null) {
          CurrentInning = new global::Superstars.Payload.Inning();
        }
        CurrentInning.MergeFrom(other.CurrentInning);
      }
      if (other.previousInning_ != null) {
        if (previousInning_ == null) {
          PreviousInning = new global::Superstars.Payload.Inning();
        }
        PreviousInning.MergeFrom(other.PreviousInning);
      }
      if (other.currentBall_ != null) {
        if (currentBall_ == null) {
          CurrentBall = new global::Superstars.Payload.CurrentBall();
        }
        CurrentBall.MergeFrom(other.CurrentBall);
      }
      if (other.OnStrike != 0) {
        OnStrike = other.OnStrike;
      }
      if (other.OffStrike != 0) {
        OffStrike = other.OffStrike;
      }
      if (other.Bowler != 0) {
        Bowler = other.Bowler;
      }
      if (other.PreviousEvent != global::Superstars.Payload.Events.None) {
        PreviousEvent = other.PreviousEvent;
      }
      if (other.ActiveBowlerSa != 0) {
        ActiveBowlerSa = other.ActiveBowlerSa;
      }
      if (other.ActiveBatsmanSa != 0) {
        ActiveBatsmanSa = other.ActiveBatsmanSa;
      }
      missedResults_.Add(other.missedResults_);
      if (other.CurrentState != global::Superstars.Payload.MatchStates.NoState) {
        CurrentState = other.CurrentState;
      }
      if (other.ExpectedEvent != global::Superstars.Payload.Events.None) {
        ExpectedEvent = other.ExpectedEvent;
      }
      if (other.SelectionTimeout != 0) {
        SelectionTimeout = other.SelectionTimeout;
      }
      if (other.PlayerSelectionTimeout != 0) {
        PlayerSelectionTimeout = other.PlayerSelectionTimeout;
      }
      if (other.BufferForSelectionTimeout != 0) {
        BufferForSelectionTimeout = other.BufferForSelectionTimeout;
      }
      if (other.WinnerTeam.Length != 0) {
        WinnerTeam = other.WinnerTeam;
      }
      if (other.SelectionTimeRemaining != 0) {
        SelectionTimeRemaining = other.SelectionTimeRemaining;
      }
      if (other.ReconnectionCount != 0) {
        ReconnectionCount = other.ReconnectionCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            usersInfo_.AddEntriesFrom(input, _repeated_usersInfo_codec);
            break;
          }
          case 26: {
            if (currentInning_ == null) {
              CurrentInning = new global::Superstars.Payload.Inning();
            }
            input.ReadMessage(CurrentInning);
            break;
          }
          case 34: {
            if (previousInning_ == null) {
              PreviousInning = new global::Superstars.Payload.Inning();
            }
            input.ReadMessage(PreviousInning);
            break;
          }
          case 42: {
            if (currentBall_ == null) {
              CurrentBall = new global::Superstars.Payload.CurrentBall();
            }
            input.ReadMessage(CurrentBall);
            break;
          }
          case 48: {
            OnStrike = input.ReadInt32();
            break;
          }
          case 56: {
            OffStrike = input.ReadInt32();
            break;
          }
          case 64: {
            Bowler = input.ReadInt32();
            break;
          }
          case 72: {
            PreviousEvent = (global::Superstars.Payload.Events) input.ReadEnum();
            break;
          }
          case 80: {
            ActiveBowlerSa = input.ReadInt32();
            break;
          }
          case 88: {
            ActiveBatsmanSa = input.ReadInt32();
            break;
          }
          case 98: {
            missedResults_.AddEntriesFrom(input, _repeated_missedResults_codec);
            break;
          }
          case 104: {
            CurrentState = (global::Superstars.Payload.MatchStates) input.ReadEnum();
            break;
          }
          case 112: {
            ExpectedEvent = (global::Superstars.Payload.Events) input.ReadEnum();
            break;
          }
          case 120: {
            SelectionTimeout = input.ReadInt32();
            break;
          }
          case 128: {
            PlayerSelectionTimeout = input.ReadInt32();
            break;
          }
          case 136: {
            BufferForSelectionTimeout = input.ReadInt32();
            break;
          }
          case 146: {
            WinnerTeam = input.ReadString();
            break;
          }
          case 152: {
            SelectionTimeRemaining = input.ReadInt32();
            break;
          }
          case 160: {
            ReconnectionCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      id_ = other.id_;
      playState_ = other.playState_;
      lineupInfo_ = other.lineupInfo_.Clone();
      totalMisses_ = other.totalMisses_;
      activatedSa_ = other.activatedSa_;
      saDuration_ = other.saDuration_;
      saTotalDuration_ = other.saTotalDuration_;
      manaFill_ = other.manaFill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "play_state" field.</summary>
    public const int PlayStateFieldNumber = 2;
    private global::Superstars.Payload.PlayStates playState_ = global::Superstars.Payload.PlayStates.NoPlay;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.PlayStates PlayState {
      get { return playState_; }
      set {
        playState_ = value;
      }
    }

    /// <summary>Field number for the "lineup_info" field.</summary>
    public const int LineupInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Superstars.Payload.PlayerInfo> _repeated_lineupInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Superstars.Payload.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.PlayerInfo> lineupInfo_ = new pbc::RepeatedField<global::Superstars.Payload.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.PlayerInfo> LineupInfo {
      get { return lineupInfo_; }
    }

    /// <summary>Field number for the "total_misses" field.</summary>
    public const int TotalMissesFieldNumber = 4;
    private int totalMisses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalMisses {
      get { return totalMisses_; }
      set {
        totalMisses_ = value;
      }
    }

    /// <summary>Field number for the "activated_sa" field.</summary>
    public const int ActivatedSaFieldNumber = 5;
    private int activatedSa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivatedSa {
      get { return activatedSa_; }
      set {
        activatedSa_ = value;
      }
    }

    /// <summary>Field number for the "sa_duration" field.</summary>
    public const int SaDurationFieldNumber = 6;
    private int saDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaDuration {
      get { return saDuration_; }
      set {
        saDuration_ = value;
      }
    }

    /// <summary>Field number for the "sa_total_duration" field.</summary>
    public const int SaTotalDurationFieldNumber = 7;
    private int saTotalDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaTotalDuration {
      get { return saTotalDuration_; }
      set {
        saTotalDuration_ = value;
      }
    }

    /// <summary>Field number for the "mana_fill" field.</summary>
    public const int ManaFillFieldNumber = 8;
    private int manaFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaFill {
      get { return manaFill_; }
      set {
        manaFill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PlayState != other.PlayState) return false;
      if(!lineupInfo_.Equals(other.lineupInfo_)) return false;
      if (TotalMisses != other.TotalMisses) return false;
      if (ActivatedSa != other.ActivatedSa) return false;
      if (SaDuration != other.SaDuration) return false;
      if (SaTotalDuration != other.SaTotalDuration) return false;
      if (ManaFill != other.ManaFill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) hash ^= PlayState.GetHashCode();
      hash ^= lineupInfo_.GetHashCode();
      if (TotalMisses != 0) hash ^= TotalMisses.GetHashCode();
      if (ActivatedSa != 0) hash ^= ActivatedSa.GetHashCode();
      if (SaDuration != 0) hash ^= SaDuration.GetHashCode();
      if (SaTotalDuration != 0) hash ^= SaTotalDuration.GetHashCode();
      if (ManaFill != 0) hash ^= ManaFill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PlayState);
      }
      lineupInfo_.WriteTo(output, _repeated_lineupInfo_codec);
      if (TotalMisses != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalMisses);
      }
      if (ActivatedSa != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActivatedSa);
      }
      if (SaDuration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SaDuration);
      }
      if (SaTotalDuration != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SaTotalDuration);
      }
      if (ManaFill != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ManaFill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayState);
      }
      size += lineupInfo_.CalculateSize(_repeated_lineupInfo_codec);
      if (TotalMisses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMisses);
      }
      if (ActivatedSa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivatedSa);
      }
      if (SaDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaDuration);
      }
      if (SaTotalDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaTotalDuration);
      }
      if (ManaFill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaFill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PlayState != global::Superstars.Payload.PlayStates.NoPlay) {
        PlayState = other.PlayState;
      }
      lineupInfo_.Add(other.lineupInfo_);
      if (other.TotalMisses != 0) {
        TotalMisses = other.TotalMisses;
      }
      if (other.ActivatedSa != 0) {
        ActivatedSa = other.ActivatedSa;
      }
      if (other.SaDuration != 0) {
        SaDuration = other.SaDuration;
      }
      if (other.SaTotalDuration != 0) {
        SaTotalDuration = other.SaTotalDuration;
      }
      if (other.ManaFill != 0) {
        ManaFill = other.ManaFill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            PlayState = (global::Superstars.Payload.PlayStates) input.ReadEnum();
            break;
          }
          case 26: {
            lineupInfo_.AddEntriesFrom(input, _repeated_lineupInfo_codec);
            break;
          }
          case 32: {
            TotalMisses = input.ReadInt32();
            break;
          }
          case 40: {
            ActivatedSa = input.ReadInt32();
            break;
          }
          case 48: {
            SaDuration = input.ReadInt32();
            break;
          }
          case 56: {
            SaTotalDuration = input.ReadInt32();
            break;
          }
          case 64: {
            ManaFill = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      lineupNumber_ = other.lineupNumber_;
      out_ = other.out_;
      played_ = other.played_;
      runsScored_ = other.runsScored_;
      ballsFaced_ = other.ballsFaced_;
      wicketsTaken_ = other.wicketsTaken_;
      ballsBowled_ = other.ballsBowled_;
      runsConceded_ = other.runsConceded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "lineup_number" field.</summary>
    public const int LineupNumberFieldNumber = 1;
    private int lineupNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineupNumber {
      get { return lineupNumber_; }
      set {
        lineupNumber_ = value;
      }
    }

    /// <summary>Field number for the "out" field.</summary>
    public const int OutFieldNumber = 2;
    private bool out_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Out {
      get { return out_; }
      set {
        out_ = value;
      }
    }

    /// <summary>Field number for the "played" field.</summary>
    public const int PlayedFieldNumber = 3;
    private bool played_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Played {
      get { return played_; }
      set {
        played_ = value;
      }
    }

    /// <summary>Field number for the "runs_scored" field.</summary>
    public const int RunsScoredFieldNumber = 4;
    private int runsScored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunsScored {
      get { return runsScored_; }
      set {
        runsScored_ = value;
      }
    }

    /// <summary>Field number for the "balls_faced" field.</summary>
    public const int BallsFacedFieldNumber = 5;
    private int ballsFaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallsFaced {
      get { return ballsFaced_; }
      set {
        ballsFaced_ = value;
      }
    }

    /// <summary>Field number for the "wickets_taken" field.</summary>
    public const int WicketsTakenFieldNumber = 6;
    private int wicketsTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WicketsTaken {
      get { return wicketsTaken_; }
      set {
        wicketsTaken_ = value;
      }
    }

    /// <summary>Field number for the "balls_bowled" field.</summary>
    public const int BallsBowledFieldNumber = 7;
    private int ballsBowled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallsBowled {
      get { return ballsBowled_; }
      set {
        ballsBowled_ = value;
      }
    }

    /// <summary>Field number for the "runs_conceded" field.</summary>
    public const int RunsConcededFieldNumber = 8;
    private int runsConceded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunsConceded {
      get { return runsConceded_; }
      set {
        runsConceded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineupNumber != other.LineupNumber) return false;
      if (Out != other.Out) return false;
      if (Played != other.Played) return false;
      if (RunsScored != other.RunsScored) return false;
      if (BallsFaced != other.BallsFaced) return false;
      if (WicketsTaken != other.WicketsTaken) return false;
      if (BallsBowled != other.BallsBowled) return false;
      if (RunsConceded != other.RunsConceded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineupNumber != 0) hash ^= LineupNumber.GetHashCode();
      if (Out != false) hash ^= Out.GetHashCode();
      if (Played != false) hash ^= Played.GetHashCode();
      if (RunsScored != 0) hash ^= RunsScored.GetHashCode();
      if (BallsFaced != 0) hash ^= BallsFaced.GetHashCode();
      if (WicketsTaken != 0) hash ^= WicketsTaken.GetHashCode();
      if (BallsBowled != 0) hash ^= BallsBowled.GetHashCode();
      if (RunsConceded != 0) hash ^= RunsConceded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LineupNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineupNumber);
      }
      if (Out != false) {
        output.WriteRawTag(16);
        output.WriteBool(Out);
      }
      if (Played != false) {
        output.WriteRawTag(24);
        output.WriteBool(Played);
      }
      if (RunsScored != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RunsScored);
      }
      if (BallsFaced != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BallsFaced);
      }
      if (WicketsTaken != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WicketsTaken);
      }
      if (BallsBowled != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BallsBowled);
      }
      if (RunsConceded != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RunsConceded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineupNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineupNumber);
      }
      if (Out != false) {
        size += 1 + 1;
      }
      if (Played != false) {
        size += 1 + 1;
      }
      if (RunsScored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunsScored);
      }
      if (BallsFaced != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallsFaced);
      }
      if (WicketsTaken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WicketsTaken);
      }
      if (BallsBowled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallsBowled);
      }
      if (RunsConceded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunsConceded);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.LineupNumber != 0) {
        LineupNumber = other.LineupNumber;
      }
      if (other.Out != false) {
        Out = other.Out;
      }
      if (other.Played != false) {
        Played = other.Played;
      }
      if (other.RunsScored != 0) {
        RunsScored = other.RunsScored;
      }
      if (other.BallsFaced != 0) {
        BallsFaced = other.BallsFaced;
      }
      if (other.WicketsTaken != 0) {
        WicketsTaken = other.WicketsTaken;
      }
      if (other.BallsBowled != 0) {
        BallsBowled = other.BallsBowled;
      }
      if (other.RunsConceded != 0) {
        RunsConceded = other.RunsConceded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineupNumber = input.ReadInt32();
            break;
          }
          case 16: {
            Out = input.ReadBool();
            break;
          }
          case 24: {
            Played = input.ReadBool();
            break;
          }
          case 32: {
            RunsScored = input.ReadInt32();
            break;
          }
          case 40: {
            BallsFaced = input.ReadInt32();
            break;
          }
          case 48: {
            WicketsTaken = input.ReadInt32();
            break;
          }
          case 56: {
            BallsBowled = input.ReadInt32();
            break;
          }
          case 64: {
            RunsConceded = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrentBall : pb::IMessage<CurrentBall> {
    private static readonly pb::MessageParser<CurrentBall> _parser = new pb::MessageParser<CurrentBall>(() => new CurrentBall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentBall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Superstars.Payload.PayloadReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentBall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentBall(CurrentBall other) : this() {
      overBallNumber_ = other.overBallNumber_;
      balls_ = other.balls_.Clone();
      shots_ = other.shots_.Clone();
      ballId_ = other.ballId_;
      shotSelected_ = other.shotSelected_ != null ? other.shotSelected_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentBall Clone() {
      return new CurrentBall(this);
    }

    /// <summary>Field number for the "over_ball_number" field.</summary>
    public const int OverBallNumberFieldNumber = 1;
    private int overBallNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBallNumber {
      get { return overBallNumber_; }
      set {
        overBallNumber_ = value;
      }
    }

    /// <summary>Field number for the "balls" field.</summary>
    public const int BallsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Superstars.Payload.TBall> _repeated_balls_codec
        = pb::FieldCodec.ForMessage(18, global::Superstars.Payload.TBall.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.TBall> balls_ = new pbc::RepeatedField<global::Superstars.Payload.TBall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.TBall> Balls {
      get { return balls_; }
    }

    /// <summary>Field number for the "shots" field.</summary>
    public const int ShotsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Superstars.Payload.TShot> _repeated_shots_codec
        = pb::FieldCodec.ForMessage(26, global::Superstars.Payload.TShot.Parser);
    private readonly pbc::RepeatedField<global::Superstars.Payload.TShot> shots_ = new pbc::RepeatedField<global::Superstars.Payload.TShot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Superstars.Payload.TShot> Shots {
      get { return shots_; }
    }

    /// <summary>Field number for the "ball_id" field.</summary>
    public const int BallIdFieldNumber = 4;
    private int ballId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallId {
      get { return ballId_; }
      set {
        ballId_ = value;
      }
    }

    /// <summary>Field number for the "shot_selected" field.</summary>
    public const int ShotSelectedFieldNumber = 5;
    private global::Superstars.Payload.TShot shotSelected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TShot ShotSelected {
      get { return shotSelected_; }
      set {
        shotSelected_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 6;
    private global::Superstars.Payload.TResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Superstars.Payload.TResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentBall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentBall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverBallNumber != other.OverBallNumber) return false;
      if(!balls_.Equals(other.balls_)) return false;
      if(!shots_.Equals(other.shots_)) return false;
      if (BallId != other.BallId) return false;
      if (!object.Equals(ShotSelected, other.ShotSelected)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OverBallNumber != 0) hash ^= OverBallNumber.GetHashCode();
      hash ^= balls_.GetHashCode();
      hash ^= shots_.GetHashCode();
      if (BallId != 0) hash ^= BallId.GetHashCode();
      if (shotSelected_ != null) hash ^= ShotSelected.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OverBallNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OverBallNumber);
      }
      balls_.WriteTo(output, _repeated_balls_codec);
      shots_.WriteTo(output, _repeated_shots_codec);
      if (BallId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BallId);
      }
      if (shotSelected_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ShotSelected);
      }
      if (result_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OverBallNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBallNumber);
      }
      size += balls_.CalculateSize(_repeated_balls_codec);
      size += shots_.CalculateSize(_repeated_shots_codec);
      if (BallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallId);
      }
      if (shotSelected_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShotSelected);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentBall other) {
      if (other == null) {
        return;
      }
      if (other.OverBallNumber != 0) {
        OverBallNumber = other.OverBallNumber;
      }
      balls_.Add(other.balls_);
      shots_.Add(other.shots_);
      if (other.BallId != 0) {
        BallId = other.BallId;
      }
      if (other.shotSelected_ != null) {
        if (shotSelected_ == null) {
          ShotSelected = new global::Superstars.Payload.TShot();
        }
        ShotSelected.MergeFrom(other.ShotSelected);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Superstars.Payload.TResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverBallNumber = input.ReadInt32();
            break;
          }
          case 18: {
            balls_.AddEntriesFrom(input, _repeated_balls_codec);
            break;
          }
          case 26: {
            shots_.AddEntriesFrom(input, _repeated_shots_codec);
            break;
          }
          case 32: {
            BallId = input.ReadInt32();
            break;
          }
          case 42: {
            if (shotSelected_ == null) {
              ShotSelected = new global::Superstars.Payload.TShot();
            }
            input.ReadMessage(ShotSelected);
            break;
          }
          case 50: {
            if (result_ == null) {
              Result = new global::Superstars.Payload.TResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
